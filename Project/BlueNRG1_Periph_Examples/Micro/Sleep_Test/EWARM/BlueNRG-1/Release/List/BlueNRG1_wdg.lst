###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       29/Nov/2017  10:11:20
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Library\BlueNRG1_Periph_Driver\src\BlueNRG1_wdg.c
#    Command line =  
#        "D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Library\BlueNRG1_Periph_Driver\src\BlueNRG1_wdg.c" -D
#        HS_SPEED_XTAL=HS_SPEED_XTAL_16MHZ -D
#        LS_SOURCE=LS_SOURCE_EXTERNAL_32KHZ -D SMPS_INDUCTOR=SMPS_INDUCTOR_10uH
#        --preprocess=cl "D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2
#        DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\Release\List"
#        -lCN "D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\Release\List"
#        -lb "D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\Release\List"
#        --diag_suppress Pe1665 -o "D:\Program Files
#        (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\Release\Obj"
#        --debug --endian=little --cpu=Cortex-M0 --diag_warning Pe1665
#        --diag_suppress Pe1665 -e --fpu=None --dlib_config
#        D:\Software\IAR_BlueNRG\arm\INC\c\DLib_Config_Normal.h -I "D:\Program
#        Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\..\..\"
#        -I "D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\..\..\..\..\..\..\Library\BlueNRG1_Periph_Driver\inc\"
#        -I "D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\..\..\..\..\..\..\Library\CMSIS\Device\ST\BlueNRG1\Include\"
#        -I "D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\..\..\..\..\..\..\Library\SDK_Eval_BlueNRG1\inc\"
#        -I "D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\..\..\..\..\..\..\Library\CMSIS\Include\"
#        -I "D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\..\..\..\..\..\..\Library\hal\inc\"
#        -I "D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\..\..\..\..\..\..\Library\Bluetooth_LE\inc\"
#        -Ohz
#    Locale       =  Chinese (Simplified)_China.936
#    List file    =  
#        D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\Release\List\BlueNRG1_wdg.lst
#    Object file  =  
#        D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\Release\Obj\BlueNRG1_wdg.o
#
###############################################################################

D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK 2.5.0\Library\BlueNRG1_Periph_Driver\src\BlueNRG1_wdg.c
      1          /**
      2            ******************************************************************************
      3            * @file    BlueNRG1_WDG.c
      4            * @author  VMA Application Team
      5            * @version V2.0.0
      6            * @date    21-March-2016
      7            * @brief   This file provides all the WDG firmware functions.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "BlueNRG1_wdg.h"
     24          
     25          
     26          /** @addtogroup BLUENRG1_Peripheral_Driver BLUENRG1 Peripheral Driver
     27            * @{
     28            */
     29          
     30          /** @defgroup WDG_Peripheral WDG Peripheral
     31            * @{
     32            */
     33          
     34          /** @defgroup WDG_Private_TypesDefinitions Private Types Definitions
     35            * @{
     36            */
     37          
     38          /**
     39            * @}
     40            */
     41          
     42          /** @defgroup WDG_Private_Defines Private Defines
     43            * @{
     44            */
     45          
     46          #define WDG_WRITE_ACCESS_UNLOCK      ((uint32_t)0x1ACCE551)       /*!< Enables WDG write access */
     47          #define WDG_WRITE_ACCESS_LOCK        ((uint32_t)0x00000000)       /*!< Disables WDG write access */
     48              
     49          /**
     50            * @}
     51            */ 
     52          
     53          /** @defgroup WDG_Private_Macros Private Macros
     54            * @{
     55            */
     56          
     57          /**
     58            * @}
     59            */
     60          
     61          /** @defgroup WDG_Private_Variables Private Variables
     62            * @{
     63            */
     64          
     65          /**
     66            * @}
     67            */
     68          
     69          /** @defgroup WDG_Private_FunctionPrototypes Private Function Prototypes
     70            * @{
     71            */
     72          
     73          /**
     74            * @}
     75            */
     76          
     77          /** @defgroup WDG_Private_Functions Private Functions
     78            * @{
     79            */
     80          
     81          /**
     82            * @}
     83            */
     84          	
     85          /** @defgroup WDG_Public_Functions Public Functions
     86          * @{
     87          */
     88          
     89          /**
     90            * @brief  Enables or disables write access to all the other WDG registers.
     91            * @param  NewState: functional state @ref FunctionalState
     92            *         This parameter can be: ENABLE or DISABLE.
     93            * @retval None
     94            */

   \                                 In section .text, align 2, keep-with-next
     95          void WDG_SetWriteAccess(FunctionalState NewState)
     96          {
     97            /* Check the parameters */
     98            assert_param(IS_FUNCTIONAL_STATE(NewState));
     99            
    100            if (NewState != DISABLE) {
   \                     WDG_SetWriteAccess: (+1)
   \   00000000   0x....             LDR      R1,??DataTable7  ;; 0x40700c00
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD000             BEQ      ??WDG_SetWriteAccess_0
    101              WDG->LOCK = WDG_WRITE_ACCESS_UNLOCK;
   \   00000006   0x....             LDR      R0,??DataTable7_1  ;; 0x1acce551
    102            }
    103            else {
    104              WDG->LOCK = WDG_WRITE_ACCESS_LOCK;
   \                     ??WDG_SetWriteAccess_0: (+1)
   \   00000008   0x6008             STR      R0,[R1, #+0]
    105            }
    106          }
   \   0000000A   0x4770             BX       LR               ;; return
    107          
    108          
    109          /**
    110            * @brief  Get the write access state.
    111            * @param  None
    112            * @retval NewState: functional state @ref FunctionalState
    113            *         This parameter can be: ENABLE or DISABLE.
    114            */

   \                                 In section .text, align 2, keep-with-next
    115          FunctionalState WDG_GetWriteAccess(void)
    116          {
    117            return (FunctionalState)!WDG->LOCK;
   \                     WDG_GetWriteAccess: (+1)
   \   00000000   0x....             LDR      R0,??DataTable7  ;; 0x40700c00
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x1E40             SUBS     R0,R0,#+1
   \   00000006   0x4180             SBCS     R0,R0,R0
   \   00000008   0x0FC0             LSRS     R0,R0,#+31
   \   0000000A   0x4770             BX       LR               ;; return
    118            
    119          }
    120          
    121          /**
    122            * @brief  Sets WDG reload value.
    123            * @param  WDG_Reload: specifies the WDG reload value.
    124            *   This parameter must be a number greater than 0.
    125            * @retval None
    126            */

   \                                 In section .text, align 2, keep-with-next
    127          void WDG_SetReload(uint32_t WDG_Reload)
    128          {
    129            /* Check the parameters */
    130            assert_param(WDG_Reload > 0);
    131            WDG->LR = WDG_Reload;
   \                     WDG_SetReload: (+1)
   \   00000000   0x....             LDR      R1,??DataTable7_2  ;; 0x40700000
   \   00000002   0x6008             STR      R0,[R1, #+0]
    132          }
   \   00000004   0x4770             BX       LR               ;; return
    133          
    134          /**
    135            * @brief  Enables WDG reset.
    136            * @param  None
    137            * @retval None
    138            */

   \                                 In section .text, align 2, keep-with-next
    139          void WDG_Enable(void)
    140          {
    141            WDG->CR_b.INTEN = SET;
   \                     WDG_Enable: (+1)
   \   00000000   0x....             LDR      R0,??DataTable7_3  ;; 0x40700008
   \   00000002   0x7801             LDRB     R1,[R0, #+0]
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x430A             ORRS     R2,R2,R1
   \   00000008   0x7002             STRB     R2,[R0, #+0]
    142            WDG->CR_b.RESEN = SET;
   \   0000000A   0x7801             LDRB     R1,[R0, #+0]
   \   0000000C   0x2202             MOVS     R2,#+2
   \   0000000E   0x430A             ORRS     R2,R2,R1
   \   00000010   0x7002             STRB     R2,[R0, #+0]
    143          }
   \   00000012   0x4770             BX       LR               ;; return
    144          
    145          /**
    146            * @brief  Gets the WDG counter value.
    147            * @param  None
    148            * @retval WDG counter value.
    149            */

   \                                 In section .text, align 2, keep-with-next
    150          uint32_t WDG_GetCounter(void)
    151          {
    152            return WDG->VAL;
   \                     WDG_GetCounter: (+1)
   \   00000000   0x....             LDR      R0,??DataTable7_4  ;; 0x40700004
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
    153          }
    154          
    155          /**
    156            * @brief  Enables or disables the WDG interrupt.
    157            * @param  NewState: functional state @ref FunctionalState
    158            *         This parameter can be: ENABLE or DISABLE.
    159            * @retval None
    160            */

   \                                 In section .text, align 2, keep-with-next
    161          void WDG_ITConfig(FunctionalState NewState)
    162          {
    163            /* Check the parameters */
    164            assert_param(IS_FUNCTIONAL_STATE(NewState));
    165          
    166            if (NewState != DISABLE) {
   \                     WDG_ITConfig: (+1)
   \   00000000   0x....             LDR      R1,??DataTable7_3  ;; 0x40700008
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0x7808             LDRB     R0,[R1, #+0]
   \   00000006   0xD002             BEQ      ??WDG_ITConfig_0
    167              WDG->CR_b.INTEN = SET;
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0x4302             ORRS     R2,R2,R0
   \   0000000C   0xE001             B        ??WDG_ITConfig_1
    168            }
    169            else {
    170              WDG->CR_b.INTEN = RESET;
   \                     ??WDG_ITConfig_0: (+1)
   \   0000000E   0x22FE             MOVS     R2,#+254
   \   00000010   0x4002             ANDS     R2,R2,R0
   \                     ??WDG_ITConfig_1: (+1)
   \   00000012   0x700A             STRB     R2,[R1, #+0]
    171            }
    172          }
   \   00000014   0x4770             BX       LR               ;; return
    173          
    174          /**
    175            * @brief  Checks whether the WDG interrupt has occurred or not. 
    176            * @param  None
    177            * @retval  ITStatus: functional state @ref ITStatus
    178            *         This parameter can be: SET or RESET.
    179            */

   \                                 In section .text, align 2, keep-with-next
    180          ITStatus WDG_GetITStatus(void)
    181          {
    182            FlagStatus bitstatus = RESET;
   \                     WDG_GetITStatus: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
    183          
    184            /* Check the status of the WDG interrupt */
    185            if (WDG->RIS != (uint32_t)RESET) {
   \   00000002   0x....             LDR      R1,??DataTable7_5  ;; 0x40700010
   \   00000004   0x7809             LDRB     R1,[R1, #+0]
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD000             BEQ      ??WDG_GetITStatus_0
    186              bitstatus = SET;
   \   0000000A   0x2001             MOVS     R0,#+1
    187            }
    188            
    189            return  bitstatus;
   \                     ??WDG_GetITStatus_0: (+1)
   \   0000000C   0x4770             BX       LR               ;; return
    190          }
    191          
    192          /**
    193            * @brief  Clears the WDG's interrupt pending bit.
    194            * @param  None
    195            * @retval None
    196            */

   \                                 In section .text, align 2, keep-with-next
    197          void WDG_ClearITPendingBit(void)
    198          {
    199            WDG->ICR = 0xFFFFFFFF;
   \                     WDG_ClearITPendingBit: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x43C0             MVNS     R0,R0            ;; #-1
   \   00000004   0x....             LDR      R1,??DataTable7_6  ;; 0x4070000c
   \   00000006   0x6008             STR      R0,[R1, #+0]
    200          }
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x40700C00         DC32     0x40700c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x1ACCE551         DC32     0x1acce551

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x40700000         DC32     0x40700000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x40700008         DC32     0x40700008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x40700004         DC32     0x40700004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x40700010         DC32     0x40700010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x4070000C         DC32     0x4070000c
    201          
    202          /**
    203            * @}
    204            */
    205          
    206          /**
    207            * @}
    208            */
    209          
    210          /**
    211            * @}
    212            */
    213          
    214          /******************* (C) COPYRIGHT 2015 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   WDG_ClearITPendingBit
       0   WDG_Enable
       0   WDG_GetCounter
       0   WDG_GetITStatus
       0   WDG_GetWriteAccess
       0   WDG_ITConfig
       0   WDG_SetReload
       0   WDG_SetWriteAccess


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
      10  WDG_ClearITPendingBit
      20  WDG_Enable
       6  WDG_GetCounter
      14  WDG_GetITStatus
      12  WDG_GetWriteAccess
      22  WDG_ITConfig
       6  WDG_SetReload
      12  WDG_SetWriteAccess

 
 130 bytes in section .text
 
 130 bytes of CODE memory

Errors: none
Warnings: none
