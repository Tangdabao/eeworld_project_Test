###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       29/Jan/2018  14:45:19
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\SimpleBlueNRG1_HCI\hci\controller\bluenrg1_hal_aci.c
#    Command line =  
#        "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\SimpleBlueNRG1_HCI\hci\controller\bluenrg1_hal_aci.c"
#        -D STM32L151xB -D STM32L1XX_XL -D USE_STM32L1XX_STEVAL_IDB00xV1 -D
#        USE_HAL_DRIVER -D HCLK_32MHZ=1 -D SYSCLK_MSI=1 -D ENABLE_USART -D
#        USER_DEFINED_PLATFORM=USER_EVAL_PLATFORM -D IRQ_RESET_PIN -D DTM_UART
#        -lC "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\List"
#        -o "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\Software\IAR_BlueNRG\arm\INC\c\DLib_Config_Normal.h -I
#        "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\HAL\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\BSP\STM32L1xx_BlueNRG1\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\BSP\STM32L1xx_Nucleo\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\CMSIS\Device\ST\STM32L1xx\Include\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\STM32L1xx_HAL_Driver\Inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\STM32L1xx_HAL_BlueNRG1_Drivers\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\SimpleBlueNRG1_HCI\includes\"
#        -On --use_c++_inline -I D:\Software\IAR_BlueNRG\arm\CMSIS\Include\
#    Locale       =  Chinese (Simplified)_China.936
#    List file    =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\List\bluenrg1_hal_aci.lst
#    Object file  =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\Obj\bluenrg1_hal_aci.o
#
###############################################################################

C:\Users\Administrator\Desktop\Temporary Files\eeworld_project\Project_Test\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\SimpleBlueNRG1_HCI\hci\controller\bluenrg1_hal_aci.c
      1          
      2          
      3          /**
      4            ******************************************************************************
      5            * @file    bluenrg1_hal_aci.c
      6            * @author  AMG - RF Application team
      7            * @version V1.0.0
      8            * @date    22 June 2017
      9            * @brief   Source file for external uC - BlueNRG-x in network coprocessor mode (hal_aci)
     10            *          Autogenerated files, do not edit!!
     11            ******************************************************************************
     12            * @attention
     13            *
     14            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     15            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     16            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     17            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     18            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     19            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     20            *
     21            * <h2><center>&copy; COPYRIGHT STMicroelectronics</center></h2>
     22            ******************************************************************************
     23            */
     24          #include "bluenrg1_hal_aci.h"
     25          #include "osal.h"

   \                                 In section .text, align 2, keep-with-next
     26          tBleStatus aci_hal_get_fw_build_number(uint16_t *Build_Number)
     27          {
   \                     aci_hal_get_fw_build_number: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x0004             MOVS     R4,R0
     28            struct hci_request rq;
     29            aci_hal_get_fw_build_number_rp0 resp;
     30            Osal_MemSet(&resp, 0, sizeof(resp));
   \   00000006   0x2203             MOVS     R2,#+3
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x.... 0x....      BL       Osal_MemSet
     31            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000010   0x2218             MOVS     R2,#+24
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0xA801             ADD      R0,SP,#+4
   \   00000016   0x.... 0x....      BL       Osal_MemSet
     32            rq.ogf = 0x3f;
   \   0000001A   0x203F             MOVS     R0,#+63
   \   0000001C   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     33            rq.ocf = 0x000;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     34            rq.rparam = &resp;
   \   00000026   0x4668             MOV      R0,SP
   \   00000028   0x9005             STR      R0,[SP, #+20]
     35            rq.rlen = sizeof(resp);
   \   0000002A   0x2003             MOVS     R0,#+3
   \   0000002C   0x9006             STR      R0,[SP, #+24]
     36            if (hci_send_req(&rq, FALSE) < 0)
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0xA801             ADD      R0,SP,#+4
   \   00000032   0x.... 0x....      BL       hci_send_req
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD501             BPL.N    ??aci_hal_get_fw_build_number_0
     37              return BLE_STATUS_TIMEOUT;
   \   0000003A   0x20FF             MOVS     R0,#+255
   \   0000003C   0xE00A             B.N      ??aci_hal_get_fw_build_number_1
     38            if (resp.Status) {
   \                     ??aci_hal_get_fw_build_number_0: (+1)
   \   0000003E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD002             BEQ.N    ??aci_hal_get_fw_build_number_2
     39              return resp.Status;
   \   00000046   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004A   0xE003             B.N      ??aci_hal_get_fw_build_number_1
     40            }
     41            *Build_Number = btoh(resp.Build_Number, 2);
   \                     ??aci_hal_get_fw_build_number_2: (+1)
   \   0000004C   0xF8BD 0x0001      LDRH     R0,[SP, #+1]
   \   00000050   0x8020             STRH     R0,[R4, #+0]
     42            return BLE_STATUS_SUCCESS;
   \   00000052   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_get_fw_build_number_1: (+1)
   \   00000054   0xB008             ADD      SP,SP,#+32
   \   00000056   0xBD10             POP      {R4,PC}          ;; return
     43          }

   \                                 In section .text, align 2, keep-with-next
     44          tBleStatus aci_hal_get_firmware_details(uint8_t *DTM_version_major,
     45                                                  uint8_t *DTM_version_minor,
     46                                                  uint8_t *DTM_version_patch,
     47                                                  uint8_t *DTM_variant,
     48                                                  uint16_t *DTM_Build_Number,
     49                                                  uint8_t *BTLE_Stack_version_major,
     50                                                  uint8_t *BTLE_Stack_version_minor,
     51                                                  uint8_t *BTLE_Stack_version_patch,
     52                                                  uint8_t *BTLE_Stack_development,
     53                                                  uint16_t *BTLE_Stack_variant,
     54                                                  uint16_t *BTLE_Stack_Build_Number)
     55          {
   \                     aci_hal_get_firmware_details: (+1)
   \   00000000   0xE92D 0x4FF7      PUSH     {R0-R2,R4-R11,LR}
   \   00000004   0xB08A             SUB      SP,SP,#+40
   \   00000006   0x001C             MOVS     R4,R3
   \   00000008   0x9D16             LDR      R5,[SP, #+88]
   \   0000000A   0x9E17             LDR      R6,[SP, #+92]
   \   0000000C   0x9F18             LDR      R7,[SP, #+96]
   \   0000000E   0xF8DD 0x8064      LDR      R8,[SP, #+100]
   \   00000012   0xF8DD 0x9068      LDR      R9,[SP, #+104]
   \   00000016   0xF8DD 0xA06C      LDR      R10,[SP, #+108]
   \   0000001A   0xF8DD 0xB070      LDR      R11,[SP, #+112]
     56            struct hci_request rq;
     57            aci_hal_get_firmware_details_rp0 resp;
     58            Osal_MemSet(&resp, 0, sizeof(resp));
   \   0000001E   0x220F             MOVS     R2,#+15
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x.... 0x....      BL       Osal_MemSet
     59            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000028   0x2218             MOVS     R2,#+24
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0xA804             ADD      R0,SP,#+16
   \   0000002E   0x.... 0x....      BL       Osal_MemSet
     60            rq.ogf = 0x3f;
   \   00000032   0x203F             MOVS     R0,#+63
   \   00000034   0xF8AD 0x0010      STRH     R0,[SP, #+16]
     61            rq.ocf = 0x001;
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0xF8AD 0x0012      STRH     R0,[SP, #+18]
     62            rq.rparam = &resp;
   \   0000003E   0x4668             MOV      R0,SP
   \   00000040   0x9008             STR      R0,[SP, #+32]
     63            rq.rlen = sizeof(resp);
   \   00000042   0x200F             MOVS     R0,#+15
   \   00000044   0x9009             STR      R0,[SP, #+36]
     64            if (hci_send_req(&rq, FALSE) < 0)
   \   00000046   0x2100             MOVS     R1,#+0
   \   00000048   0xA804             ADD      R0,SP,#+16
   \   0000004A   0x.... 0x....      BL       hci_send_req
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD501             BPL.N    ??aci_hal_get_firmware_details_0
     65              return BLE_STATUS_TIMEOUT;
   \   00000052   0x20FF             MOVS     R0,#+255
   \   00000054   0xE02F             B.N      ??aci_hal_get_firmware_details_1
     66            if (resp.Status) {
   \                     ??aci_hal_get_firmware_details_0: (+1)
   \   00000056   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD002             BEQ.N    ??aci_hal_get_firmware_details_2
     67              return resp.Status;
   \   0000005E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000062   0xE028             B.N      ??aci_hal_get_firmware_details_1
     68            }
     69            *DTM_version_major = btoh(resp.DTM_version_major, 1);
   \                     ??aci_hal_get_firmware_details_2: (+1)
   \   00000064   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000068   0x990A             LDR      R1,[SP, #+40]
   \   0000006A   0x7008             STRB     R0,[R1, #+0]
     70            *DTM_version_minor = btoh(resp.DTM_version_minor, 1);
   \   0000006C   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000070   0x990B             LDR      R1,[SP, #+44]
   \   00000072   0x7008             STRB     R0,[R1, #+0]
     71            *DTM_version_patch = btoh(resp.DTM_version_patch, 1);
   \   00000074   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000078   0x990C             LDR      R1,[SP, #+48]
   \   0000007A   0x7008             STRB     R0,[R1, #+0]
     72            *DTM_variant = btoh(resp.DTM_variant, 1);
   \   0000007C   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000080   0x7020             STRB     R0,[R4, #+0]
     73            *DTM_Build_Number = btoh(resp.DTM_Build_Number, 2);
   \   00000082   0xF8BD 0x0005      LDRH     R0,[SP, #+5]
   \   00000086   0x8028             STRH     R0,[R5, #+0]
     74            *BTLE_Stack_version_major = btoh(resp.BTLE_Stack_version_major, 1);
   \   00000088   0xF89D 0x0007      LDRB     R0,[SP, #+7]
   \   0000008C   0x7030             STRB     R0,[R6, #+0]
     75            *BTLE_Stack_version_minor = btoh(resp.BTLE_Stack_version_minor, 1);
   \   0000008E   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000092   0x7038             STRB     R0,[R7, #+0]
     76            *BTLE_Stack_version_patch = btoh(resp.BTLE_Stack_version_patch, 1);
   \   00000094   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   00000098   0xF888 0x0000      STRB     R0,[R8, #+0]
     77            *BTLE_Stack_development = btoh(resp.BTLE_Stack_development, 1);
   \   0000009C   0xF89D 0x000A      LDRB     R0,[SP, #+10]
   \   000000A0   0xF889 0x0000      STRB     R0,[R9, #+0]
     78            *BTLE_Stack_variant = btoh(resp.BTLE_Stack_variant, 2);
   \   000000A4   0xF8BD 0x000B      LDRH     R0,[SP, #+11]
   \   000000A8   0xF8AA 0x0000      STRH     R0,[R10, #+0]
     79            *BTLE_Stack_Build_Number = btoh(resp.BTLE_Stack_Build_Number, 2);
   \   000000AC   0xF8BD 0x000D      LDRH     R0,[SP, #+13]
   \   000000B0   0xF8AB 0x0000      STRH     R0,[R11, #+0]
     80            return BLE_STATUS_SUCCESS;
   \   000000B4   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_get_firmware_details_1: (+1)
   \   000000B6   0xB00D             ADD      SP,SP,#+52
   \   000000B8   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
     81          }

   \                                 In section .text, align 2, keep-with-next
     82          tBleStatus aci_hal_write_config_data(uint8_t Offset,
     83                                               uint8_t Length,
     84                                               uint8_t Value[])
     85          {
   \                     aci_hal_write_config_data: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB0C8             SUB      SP,SP,#+288
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
     86            struct hci_request rq;
     87            uint8_t cmd_buffer[258];
     88            aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
   \   0000000C   0xAF07             ADD      R7,SP,#+28
     89            tBleStatus status = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF88D 0x0000      STRB     R0,[SP, #+0]
     90            uint8_t index_input = 0;
   \   00000014   0xF05F 0x0800      MOVS     R8,#+0
     91            cp0->Offset = htob(Offset, 1);
   \   00000018   0x703C             STRB     R4,[R7, #+0]
     92            index_input += 1;
   \   0000001A   0xF118 0x0801      ADDS     R8,R8,#+1
     93            cp0->Length = htob(Length, 1);
   \   0000001E   0x707D             STRB     R5,[R7, #+1]
     94            index_input += 1;
   \   00000020   0xF118 0x0801      ADDS     R8,R8,#+1
     95            Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Length);
   \   00000024   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000026   0x002A             MOVS     R2,R5
   \   00000028   0x0031             MOVS     R1,R6
   \   0000002A   0x1CB8             ADDS     R0,R7,#+2
   \   0000002C   0x.... 0x....      BL       Osal_MemCpy
     96            index_input += Length;
   \   00000030   0xEB15 0x0808      ADDS     R8,R5,R8
     97            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000034   0x2218             MOVS     R2,#+24
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0xA801             ADD      R0,SP,#+4
   \   0000003A   0x.... 0x....      BL       Osal_MemSet
     98            rq.ogf = 0x3f;
   \   0000003E   0x203F             MOVS     R0,#+63
   \   00000040   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     99            rq.ocf = 0x00c;
   \   00000044   0x200C             MOVS     R0,#+12
   \   00000046   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    100            rq.cparam = cmd_buffer;
   \   0000004A   0xA807             ADD      R0,SP,#+28
   \   0000004C   0x9003             STR      R0,[SP, #+12]
    101            rq.clen = index_input;
   \   0000004E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000052   0xF8CD 0x8010      STR      R8,[SP, #+16]
    102            rq.rparam = &status;
   \   00000056   0x4668             MOV      R0,SP
   \   00000058   0x9005             STR      R0,[SP, #+20]
    103            rq.rlen = 1;
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x9006             STR      R0,[SP, #+24]
    104            if (hci_send_req(&rq, FALSE) < 0)
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0xA801             ADD      R0,SP,#+4
   \   00000062   0x.... 0x....      BL       hci_send_req
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD501             BPL.N    ??aci_hal_write_config_data_0
    105              return BLE_STATUS_TIMEOUT;
   \   0000006A   0x20FF             MOVS     R0,#+255
   \   0000006C   0xE007             B.N      ??aci_hal_write_config_data_1
    106            if (status) {
   \                     ??aci_hal_write_config_data_0: (+1)
   \   0000006E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD002             BEQ.N    ??aci_hal_write_config_data_2
    107              return status;
   \   00000076   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000007A   0xE000             B.N      ??aci_hal_write_config_data_1
    108            }
    109            return BLE_STATUS_SUCCESS;
   \                     ??aci_hal_write_config_data_2: (+1)
   \   0000007C   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_write_config_data_1: (+1)
   \   0000007E   0xB048             ADD      SP,SP,#+288
   \   00000080   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    110          }

   \                                 In section .text, align 2, keep-with-next
    111          tBleStatus aci_hal_read_config_data(uint8_t Offset,
    112                                              uint8_t *Data_Length,
    113                                              uint8_t Data[])
    114          {
   \                     aci_hal_read_config_data: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB0E8             SUB      SP,SP,#+416
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
    115            struct hci_request rq;
    116            uint8_t cmd_buffer[258];
    117            aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
   \   0000000C   0xAF26             ADD      R7,SP,#+152
    118            aci_hal_read_config_data_rp0 resp;
    119            Osal_MemSet(&resp, 0, sizeof(resp));
   \   0000000E   0x2280             MOVS     R2,#+128
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0xA806             ADD      R0,SP,#+24
   \   00000014   0x.... 0x....      BL       Osal_MemSet
    120            uint8_t index_input = 0;
   \   00000018   0xF05F 0x0800      MOVS     R8,#+0
    121            cp0->Offset = htob(Offset, 1);
   \   0000001C   0x703C             STRB     R4,[R7, #+0]
    122            index_input += 1;
   \   0000001E   0xF118 0x0801      ADDS     R8,R8,#+1
    123            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000022   0x2218             MOVS     R2,#+24
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x4668             MOV      R0,SP
   \   00000028   0x.... 0x....      BL       Osal_MemSet
    124            rq.ogf = 0x3f;
   \   0000002C   0x203F             MOVS     R0,#+63
   \   0000002E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    125            rq.ocf = 0x00d;
   \   00000032   0x200D             MOVS     R0,#+13
   \   00000034   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    126            rq.cparam = cmd_buffer;
   \   00000038   0xA826             ADD      R0,SP,#+152
   \   0000003A   0x9002             STR      R0,[SP, #+8]
    127            rq.clen = index_input;
   \   0000003C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000040   0xF8CD 0x800C      STR      R8,[SP, #+12]
    128            rq.rparam = &resp;
   \   00000044   0xA806             ADD      R0,SP,#+24
   \   00000046   0x9004             STR      R0,[SP, #+16]
    129            rq.rlen = sizeof(resp);
   \   00000048   0x2080             MOVS     R0,#+128
   \   0000004A   0x9005             STR      R0,[SP, #+20]
    130            if (hci_send_req(&rq, FALSE) < 0)
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x4668             MOV      R0,SP
   \   00000050   0x.... 0x....      BL       hci_send_req
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD501             BPL.N    ??aci_hal_read_config_data_0
    131              return BLE_STATUS_TIMEOUT;
   \   00000058   0x20FF             MOVS     R0,#+255
   \   0000005A   0xE010             B.N      ??aci_hal_read_config_data_1
    132            if (resp.Status) {
   \                     ??aci_hal_read_config_data_0: (+1)
   \   0000005C   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD002             BEQ.N    ??aci_hal_read_config_data_2
    133              return resp.Status;
   \   00000064   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   00000068   0xE009             B.N      ??aci_hal_read_config_data_1
    134            }
    135            *Data_Length = btoh(resp.Data_Length, 1);
   \                     ??aci_hal_read_config_data_2: (+1)
   \   0000006A   0xF89D 0x0019      LDRB     R0,[SP, #+25]
   \   0000006E   0x7028             STRB     R0,[R5, #+0]
    136            Osal_MemCpy((void *) Data, (const void *) resp.Data, *Data_Length);
   \   00000070   0x782A             LDRB     R2,[R5, #+0]
   \   00000072   0xF10D 0x011A      ADD      R1,SP,#+26
   \   00000076   0x0030             MOVS     R0,R6
   \   00000078   0x.... 0x....      BL       Osal_MemCpy
    137            return BLE_STATUS_SUCCESS;
   \   0000007C   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_read_config_data_1: (+1)
   \   0000007E   0xB068             ADD      SP,SP,#+416
   \   00000080   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    138          }

   \                                 In section .text, align 2, keep-with-next
    139          tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
    140                                                uint8_t PA_Level)
    141          {
   \                     aci_hal_set_tx_power_level: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB0C9             SUB      SP,SP,#+292
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    142            struct hci_request rq;
    143            uint8_t cmd_buffer[258];
    144            aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
   \   00000008   0xAE07             ADD      R6,SP,#+28
    145            tBleStatus status = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    146            uint8_t index_input = 0;
   \   00000010   0x2700             MOVS     R7,#+0
    147            cp0->En_High_Power = htob(En_High_Power, 1);
   \   00000012   0x7034             STRB     R4,[R6, #+0]
    148            index_input += 1;
   \   00000014   0x1C7F             ADDS     R7,R7,#+1
    149            cp0->PA_Level = htob(PA_Level, 1);
   \   00000016   0x7075             STRB     R5,[R6, #+1]
    150            index_input += 1;
   \   00000018   0x1C7F             ADDS     R7,R7,#+1
    151            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000001A   0x2218             MOVS     R2,#+24
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0xA801             ADD      R0,SP,#+4
   \   00000020   0x.... 0x....      BL       Osal_MemSet
    152            rq.ogf = 0x3f;
   \   00000024   0x203F             MOVS     R0,#+63
   \   00000026   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    153            rq.ocf = 0x00f;
   \   0000002A   0x200F             MOVS     R0,#+15
   \   0000002C   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    154            rq.cparam = cmd_buffer;
   \   00000030   0xA807             ADD      R0,SP,#+28
   \   00000032   0x9003             STR      R0,[SP, #+12]
    155            rq.clen = index_input;
   \   00000034   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000036   0x9704             STR      R7,[SP, #+16]
    156            rq.rparam = &status;
   \   00000038   0x4668             MOV      R0,SP
   \   0000003A   0x9005             STR      R0,[SP, #+20]
    157            rq.rlen = 1;
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x9006             STR      R0,[SP, #+24]
    158            if (hci_send_req(&rq, FALSE) < 0)
   \   00000040   0x2100             MOVS     R1,#+0
   \   00000042   0xA801             ADD      R0,SP,#+4
   \   00000044   0x.... 0x....      BL       hci_send_req
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD501             BPL.N    ??aci_hal_set_tx_power_level_0
    159              return BLE_STATUS_TIMEOUT;
   \   0000004C   0x20FF             MOVS     R0,#+255
   \   0000004E   0xE007             B.N      ??aci_hal_set_tx_power_level_1
    160            if (status) {
   \                     ??aci_hal_set_tx_power_level_0: (+1)
   \   00000050   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD002             BEQ.N    ??aci_hal_set_tx_power_level_2
    161              return status;
   \   00000058   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000005C   0xE000             B.N      ??aci_hal_set_tx_power_level_1
    162            }
    163            return BLE_STATUS_SUCCESS;
   \                     ??aci_hal_set_tx_power_level_2: (+1)
   \   0000005E   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_set_tx_power_level_1: (+1)
   \   00000060   0xB049             ADD      SP,SP,#+292
   \   00000062   0xBDF0             POP      {R4-R7,PC}       ;; return
    164          }

   \                                 In section .text, align 2, keep-with-next
    165          tBleStatus aci_hal_le_tx_test_packet_number(uint32_t *Number_Of_Packets)
    166          {
   \                     aci_hal_le_tx_test_packet_number: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x0004             MOVS     R4,R0
    167            struct hci_request rq;
    168            aci_hal_le_tx_test_packet_number_rp0 resp;
    169            Osal_MemSet(&resp, 0, sizeof(resp));
   \   00000006   0x2205             MOVS     R2,#+5
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x.... 0x....      BL       Osal_MemSet
    170            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000010   0x2218             MOVS     R2,#+24
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0xA802             ADD      R0,SP,#+8
   \   00000016   0x.... 0x....      BL       Osal_MemSet
    171            rq.ogf = 0x3f;
   \   0000001A   0x203F             MOVS     R0,#+63
   \   0000001C   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    172            rq.ocf = 0x014;
   \   00000020   0x2014             MOVS     R0,#+20
   \   00000022   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    173            rq.rparam = &resp;
   \   00000026   0x4668             MOV      R0,SP
   \   00000028   0x9006             STR      R0,[SP, #+24]
    174            rq.rlen = sizeof(resp);
   \   0000002A   0x2005             MOVS     R0,#+5
   \   0000002C   0x9007             STR      R0,[SP, #+28]
    175            if (hci_send_req(&rq, FALSE) < 0)
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0xA802             ADD      R0,SP,#+8
   \   00000032   0x.... 0x....      BL       hci_send_req
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD501             BPL.N    ??aci_hal_le_tx_test_packet_number_0
    176              return BLE_STATUS_TIMEOUT;
   \   0000003A   0x20FF             MOVS     R0,#+255
   \   0000003C   0xE00A             B.N      ??aci_hal_le_tx_test_packet_number_1
    177            if (resp.Status) {
   \                     ??aci_hal_le_tx_test_packet_number_0: (+1)
   \   0000003E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD002             BEQ.N    ??aci_hal_le_tx_test_packet_number_2
    178              return resp.Status;
   \   00000046   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004A   0xE003             B.N      ??aci_hal_le_tx_test_packet_number_1
    179            }
    180            *Number_Of_Packets = btoh(resp.Number_Of_Packets, 4);
   \                     ??aci_hal_le_tx_test_packet_number_2: (+1)
   \   0000004C   0xF8DD 0x0001      LDR      R0,[SP, #+1]
   \   00000050   0x6020             STR      R0,[R4, #+0]
    181            return BLE_STATUS_SUCCESS;
   \   00000052   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_le_tx_test_packet_number_1: (+1)
   \   00000054   0xB008             ADD      SP,SP,#+32
   \   00000056   0xBD10             POP      {R4,PC}          ;; return
    182          }

   \                                 In section .text, align 2, keep-with-next
    183          tBleStatus aci_hal_tone_start(uint8_t RF_Channel)
    184          {
   \                     aci_hal_tone_start: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0C8             SUB      SP,SP,#+288
   \   00000004   0x0004             MOVS     R4,R0
    185            struct hci_request rq;
    186            uint8_t cmd_buffer[258];
    187            aci_hal_tone_start_cp0 *cp0 = (aci_hal_tone_start_cp0*)(cmd_buffer);
   \   00000006   0xAD07             ADD      R5,SP,#+28
    188            tBleStatus status = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    189            uint8_t index_input = 0;
   \   0000000E   0x2600             MOVS     R6,#+0
    190            cp0->RF_Channel = htob(RF_Channel, 1);
   \   00000010   0x702C             STRB     R4,[R5, #+0]
    191            index_input += 1;
   \   00000012   0x1C76             ADDS     R6,R6,#+1
    192            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000014   0x2218             MOVS     R2,#+24
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0xA801             ADD      R0,SP,#+4
   \   0000001A   0x.... 0x....      BL       Osal_MemSet
    193            rq.ogf = 0x3f;
   \   0000001E   0x203F             MOVS     R0,#+63
   \   00000020   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    194            rq.ocf = 0x015;
   \   00000024   0x2015             MOVS     R0,#+21
   \   00000026   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    195            rq.cparam = cmd_buffer;
   \   0000002A   0xA807             ADD      R0,SP,#+28
   \   0000002C   0x9003             STR      R0,[SP, #+12]
    196            rq.clen = index_input;
   \   0000002E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000030   0x9604             STR      R6,[SP, #+16]
    197            rq.rparam = &status;
   \   00000032   0x4668             MOV      R0,SP
   \   00000034   0x9005             STR      R0,[SP, #+20]
    198            rq.rlen = 1;
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x9006             STR      R0,[SP, #+24]
    199            if (hci_send_req(&rq, FALSE) < 0)
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0xA801             ADD      R0,SP,#+4
   \   0000003E   0x.... 0x....      BL       hci_send_req
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD501             BPL.N    ??aci_hal_tone_start_0
    200              return BLE_STATUS_TIMEOUT;
   \   00000046   0x20FF             MOVS     R0,#+255
   \   00000048   0xE007             B.N      ??aci_hal_tone_start_1
    201            if (status) {
   \                     ??aci_hal_tone_start_0: (+1)
   \   0000004A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD002             BEQ.N    ??aci_hal_tone_start_2
    202              return status;
   \   00000052   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000056   0xE000             B.N      ??aci_hal_tone_start_1
    203            }
    204            return BLE_STATUS_SUCCESS;
   \                     ??aci_hal_tone_start_2: (+1)
   \   00000058   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_tone_start_1: (+1)
   \   0000005A   0xB048             ADD      SP,SP,#+288
   \   0000005C   0xBD70             POP      {R4-R6,PC}       ;; return
    205          }

   \                                 In section .text, align 2, keep-with-next
    206          tBleStatus aci_hal_tone_stop(void)
    207          {
   \                     aci_hal_tone_stop: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    208            struct hci_request rq;
    209            tBleStatus status = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
    210            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000000A   0x2218             MOVS     R2,#+24
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0xA801             ADD      R0,SP,#+4
   \   00000010   0x.... 0x....      BL       Osal_MemSet
    211            rq.ogf = 0x3f;
   \   00000014   0x203F             MOVS     R0,#+63
   \   00000016   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    212            rq.ocf = 0x016;
   \   0000001A   0x2016             MOVS     R0,#+22
   \   0000001C   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    213            rq.rparam = &status;
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x9005             STR      R0,[SP, #+20]
    214            rq.rlen = 1;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x9006             STR      R0,[SP, #+24]
    215            if (hci_send_req(&rq, FALSE) < 0)
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xA801             ADD      R0,SP,#+4
   \   0000002C   0x.... 0x....      BL       hci_send_req
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD501             BPL.N    ??aci_hal_tone_stop_0
    216              return BLE_STATUS_TIMEOUT;
   \   00000034   0x20FF             MOVS     R0,#+255
   \   00000036   0xE007             B.N      ??aci_hal_tone_stop_1
    217            if (status) {
   \                     ??aci_hal_tone_stop_0: (+1)
   \   00000038   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD002             BEQ.N    ??aci_hal_tone_stop_2
    218              return status;
   \   00000040   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000044   0xE000             B.N      ??aci_hal_tone_stop_1
    219            }
    220            return BLE_STATUS_SUCCESS;
   \                     ??aci_hal_tone_stop_2: (+1)
   \   00000046   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_tone_stop_1: (+1)
   \   00000048   0xB007             ADD      SP,SP,#+28
   \   0000004A   0xBD00             POP      {PC}             ;; return
    221          }

   \                                 In section .text, align 2, keep-with-next
    222          tBleStatus aci_hal_get_link_status(uint8_t Link_Status[8],
    223                                             uint16_t Link_Connection_Handle[16 / 2])
    224          {
   \                     aci_hal_get_link_status: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    225            struct hci_request rq;
    226            aci_hal_get_link_status_rp0 resp;
    227            Osal_MemSet(&resp, 0, sizeof(resp));
   \   00000008   0x2219             MOVS     R2,#+25
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x4668             MOV      R0,SP
   \   0000000E   0x.... 0x....      BL       Osal_MemSet
    228            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000012   0x2218             MOVS     R2,#+24
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0xA807             ADD      R0,SP,#+28
   \   00000018   0x.... 0x....      BL       Osal_MemSet
    229            rq.ogf = 0x3f;
   \   0000001C   0x203F             MOVS     R0,#+63
   \   0000001E   0xF8AD 0x001C      STRH     R0,[SP, #+28]
    230            rq.ocf = 0x017;
   \   00000022   0x2017             MOVS     R0,#+23
   \   00000024   0xF8AD 0x001E      STRH     R0,[SP, #+30]
    231            rq.rparam = &resp;
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x900B             STR      R0,[SP, #+44]
    232            rq.rlen = sizeof(resp);
   \   0000002C   0x2019             MOVS     R0,#+25
   \   0000002E   0x900C             STR      R0,[SP, #+48]
    233            if (hci_send_req(&rq, FALSE) < 0)
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0xA807             ADD      R0,SP,#+28
   \   00000034   0x.... 0x....      BL       hci_send_req
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD501             BPL.N    ??aci_hal_get_link_status_0
    234              return BLE_STATUS_TIMEOUT;
   \   0000003C   0x20FF             MOVS     R0,#+255
   \   0000003E   0xE013             B.N      ??aci_hal_get_link_status_1
    235            if (resp.Status) {
   \                     ??aci_hal_get_link_status_0: (+1)
   \   00000040   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD002             BEQ.N    ??aci_hal_get_link_status_2
    236              return resp.Status;
   \   00000048   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004C   0xE00C             B.N      ??aci_hal_get_link_status_1
    237            }
    238            Osal_MemCpy((void *) Link_Status, (const void *) resp.Link_Status, 8);
   \                     ??aci_hal_get_link_status_2: (+1)
   \   0000004E   0x2208             MOVS     R2,#+8
   \   00000050   0xF10D 0x0101      ADD      R1,SP,#+1
   \   00000054   0x0020             MOVS     R0,R4
   \   00000056   0x.... 0x....      BL       Osal_MemCpy
    239            Osal_MemCpy((void *) Link_Connection_Handle, (const void *) resp.Link_Connection_Handle, 16);
   \   0000005A   0x2210             MOVS     R2,#+16
   \   0000005C   0xF10D 0x0109      ADD      R1,SP,#+9
   \   00000060   0x0028             MOVS     R0,R5
   \   00000062   0x.... 0x....      BL       Osal_MemCpy
    240            return BLE_STATUS_SUCCESS;
   \   00000066   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_get_link_status_1: (+1)
   \   00000068   0xB00D             ADD      SP,SP,#+52
   \   0000006A   0xBD30             POP      {R4,R5,PC}       ;; return
    241          }

   \                                 In section .text, align 2, keep-with-next
    242          tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask)
    243          {
   \                     aci_hal_set_radio_activity_mask: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0C8             SUB      SP,SP,#+288
   \   00000004   0x0004             MOVS     R4,R0
    244            struct hci_request rq;
    245            uint8_t cmd_buffer[258];
    246            aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
   \   00000006   0xAD07             ADD      R5,SP,#+28
    247            tBleStatus status = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    248            uint8_t index_input = 0;
   \   0000000E   0x2600             MOVS     R6,#+0
    249            cp0->Radio_Activity_Mask = htob(Radio_Activity_Mask, 2);
   \   00000010   0x802C             STRH     R4,[R5, #+0]
    250            index_input += 2;
   \   00000012   0x1CB6             ADDS     R6,R6,#+2
    251            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000014   0x2218             MOVS     R2,#+24
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0xA801             ADD      R0,SP,#+4
   \   0000001A   0x.... 0x....      BL       Osal_MemSet
    252            rq.ogf = 0x3f;
   \   0000001E   0x203F             MOVS     R0,#+63
   \   00000020   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    253            rq.ocf = 0x018;
   \   00000024   0x2018             MOVS     R0,#+24
   \   00000026   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    254            rq.cparam = cmd_buffer;
   \   0000002A   0xA807             ADD      R0,SP,#+28
   \   0000002C   0x9003             STR      R0,[SP, #+12]
    255            rq.clen = index_input;
   \   0000002E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000030   0x9604             STR      R6,[SP, #+16]
    256            rq.rparam = &status;
   \   00000032   0x4668             MOV      R0,SP
   \   00000034   0x9005             STR      R0,[SP, #+20]
    257            rq.rlen = 1;
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x9006             STR      R0,[SP, #+24]
    258            if (hci_send_req(&rq, FALSE) < 0)
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0xA801             ADD      R0,SP,#+4
   \   0000003E   0x.... 0x....      BL       hci_send_req
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD501             BPL.N    ??aci_hal_set_radio_activity_mask_0
    259              return BLE_STATUS_TIMEOUT;
   \   00000046   0x20FF             MOVS     R0,#+255
   \   00000048   0xE007             B.N      ??aci_hal_set_radio_activity_mask_1
    260            if (status) {
   \                     ??aci_hal_set_radio_activity_mask_0: (+1)
   \   0000004A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD002             BEQ.N    ??aci_hal_set_radio_activity_mask_2
    261              return status;
   \   00000052   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000056   0xE000             B.N      ??aci_hal_set_radio_activity_mask_1
    262            }
    263            return BLE_STATUS_SUCCESS;
   \                     ??aci_hal_set_radio_activity_mask_2: (+1)
   \   00000058   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_set_radio_activity_mask_1: (+1)
   \   0000005A   0xB048             ADD      SP,SP,#+288
   \   0000005C   0xBD70             POP      {R4-R6,PC}       ;; return
    264          }

   \                                 In section .text, align 2, keep-with-next
    265          tBleStatus aci_hal_get_anchor_period(uint32_t *Anchor_Period,
    266                                               uint32_t *Max_Free_Slot)
    267          {
   \                     aci_hal_get_anchor_period: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    268            struct hci_request rq;
    269            aci_hal_get_anchor_period_rp0 resp;
    270            Osal_MemSet(&resp, 0, sizeof(resp));
   \   00000008   0x2209             MOVS     R2,#+9
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x4668             MOV      R0,SP
   \   0000000E   0x.... 0x....      BL       Osal_MemSet
    271            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000012   0x2218             MOVS     R2,#+24
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0xA803             ADD      R0,SP,#+12
   \   00000018   0x.... 0x....      BL       Osal_MemSet
    272            rq.ogf = 0x3f;
   \   0000001C   0x203F             MOVS     R0,#+63
   \   0000001E   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    273            rq.ocf = 0x019;
   \   00000022   0x2019             MOVS     R0,#+25
   \   00000024   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    274            rq.rparam = &resp;
   \   00000028   0x4668             MOV      R0,SP
   \   0000002A   0x9007             STR      R0,[SP, #+28]
    275            rq.rlen = sizeof(resp);
   \   0000002C   0x2009             MOVS     R0,#+9
   \   0000002E   0x9008             STR      R0,[SP, #+32]
    276            if (hci_send_req(&rq, FALSE) < 0)
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0xA803             ADD      R0,SP,#+12
   \   00000034   0x.... 0x....      BL       hci_send_req
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD501             BPL.N    ??aci_hal_get_anchor_period_0
    277              return BLE_STATUS_TIMEOUT;
   \   0000003C   0x20FF             MOVS     R0,#+255
   \   0000003E   0xE00D             B.N      ??aci_hal_get_anchor_period_1
    278            if (resp.Status) {
   \                     ??aci_hal_get_anchor_period_0: (+1)
   \   00000040   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD002             BEQ.N    ??aci_hal_get_anchor_period_2
    279              return resp.Status;
   \   00000048   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004C   0xE006             B.N      ??aci_hal_get_anchor_period_1
    280            }
    281            *Anchor_Period = btoh(resp.Anchor_Period, 4);
   \                     ??aci_hal_get_anchor_period_2: (+1)
   \   0000004E   0xF8DD 0x0001      LDR      R0,[SP, #+1]
   \   00000052   0x6020             STR      R0,[R4, #+0]
    282            *Max_Free_Slot = btoh(resp.Max_Free_Slot, 4);
   \   00000054   0xF8DD 0x0005      LDR      R0,[SP, #+5]
   \   00000058   0x6028             STR      R0,[R5, #+0]
    283            return BLE_STATUS_SUCCESS;
   \   0000005A   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_get_anchor_period_1: (+1)
   \   0000005C   0xB009             ADD      SP,SP,#+36
   \   0000005E   0xBD30             POP      {R4,R5,PC}       ;; return
    284          }

   \                                 In section .text, align 2, keep-with-next
    285          tBleStatus aci_hal_set_event_mask(uint32_t Event_Mask)
    286          {
   \                     aci_hal_set_event_mask: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0C8             SUB      SP,SP,#+288
   \   00000004   0x0004             MOVS     R4,R0
    287            struct hci_request rq;
    288            uint8_t cmd_buffer[258];
    289            aci_hal_set_event_mask_cp0 *cp0 = (aci_hal_set_event_mask_cp0*)(cmd_buffer);
   \   00000006   0xAD07             ADD      R5,SP,#+28
    290            tBleStatus status = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    291            uint8_t index_input = 0;
   \   0000000E   0x2600             MOVS     R6,#+0
    292            cp0->Event_Mask = htob(Event_Mask, 4);
   \   00000010   0x602C             STR      R4,[R5, #+0]
    293            index_input += 4;
   \   00000012   0x1D36             ADDS     R6,R6,#+4
    294            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000014   0x2218             MOVS     R2,#+24
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0xA801             ADD      R0,SP,#+4
   \   0000001A   0x.... 0x....      BL       Osal_MemSet
    295            rq.ogf = 0x3f;
   \   0000001E   0x203F             MOVS     R0,#+63
   \   00000020   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    296            rq.ocf = 0x01a;
   \   00000024   0x201A             MOVS     R0,#+26
   \   00000026   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    297            rq.cparam = cmd_buffer;
   \   0000002A   0xA807             ADD      R0,SP,#+28
   \   0000002C   0x9003             STR      R0,[SP, #+12]
    298            rq.clen = index_input;
   \   0000002E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000030   0x9604             STR      R6,[SP, #+16]
    299            rq.rparam = &status;
   \   00000032   0x4668             MOV      R0,SP
   \   00000034   0x9005             STR      R0,[SP, #+20]
    300            rq.rlen = 1;
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x9006             STR      R0,[SP, #+24]
    301            if (hci_send_req(&rq, FALSE) < 0)
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0xA801             ADD      R0,SP,#+4
   \   0000003E   0x.... 0x....      BL       hci_send_req
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD501             BPL.N    ??aci_hal_set_event_mask_0
    302              return BLE_STATUS_TIMEOUT;
   \   00000046   0x20FF             MOVS     R0,#+255
   \   00000048   0xE007             B.N      ??aci_hal_set_event_mask_1
    303            if (status) {
   \                     ??aci_hal_set_event_mask_0: (+1)
   \   0000004A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD002             BEQ.N    ??aci_hal_set_event_mask_2
    304              return status;
   \   00000052   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000056   0xE000             B.N      ??aci_hal_set_event_mask_1
    305            }
    306            return BLE_STATUS_SUCCESS;
   \                     ??aci_hal_set_event_mask_2: (+1)
   \   00000058   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_set_event_mask_1: (+1)
   \   0000005A   0xB048             ADD      SP,SP,#+288
   \   0000005C   0xBD70             POP      {R4-R6,PC}       ;; return
    307          }

   \                                 In section .text, align 2, keep-with-next
    308          tBleStatus aci_hal_updater_start(void)
    309          {
   \                     aci_hal_updater_start: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    310            struct hci_request rq;
    311            tBleStatus status = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
    312            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000000A   0x2218             MOVS     R2,#+24
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0xA801             ADD      R0,SP,#+4
   \   00000010   0x.... 0x....      BL       Osal_MemSet
    313            rq.ogf = 0x3f;
   \   00000014   0x203F             MOVS     R0,#+63
   \   00000016   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    314            rq.ocf = 0x020;
   \   0000001A   0x2020             MOVS     R0,#+32
   \   0000001C   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    315            rq.rparam = &status;
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x9005             STR      R0,[SP, #+20]
    316            rq.rlen = 1;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x9006             STR      R0,[SP, #+24]
    317            if (hci_send_req(&rq, FALSE) < 0)
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xA801             ADD      R0,SP,#+4
   \   0000002C   0x.... 0x....      BL       hci_send_req
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD501             BPL.N    ??aci_hal_updater_start_0
    318              return BLE_STATUS_TIMEOUT;
   \   00000034   0x20FF             MOVS     R0,#+255
   \   00000036   0xE007             B.N      ??aci_hal_updater_start_1
    319            if (status) {
   \                     ??aci_hal_updater_start_0: (+1)
   \   00000038   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD002             BEQ.N    ??aci_hal_updater_start_2
    320              return status;
   \   00000040   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000044   0xE000             B.N      ??aci_hal_updater_start_1
    321            }
    322            return BLE_STATUS_SUCCESS;
   \                     ??aci_hal_updater_start_2: (+1)
   \   00000046   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_updater_start_1: (+1)
   \   00000048   0xB007             ADD      SP,SP,#+28
   \   0000004A   0xBD00             POP      {PC}             ;; return
    323          }

   \                                 In section .text, align 2, keep-with-next
    324          tBleStatus aci_hal_updater_reboot(void)
    325          {
   \                     aci_hal_updater_reboot: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    326            struct hci_request rq;
    327            tBleStatus status = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
    328            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000000A   0x2218             MOVS     R2,#+24
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0xA801             ADD      R0,SP,#+4
   \   00000010   0x.... 0x....      BL       Osal_MemSet
    329            rq.ogf = 0x3f;
   \   00000014   0x203F             MOVS     R0,#+63
   \   00000016   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    330            rq.ocf = 0x021;
   \   0000001A   0x2021             MOVS     R0,#+33
   \   0000001C   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    331            rq.rparam = &status;
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x9005             STR      R0,[SP, #+20]
    332            rq.rlen = 1;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x9006             STR      R0,[SP, #+24]
    333            if (hci_send_req(&rq, FALSE) < 0)
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xA801             ADD      R0,SP,#+4
   \   0000002C   0x.... 0x....      BL       hci_send_req
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD501             BPL.N    ??aci_hal_updater_reboot_0
    334              return BLE_STATUS_TIMEOUT;
   \   00000034   0x20FF             MOVS     R0,#+255
   \   00000036   0xE007             B.N      ??aci_hal_updater_reboot_1
    335            if (status) {
   \                     ??aci_hal_updater_reboot_0: (+1)
   \   00000038   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD002             BEQ.N    ??aci_hal_updater_reboot_2
    336              return status;
   \   00000040   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000044   0xE000             B.N      ??aci_hal_updater_reboot_1
    337            }
    338            return BLE_STATUS_SUCCESS;
   \                     ??aci_hal_updater_reboot_2: (+1)
   \   00000046   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_updater_reboot_1: (+1)
   \   00000048   0xB007             ADD      SP,SP,#+28
   \   0000004A   0xBD00             POP      {PC}             ;; return
    339          }

   \                                 In section .text, align 2, keep-with-next
    340          tBleStatus aci_hal_get_updater_version(uint8_t *Version)
    341          {
   \                     aci_hal_get_updater_version: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x0004             MOVS     R4,R0
    342            struct hci_request rq;
    343            aci_hal_get_updater_version_rp0 resp;
    344            Osal_MemSet(&resp, 0, sizeof(resp));
   \   00000006   0x2202             MOVS     R2,#+2
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x.... 0x....      BL       Osal_MemSet
    345            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000010   0x2218             MOVS     R2,#+24
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0xA801             ADD      R0,SP,#+4
   \   00000016   0x.... 0x....      BL       Osal_MemSet
    346            rq.ogf = 0x3f;
   \   0000001A   0x203F             MOVS     R0,#+63
   \   0000001C   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    347            rq.ocf = 0x022;
   \   00000020   0x2022             MOVS     R0,#+34
   \   00000022   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    348            rq.rparam = &resp;
   \   00000026   0x4668             MOV      R0,SP
   \   00000028   0x9005             STR      R0,[SP, #+20]
    349            rq.rlen = sizeof(resp);
   \   0000002A   0x2002             MOVS     R0,#+2
   \   0000002C   0x9006             STR      R0,[SP, #+24]
    350            if (hci_send_req(&rq, FALSE) < 0)
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0xA801             ADD      R0,SP,#+4
   \   00000032   0x.... 0x....      BL       hci_send_req
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD501             BPL.N    ??aci_hal_get_updater_version_0
    351              return BLE_STATUS_TIMEOUT;
   \   0000003A   0x20FF             MOVS     R0,#+255
   \   0000003C   0xE00A             B.N      ??aci_hal_get_updater_version_1
    352            if (resp.Status) {
   \                     ??aci_hal_get_updater_version_0: (+1)
   \   0000003E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD002             BEQ.N    ??aci_hal_get_updater_version_2
    353              return resp.Status;
   \   00000046   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004A   0xE003             B.N      ??aci_hal_get_updater_version_1
    354            }
    355            *Version = btoh(resp.Version, 1);
   \                     ??aci_hal_get_updater_version_2: (+1)
   \   0000004C   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000050   0x7020             STRB     R0,[R4, #+0]
    356            return BLE_STATUS_SUCCESS;
   \   00000052   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_get_updater_version_1: (+1)
   \   00000054   0xB008             ADD      SP,SP,#+32
   \   00000056   0xBD10             POP      {R4,PC}          ;; return
    357          }

   \                                 In section .text, align 2, keep-with-next
    358          tBleStatus aci_hal_get_updater_bufsize(uint8_t *Buffer_Size)
    359          {
   \                     aci_hal_get_updater_bufsize: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x0004             MOVS     R4,R0
    360            struct hci_request rq;
    361            aci_hal_get_updater_bufsize_rp0 resp;
    362            Osal_MemSet(&resp, 0, sizeof(resp));
   \   00000006   0x2202             MOVS     R2,#+2
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x.... 0x....      BL       Osal_MemSet
    363            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000010   0x2218             MOVS     R2,#+24
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0xA801             ADD      R0,SP,#+4
   \   00000016   0x.... 0x....      BL       Osal_MemSet
    364            rq.ogf = 0x3f;
   \   0000001A   0x203F             MOVS     R0,#+63
   \   0000001C   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    365            rq.ocf = 0x023;
   \   00000020   0x2023             MOVS     R0,#+35
   \   00000022   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    366            rq.rparam = &resp;
   \   00000026   0x4668             MOV      R0,SP
   \   00000028   0x9005             STR      R0,[SP, #+20]
    367            rq.rlen = sizeof(resp);
   \   0000002A   0x2002             MOVS     R0,#+2
   \   0000002C   0x9006             STR      R0,[SP, #+24]
    368            if (hci_send_req(&rq, FALSE) < 0)
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0xA801             ADD      R0,SP,#+4
   \   00000032   0x.... 0x....      BL       hci_send_req
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD501             BPL.N    ??aci_hal_get_updater_bufsize_0
    369              return BLE_STATUS_TIMEOUT;
   \   0000003A   0x20FF             MOVS     R0,#+255
   \   0000003C   0xE00A             B.N      ??aci_hal_get_updater_bufsize_1
    370            if (resp.Status) {
   \                     ??aci_hal_get_updater_bufsize_0: (+1)
   \   0000003E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD002             BEQ.N    ??aci_hal_get_updater_bufsize_2
    371              return resp.Status;
   \   00000046   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004A   0xE003             B.N      ??aci_hal_get_updater_bufsize_1
    372            }
    373            *Buffer_Size = btoh(resp.Buffer_Size, 1);
   \                     ??aci_hal_get_updater_bufsize_2: (+1)
   \   0000004C   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000050   0x7020             STRB     R0,[R4, #+0]
    374            return BLE_STATUS_SUCCESS;
   \   00000052   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_get_updater_bufsize_1: (+1)
   \   00000054   0xB008             ADD      SP,SP,#+32
   \   00000056   0xBD10             POP      {R4,PC}          ;; return
    375          }

   \                                 In section .text, align 2, keep-with-next
    376          tBleStatus aci_hal_updater_erase_blue_flag(void)
    377          {
   \                     aci_hal_updater_erase_blue_flag: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    378            struct hci_request rq;
    379            tBleStatus status = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
    380            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000000A   0x2218             MOVS     R2,#+24
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0xA801             ADD      R0,SP,#+4
   \   00000010   0x.... 0x....      BL       Osal_MemSet
    381            rq.ogf = 0x3f;
   \   00000014   0x203F             MOVS     R0,#+63
   \   00000016   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    382            rq.ocf = 0x024;
   \   0000001A   0x2024             MOVS     R0,#+36
   \   0000001C   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    383            rq.rparam = &status;
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x9005             STR      R0,[SP, #+20]
    384            rq.rlen = 1;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x9006             STR      R0,[SP, #+24]
    385            if (hci_send_req(&rq, FALSE) < 0)
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xA801             ADD      R0,SP,#+4
   \   0000002C   0x.... 0x....      BL       hci_send_req
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD501             BPL.N    ??aci_hal_updater_erase_blue_flag_0
    386              return BLE_STATUS_TIMEOUT;
   \   00000034   0x20FF             MOVS     R0,#+255
   \   00000036   0xE007             B.N      ??aci_hal_updater_erase_blue_flag_1
    387            if (status) {
   \                     ??aci_hal_updater_erase_blue_flag_0: (+1)
   \   00000038   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD002             BEQ.N    ??aci_hal_updater_erase_blue_flag_2
    388              return status;
   \   00000040   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000044   0xE000             B.N      ??aci_hal_updater_erase_blue_flag_1
    389            }
    390            return BLE_STATUS_SUCCESS;
   \                     ??aci_hal_updater_erase_blue_flag_2: (+1)
   \   00000046   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_updater_erase_blue_flag_1: (+1)
   \   00000048   0xB007             ADD      SP,SP,#+28
   \   0000004A   0xBD00             POP      {PC}             ;; return
    391          }

   \                                 In section .text, align 2, keep-with-next
    392          tBleStatus aci_hal_updater_reset_blue_flag(void)
    393          {
   \                     aci_hal_updater_reset_blue_flag: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    394            struct hci_request rq;
    395            tBleStatus status = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
    396            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000000A   0x2218             MOVS     R2,#+24
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0xA801             ADD      R0,SP,#+4
   \   00000010   0x.... 0x....      BL       Osal_MemSet
    397            rq.ogf = 0x3f;
   \   00000014   0x203F             MOVS     R0,#+63
   \   00000016   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    398            rq.ocf = 0x025;
   \   0000001A   0x2025             MOVS     R0,#+37
   \   0000001C   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    399            rq.rparam = &status;
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x9005             STR      R0,[SP, #+20]
    400            rq.rlen = 1;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x9006             STR      R0,[SP, #+24]
    401            if (hci_send_req(&rq, FALSE) < 0)
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xA801             ADD      R0,SP,#+4
   \   0000002C   0x.... 0x....      BL       hci_send_req
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD501             BPL.N    ??aci_hal_updater_reset_blue_flag_0
    402              return BLE_STATUS_TIMEOUT;
   \   00000034   0x20FF             MOVS     R0,#+255
   \   00000036   0xE007             B.N      ??aci_hal_updater_reset_blue_flag_1
    403            if (status) {
   \                     ??aci_hal_updater_reset_blue_flag_0: (+1)
   \   00000038   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD002             BEQ.N    ??aci_hal_updater_reset_blue_flag_2
    404              return status;
   \   00000040   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000044   0xE000             B.N      ??aci_hal_updater_reset_blue_flag_1
    405            }
    406            return BLE_STATUS_SUCCESS;
   \                     ??aci_hal_updater_reset_blue_flag_2: (+1)
   \   00000046   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_updater_reset_blue_flag_1: (+1)
   \   00000048   0xB007             ADD      SP,SP,#+28
   \   0000004A   0xBD00             POP      {PC}             ;; return
    407          }

   \                                 In section .text, align 2, keep-with-next
    408          tBleStatus aci_hal_updater_erase_sector(uint32_t Address)
    409          {
   \                     aci_hal_updater_erase_sector: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0C8             SUB      SP,SP,#+288
   \   00000004   0x0004             MOVS     R4,R0
    410            struct hci_request rq;
    411            uint8_t cmd_buffer[258];
    412            aci_hal_updater_erase_sector_cp0 *cp0 = (aci_hal_updater_erase_sector_cp0*)(cmd_buffer);
   \   00000006   0xAD07             ADD      R5,SP,#+28
    413            tBleStatus status = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    414            uint8_t index_input = 0;
   \   0000000E   0x2600             MOVS     R6,#+0
    415            cp0->Address = htob(Address, 4);
   \   00000010   0x602C             STR      R4,[R5, #+0]
    416            index_input += 4;
   \   00000012   0x1D36             ADDS     R6,R6,#+4
    417            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000014   0x2218             MOVS     R2,#+24
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0xA801             ADD      R0,SP,#+4
   \   0000001A   0x.... 0x....      BL       Osal_MemSet
    418            rq.ogf = 0x3f;
   \   0000001E   0x203F             MOVS     R0,#+63
   \   00000020   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    419            rq.ocf = 0x026;
   \   00000024   0x2026             MOVS     R0,#+38
   \   00000026   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    420            rq.cparam = cmd_buffer;
   \   0000002A   0xA807             ADD      R0,SP,#+28
   \   0000002C   0x9003             STR      R0,[SP, #+12]
    421            rq.clen = index_input;
   \   0000002E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000030   0x9604             STR      R6,[SP, #+16]
    422            rq.rparam = &status;
   \   00000032   0x4668             MOV      R0,SP
   \   00000034   0x9005             STR      R0,[SP, #+20]
    423            rq.rlen = 1;
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x9006             STR      R0,[SP, #+24]
    424            if (hci_send_req(&rq, FALSE) < 0)
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0xA801             ADD      R0,SP,#+4
   \   0000003E   0x.... 0x....      BL       hci_send_req
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD501             BPL.N    ??aci_hal_updater_erase_sector_0
    425              return BLE_STATUS_TIMEOUT;
   \   00000046   0x20FF             MOVS     R0,#+255
   \   00000048   0xE007             B.N      ??aci_hal_updater_erase_sector_1
    426            if (status) {
   \                     ??aci_hal_updater_erase_sector_0: (+1)
   \   0000004A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD002             BEQ.N    ??aci_hal_updater_erase_sector_2
    427              return status;
   \   00000052   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000056   0xE000             B.N      ??aci_hal_updater_erase_sector_1
    428            }
    429            return BLE_STATUS_SUCCESS;
   \                     ??aci_hal_updater_erase_sector_2: (+1)
   \   00000058   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_updater_erase_sector_1: (+1)
   \   0000005A   0xB048             ADD      SP,SP,#+288
   \   0000005C   0xBD70             POP      {R4-R6,PC}       ;; return
    430          }

   \                                 In section .text, align 2, keep-with-next
    431          tBleStatus aci_hal_updater_prog_data_blk(uint32_t Address,
    432                                                   uint16_t Data_Length,
    433                                                   uint8_t Data[])
    434          {
   \                     aci_hal_updater_prog_data_blk: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB0C8             SUB      SP,SP,#+288
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
    435            struct hci_request rq;
    436            uint8_t cmd_buffer[258];
    437            aci_hal_updater_prog_data_blk_cp0 *cp0 = (aci_hal_updater_prog_data_blk_cp0*)(cmd_buffer);
   \   0000000C   0xAF07             ADD      R7,SP,#+28
    438            tBleStatus status = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF88D 0x0000      STRB     R0,[SP, #+0]
    439            uint8_t index_input = 0;
   \   00000014   0xF05F 0x0800      MOVS     R8,#+0
    440            cp0->Address = htob(Address, 4);
   \   00000018   0x603C             STR      R4,[R7, #+0]
    441            index_input += 4;
   \   0000001A   0xF118 0x0804      ADDS     R8,R8,#+4
    442            cp0->Data_Length = htob(Data_Length, 2);
   \   0000001E   0x80BD             STRH     R5,[R7, #+4]
    443            index_input += 2;
   \   00000020   0xF118 0x0802      ADDS     R8,R8,#+2
    444            Osal_MemCpy((void *) &cp0->Data, (const void *) Data, Data_Length);
   \   00000024   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000026   0x002A             MOVS     R2,R5
   \   00000028   0x0031             MOVS     R1,R6
   \   0000002A   0x1DB8             ADDS     R0,R7,#+6
   \   0000002C   0x.... 0x....      BL       Osal_MemCpy
    445            index_input += Data_Length;
   \   00000030   0xEB15 0x0808      ADDS     R8,R5,R8
    446            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000034   0x2218             MOVS     R2,#+24
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0xA801             ADD      R0,SP,#+4
   \   0000003A   0x.... 0x....      BL       Osal_MemSet
    447            rq.ogf = 0x3f;
   \   0000003E   0x203F             MOVS     R0,#+63
   \   00000040   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    448            rq.ocf = 0x027;
   \   00000044   0x2027             MOVS     R0,#+39
   \   00000046   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    449            rq.cparam = cmd_buffer;
   \   0000004A   0xA807             ADD      R0,SP,#+28
   \   0000004C   0x9003             STR      R0,[SP, #+12]
    450            rq.clen = index_input;
   \   0000004E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000052   0xF8CD 0x8010      STR      R8,[SP, #+16]
    451            rq.rparam = &status;
   \   00000056   0x4668             MOV      R0,SP
   \   00000058   0x9005             STR      R0,[SP, #+20]
    452            rq.rlen = 1;
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x9006             STR      R0,[SP, #+24]
    453            if (hci_send_req(&rq, FALSE) < 0)
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0xA801             ADD      R0,SP,#+4
   \   00000062   0x.... 0x....      BL       hci_send_req
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD501             BPL.N    ??aci_hal_updater_prog_data_blk_0
    454              return BLE_STATUS_TIMEOUT;
   \   0000006A   0x20FF             MOVS     R0,#+255
   \   0000006C   0xE007             B.N      ??aci_hal_updater_prog_data_blk_1
    455            if (status) {
   \                     ??aci_hal_updater_prog_data_blk_0: (+1)
   \   0000006E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD002             BEQ.N    ??aci_hal_updater_prog_data_blk_2
    456              return status;
   \   00000076   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000007A   0xE000             B.N      ??aci_hal_updater_prog_data_blk_1
    457            }
    458            return BLE_STATUS_SUCCESS;
   \                     ??aci_hal_updater_prog_data_blk_2: (+1)
   \   0000007C   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_updater_prog_data_blk_1: (+1)
   \   0000007E   0xB048             ADD      SP,SP,#+288
   \   00000080   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    459          }

   \                                 In section .text, align 2, keep-with-next
    460          tBleStatus aci_hal_updater_read_data_blk(uint32_t Address,
    461                                                   uint16_t Data_Length,
    462                                                   uint8_t Data[])
    463          {
   \                     aci_hal_updater_read_data_blk: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB0E8             SUB      SP,SP,#+416
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
    464            struct hci_request rq;
    465            uint8_t cmd_buffer[258];
    466            aci_hal_updater_read_data_blk_cp0 *cp0 = (aci_hal_updater_read_data_blk_cp0*)(cmd_buffer);
   \   0000000C   0xAF26             ADD      R7,SP,#+152
    467            aci_hal_updater_read_data_blk_rp0 resp;
    468            Osal_MemSet(&resp, 0, sizeof(resp));
   \   0000000E   0x2280             MOVS     R2,#+128
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0xA806             ADD      R0,SP,#+24
   \   00000014   0x.... 0x....      BL       Osal_MemSet
    469            uint8_t index_input = 0;
   \   00000018   0xF05F 0x0800      MOVS     R8,#+0
    470            cp0->Address = htob(Address, 4);
   \   0000001C   0x603C             STR      R4,[R7, #+0]
    471            index_input += 4;
   \   0000001E   0xF118 0x0804      ADDS     R8,R8,#+4
    472            cp0->Data_Length = htob(Data_Length, 2);
   \   00000022   0x80BD             STRH     R5,[R7, #+4]
    473            index_input += 2;
   \   00000024   0xF118 0x0802      ADDS     R8,R8,#+2
    474            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000028   0x2218             MOVS     R2,#+24
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x4668             MOV      R0,SP
   \   0000002E   0x.... 0x....      BL       Osal_MemSet
    475            rq.ogf = 0x3f;
   \   00000032   0x203F             MOVS     R0,#+63
   \   00000034   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    476            rq.ocf = 0x028;
   \   00000038   0x2028             MOVS     R0,#+40
   \   0000003A   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    477            rq.cparam = cmd_buffer;
   \   0000003E   0xA826             ADD      R0,SP,#+152
   \   00000040   0x9002             STR      R0,[SP, #+8]
    478            rq.clen = index_input;
   \   00000042   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000046   0xF8CD 0x800C      STR      R8,[SP, #+12]
    479            rq.rparam = &resp;
   \   0000004A   0xA806             ADD      R0,SP,#+24
   \   0000004C   0x9004             STR      R0,[SP, #+16]
    480            rq.rlen = sizeof(resp);
   \   0000004E   0x2080             MOVS     R0,#+128
   \   00000050   0x9005             STR      R0,[SP, #+20]
    481            if (hci_send_req(&rq, FALSE) < 0)
   \   00000052   0x2100             MOVS     R1,#+0
   \   00000054   0x4668             MOV      R0,SP
   \   00000056   0x.... 0x....      BL       hci_send_req
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD501             BPL.N    ??aci_hal_updater_read_data_blk_0
    482              return BLE_STATUS_TIMEOUT;
   \   0000005E   0x20FF             MOVS     R0,#+255
   \   00000060   0xE00D             B.N      ??aci_hal_updater_read_data_blk_1
    483            if (resp.Status) {
   \                     ??aci_hal_updater_read_data_blk_0: (+1)
   \   00000062   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD002             BEQ.N    ??aci_hal_updater_read_data_blk_2
    484              return resp.Status;
   \   0000006A   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   0000006E   0xE006             B.N      ??aci_hal_updater_read_data_blk_1
    485            }
    486            Osal_MemCpy((void *) Data, (const void *) resp.Data, *Data);
   \                     ??aci_hal_updater_read_data_blk_2: (+1)
   \   00000070   0x7832             LDRB     R2,[R6, #+0]
   \   00000072   0xF10D 0x0119      ADD      R1,SP,#+25
   \   00000076   0x0030             MOVS     R0,R6
   \   00000078   0x.... 0x....      BL       Osal_MemCpy
    487            return BLE_STATUS_SUCCESS;
   \   0000007C   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_updater_read_data_blk_1: (+1)
   \   0000007E   0xB068             ADD      SP,SP,#+416
   \   00000080   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    488          }

   \                                 In section .text, align 2, keep-with-next
    489          tBleStatus aci_hal_updater_calc_crc(uint32_t Address,
    490                                              uint8_t Num_Of_Sectors,
    491                                              uint32_t *crc)
    492          {
   \                     aci_hal_updater_calc_crc: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB0CA             SUB      SP,SP,#+296
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
    493            struct hci_request rq;
    494            uint8_t cmd_buffer[258];
    495            aci_hal_updater_calc_crc_cp0 *cp0 = (aci_hal_updater_calc_crc_cp0*)(cmd_buffer);
   \   0000000C   0xAF08             ADD      R7,SP,#+32
    496            aci_hal_updater_calc_crc_rp0 resp;
    497            Osal_MemSet(&resp, 0, sizeof(resp));
   \   0000000E   0x2205             MOVS     R2,#+5
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x.... 0x....      BL       Osal_MemSet
    498            uint8_t index_input = 0;
   \   00000018   0xF05F 0x0800      MOVS     R8,#+0
    499            cp0->Address = htob(Address, 4);
   \   0000001C   0x603C             STR      R4,[R7, #+0]
    500            index_input += 4;
   \   0000001E   0xF118 0x0804      ADDS     R8,R8,#+4
    501            cp0->Num_Of_Sectors = htob(Num_Of_Sectors, 1);
   \   00000022   0x713D             STRB     R5,[R7, #+4]
    502            index_input += 1;
   \   00000024   0xF118 0x0801      ADDS     R8,R8,#+1
    503            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000028   0x2218             MOVS     R2,#+24
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0xA802             ADD      R0,SP,#+8
   \   0000002E   0x.... 0x....      BL       Osal_MemSet
    504            rq.ogf = 0x3f;
   \   00000032   0x203F             MOVS     R0,#+63
   \   00000034   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    505            rq.ocf = 0x029;
   \   00000038   0x2029             MOVS     R0,#+41
   \   0000003A   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    506            rq.cparam = cmd_buffer;
   \   0000003E   0xA808             ADD      R0,SP,#+32
   \   00000040   0x9004             STR      R0,[SP, #+16]
    507            rq.clen = index_input;
   \   00000042   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000046   0xF8CD 0x8014      STR      R8,[SP, #+20]
    508            rq.rparam = &resp;
   \   0000004A   0x4668             MOV      R0,SP
   \   0000004C   0x9006             STR      R0,[SP, #+24]
    509            rq.rlen = sizeof(resp);
   \   0000004E   0x2005             MOVS     R0,#+5
   \   00000050   0x9007             STR      R0,[SP, #+28]
    510            if (hci_send_req(&rq, FALSE) < 0)
   \   00000052   0x2100             MOVS     R1,#+0
   \   00000054   0xA802             ADD      R0,SP,#+8
   \   00000056   0x.... 0x....      BL       hci_send_req
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD501             BPL.N    ??aci_hal_updater_calc_crc_0
    511              return BLE_STATUS_TIMEOUT;
   \   0000005E   0x20FF             MOVS     R0,#+255
   \   00000060   0xE00A             B.N      ??aci_hal_updater_calc_crc_1
    512            if (resp.Status) {
   \                     ??aci_hal_updater_calc_crc_0: (+1)
   \   00000062   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD002             BEQ.N    ??aci_hal_updater_calc_crc_2
    513              return resp.Status;
   \   0000006A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000006E   0xE003             B.N      ??aci_hal_updater_calc_crc_1
    514            }
    515            *crc = btoh(resp.crc, 4);
   \                     ??aci_hal_updater_calc_crc_2: (+1)
   \   00000070   0xF8DD 0x0001      LDR      R0,[SP, #+1]
   \   00000074   0x6030             STR      R0,[R6, #+0]
    516            return BLE_STATUS_SUCCESS;
   \   00000076   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_updater_calc_crc_1: (+1)
   \   00000078   0xB04A             ADD      SP,SP,#+296
   \   0000007A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    517          }

   \                                 In section .text, align 2, keep-with-next
    518          tBleStatus aci_hal_updater_hw_version(uint8_t *HW_Version)
    519          {
   \                     aci_hal_updater_hw_version: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x0004             MOVS     R4,R0
    520            struct hci_request rq;
    521            aci_hal_updater_hw_version_rp0 resp;
    522            Osal_MemSet(&resp, 0, sizeof(resp));
   \   00000006   0x2202             MOVS     R2,#+2
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x.... 0x....      BL       Osal_MemSet
    523            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000010   0x2218             MOVS     R2,#+24
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0xA801             ADD      R0,SP,#+4
   \   00000016   0x.... 0x....      BL       Osal_MemSet
    524            rq.ogf = 0x3f;
   \   0000001A   0x203F             MOVS     R0,#+63
   \   0000001C   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    525            rq.ocf = 0x02a;
   \   00000020   0x202A             MOVS     R0,#+42
   \   00000022   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    526            rq.rparam = &resp;
   \   00000026   0x4668             MOV      R0,SP
   \   00000028   0x9005             STR      R0,[SP, #+20]
    527            rq.rlen = sizeof(resp);
   \   0000002A   0x2002             MOVS     R0,#+2
   \   0000002C   0x9006             STR      R0,[SP, #+24]
    528            if (hci_send_req(&rq, FALSE) < 0)
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0xA801             ADD      R0,SP,#+4
   \   00000032   0x.... 0x....      BL       hci_send_req
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD501             BPL.N    ??aci_hal_updater_hw_version_0
    529              return BLE_STATUS_TIMEOUT;
   \   0000003A   0x20FF             MOVS     R0,#+255
   \   0000003C   0xE00A             B.N      ??aci_hal_updater_hw_version_1
    530            if (resp.Status) {
   \                     ??aci_hal_updater_hw_version_0: (+1)
   \   0000003E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD002             BEQ.N    ??aci_hal_updater_hw_version_2
    531              return resp.Status;
   \   00000046   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004A   0xE003             B.N      ??aci_hal_updater_hw_version_1
    532            }
    533            *HW_Version = btoh(resp.HW_Version, 1);
   \                     ??aci_hal_updater_hw_version_2: (+1)
   \   0000004C   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000050   0x7020             STRB     R0,[R4, #+0]
    534            return BLE_STATUS_SUCCESS;
   \   00000052   0x2000             MOVS     R0,#+0
   \                     ??aci_hal_updater_hw_version_1: (+1)
   \   00000054   0xB008             ADD      SP,SP,#+32
   \   00000056   0xBD10             POP      {R4,PC}          ;; return
    535          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   aci_hal_get_anchor_period
        48   -> Osal_MemSet
        48   -> hci_send_req
      88   aci_hal_get_firmware_details
        88   -> Osal_MemSet
        88   -> hci_send_req
      40   aci_hal_get_fw_build_number
        40   -> Osal_MemSet
        40   -> hci_send_req
      64   aci_hal_get_link_status
        64   -> Osal_MemCpy
        64   -> Osal_MemSet
        64   -> hci_send_req
      40   aci_hal_get_updater_bufsize
        40   -> Osal_MemSet
        40   -> hci_send_req
      40   aci_hal_get_updater_version
        40   -> Osal_MemSet
        40   -> hci_send_req
      40   aci_hal_le_tx_test_packet_number
        40   -> Osal_MemSet
        40   -> hci_send_req
     440   aci_hal_read_config_data
       440   -> Osal_MemCpy
       440   -> Osal_MemSet
       440   -> hci_send_req
     304   aci_hal_set_event_mask
       304   -> Osal_MemSet
       304   -> hci_send_req
     304   aci_hal_set_radio_activity_mask
       304   -> Osal_MemSet
       304   -> hci_send_req
     312   aci_hal_set_tx_power_level
       312   -> Osal_MemSet
       312   -> hci_send_req
     304   aci_hal_tone_start
       304   -> Osal_MemSet
       304   -> hci_send_req
      32   aci_hal_tone_stop
        32   -> Osal_MemSet
        32   -> hci_send_req
     320   aci_hal_updater_calc_crc
       320   -> Osal_MemSet
       320   -> hci_send_req
      32   aci_hal_updater_erase_blue_flag
        32   -> Osal_MemSet
        32   -> hci_send_req
     304   aci_hal_updater_erase_sector
       304   -> Osal_MemSet
       304   -> hci_send_req
      40   aci_hal_updater_hw_version
        40   -> Osal_MemSet
        40   -> hci_send_req
     312   aci_hal_updater_prog_data_blk
       312   -> Osal_MemCpy
       312   -> Osal_MemSet
       312   -> hci_send_req
     440   aci_hal_updater_read_data_blk
       440   -> Osal_MemCpy
       440   -> Osal_MemSet
       440   -> hci_send_req
      32   aci_hal_updater_reboot
        32   -> Osal_MemSet
        32   -> hci_send_req
      32   aci_hal_updater_reset_blue_flag
        32   -> Osal_MemSet
        32   -> hci_send_req
      32   aci_hal_updater_start
        32   -> Osal_MemSet
        32   -> hci_send_req
     312   aci_hal_write_config_data
       312   -> Osal_MemCpy
       312   -> Osal_MemSet
       312   -> hci_send_req


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      96  aci_hal_get_anchor_period
     188  aci_hal_get_firmware_details
      88  aci_hal_get_fw_build_number
     108  aci_hal_get_link_status
      88  aci_hal_get_updater_bufsize
      88  aci_hal_get_updater_version
      88  aci_hal_le_tx_test_packet_number
     132  aci_hal_read_config_data
      94  aci_hal_set_event_mask
      94  aci_hal_set_radio_activity_mask
     100  aci_hal_set_tx_power_level
      94  aci_hal_tone_start
      76  aci_hal_tone_stop
     126  aci_hal_updater_calc_crc
      76  aci_hal_updater_erase_blue_flag
      94  aci_hal_updater_erase_sector
      88  aci_hal_updater_hw_version
     132  aci_hal_updater_prog_data_blk
     132  aci_hal_updater_read_data_blk
      76  aci_hal_updater_reboot
      76  aci_hal_updater_reset_blue_flag
      76  aci_hal_updater_start
     132  aci_hal_write_config_data

 
 2 342 bytes in section .text
 
 2 342 bytes of CODE memory

Errors: none
Warnings: none
