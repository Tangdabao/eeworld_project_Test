###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       29/Jan/2018  14:45:23
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Library\STM32L\Drivers\BSP\STM32L1xx_BlueNRG1\src\SDK_EVAL_Spi.c
#    Command line =  
#        "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Library\STM32L\Drivers\BSP\STM32L1xx_BlueNRG1\src\SDK_EVAL_Spi.c"
#        -D STM32L151xB -D STM32L1XX_XL -D USE_STM32L1XX_STEVAL_IDB00xV1 -D
#        USE_HAL_DRIVER -D HCLK_32MHZ=1 -D SYSCLK_MSI=1 -D ENABLE_USART -D
#        USER_DEFINED_PLATFORM=USER_EVAL_PLATFORM -D IRQ_RESET_PIN -D DTM_UART
#        -lC "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\List"
#        -o "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\Software\IAR_BlueNRG\arm\INC\c\DLib_Config_Normal.h -I
#        "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\HAL\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\BSP\STM32L1xx_BlueNRG1\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\BSP\STM32L1xx_Nucleo\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\CMSIS\Device\ST\STM32L1xx\Include\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\STM32L1xx_HAL_Driver\Inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\STM32L1xx_HAL_BlueNRG1_Drivers\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\SimpleBlueNRG1_HCI\includes\"
#        -On --use_c++_inline -I D:\Software\IAR_BlueNRG\arm\CMSIS\Include\
#    Locale       =  Chinese (Simplified)_China.936
#    List file    =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\List\SDK_EVAL_Spi.lst
#    Object file  =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\Obj\SDK_EVAL_Spi.o
#
###############################################################################

C:\Users\Administrator\Desktop\Temporary Files\eeworld_project\Project_Test\Library\STM32L\Drivers\BSP\STM32L1xx_BlueNRG1\src\SDK_EVAL_Spi.c
      1          /**
      2          * @file    SDK_EVAL_SPI_Driver.c
      3          * @author  AMS VMA RF application team
      4          * @version V1.0.3
      5          * @date    May 15, 2015
      6          * @brief   This file provides all the low level SPI API to access to BlueNRG module
      7          * @details It uses STM32L1 Cube APIs + Optimized APIs for SPI Transmit, Receive, 
      8          *          Transmit & Receive (these APIs are needed for BLE communication
      9          *          throughput) 
     10          *
     11          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13          * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14          * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15          * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16          * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17          *
     18          * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     19          * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     20          * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     21          *
     22          * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     23          *
     24          */
     25          
     26          /* Includes ------------------------------------------------------------------*/
     27          #include "clock.h" 
     28          #include "gp_timer.h"
     29          #include "stm32l1xx_hal_bluenrg1_spi.h"
     30          #include "SDK_EVAL_Config.h"
     31          
     32          /** @addtogroup SDK_EVAL_STM32L
     33          * @{
     34          */
     35          
     36          /** @addtogroup SDK_EVAL_Spi                    SDK EVAL Spi
     37          * @brief SPI functions implementation.
     38          * @details This file implements the BlueNRG Library SPI interface functions. 
     39          * @{
     40          */
     41          
     42          /** @defgroup STM32_BLUENRG_BLE_Private_Defines 
     43          * @{
     44          */ 
     45          
     46          #define HEADER_SIZE 5
     47          #define MAX_BUFFER_SIZE 255
     48          #define TIMEOUT_DURATION 15
     49          
     50          /**
     51          * @}
     52          */
     53          
     54          /** @defgroup SPI_Private_Variables
     55          * @{
     56          */

   \                                 In section .bss, align 4
     57          SPI_HandleTypeDef SpiHandle;
   \                     SpiHandle:
   \   00000000                      DS8 88
     58          

   \                                 In section .bss, align 4
     59          static DMA_HandleTypeDef hdma_tx;
   \                     hdma_tx:
   \   00000000                      DS8 56

   \                                 In section .bss, align 4
     60          static DMA_HandleTypeDef hdma_rx;
   \                     hdma_rx:
   \   00000000                      DS8 56
     61          
     62          /**
     63          * @}
     64          */
     65          
     66          /** @defgroup SPI_Functions
     67          * @{
     68          */
     69          
     70          /**
     71          * @brief  Basic SPI configuration according to the selected platform 
     72          * @param  None
     73          * @retval status
     74          */

   \                                 In section .text, align 2, keep-with-next
     75          static int8_t SPI_Configure_Platform(void)
     76          { 
   \                     SPI_Configure_Platform: (+1)
   \   00000000   0xB081             SUB      SP,SP,#+4
     77            /* Enable GPIO Ports Clock */  
     78            BNRG_SPI_RESET_CLK_ENABLE();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable16  ;; 0x4002381c
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable16  ;; 0x4002381c
   \   00000010   0x6008             STR      R0,[R1, #+0]
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable16  ;; 0x4002381c
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0x9800             LDR      R0,[SP, #+0]
     79            BNRG_SPI_SCLK_CLK_ENABLE();
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable16  ;; 0x4002381c
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable16  ;; 0x4002381c
   \   0000002E   0x6008             STR      R0,[R1, #+0]
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable16  ;; 0x4002381c
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0xF010 0x0002      ANDS     R0,R0,#0x2
   \   0000003A   0x9000             STR      R0,[SP, #+0]
   \   0000003C   0x9800             LDR      R0,[SP, #+0]
     80            BNRG_SPI_MISO_CLK_ENABLE();
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable16  ;; 0x4002381c
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable16  ;; 0x4002381c
   \   0000004C   0x6008             STR      R0,[R1, #+0]
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable16  ;; 0x4002381c
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000058   0x9000             STR      R0,[SP, #+0]
   \   0000005A   0x9800             LDR      R0,[SP, #+0]
     81            BNRG_SPI_MOSI_CLK_ENABLE();
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable16  ;; 0x4002381c
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000066   0x.... 0x....      LDR.W    R1,??DataTable16  ;; 0x4002381c
   \   0000006A   0x6008             STR      R0,[R1, #+0]
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable16  ;; 0x4002381c
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000076   0x9000             STR      R0,[SP, #+0]
   \   00000078   0x9800             LDR      R0,[SP, #+0]
     82            BNRG_SPI_CS_CLK_ENABLE();
   \   0000007A   0x.... 0x....      LDR.W    R0,??DataTable16  ;; 0x4002381c
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000084   0x.... 0x....      LDR.W    R1,??DataTable16  ;; 0x4002381c
   \   00000088   0x6008             STR      R0,[R1, #+0]
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable16  ;; 0x4002381c
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
   \   00000090   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000094   0x9000             STR      R0,[SP, #+0]
   \   00000096   0x9800             LDR      R0,[SP, #+0]
     83            BNRG_SPI_IRQ_CLK_ENABLE();
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable16  ;; 0x4002381c
   \   0000009C   0x6800             LDR      R0,[R0, #+0]
   \   0000009E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000A2   0x.... 0x....      LDR.W    R1,??DataTable16  ;; 0x4002381c
   \   000000A6   0x6008             STR      R0,[R1, #+0]
   \   000000A8   0x.... 0x....      LDR.W    R0,??DataTable16  ;; 0x4002381c
   \   000000AC   0x6800             LDR      R0,[R0, #+0]
   \   000000AE   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   000000B2   0x9000             STR      R0,[SP, #+0]
   \   000000B4   0x9800             LDR      R0,[SP, #+0]
     84            
     85            /* Enable SPI clock */
     86            BNRG_SPI_CLK_ENABLE();
   \   000000B6   0x.... 0x....      LDR.W    R0,??DataTable16_1  ;; 0x40023820
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   000000C0   0x.... 0x....      LDR.W    R1,??DataTable16_1  ;; 0x40023820
   \   000000C4   0x6008             STR      R0,[R1, #+0]
   \   000000C6   0x.... 0x....      LDR.W    R0,??DataTable16_1  ;; 0x40023820
   \   000000CA   0x6800             LDR      R0,[R0, #+0]
   \   000000CC   0xF410 0x5080      ANDS     R0,R0,#0x1000
   \   000000D0   0x9000             STR      R0,[SP, #+0]
   \   000000D2   0x9800             LDR      R0,[SP, #+0]
     87            
     88            return(0);
   \   000000D4   0x2000             MOVS     R0,#+0
   \   000000D6   0xB001             ADD      SP,SP,#+4
   \   000000D8   0x4770             BX       LR               ;; return
     89          }/* end SPI_Configure_Platform() */
     90          
     91          /**
     92          * @brief  Return SPI IRQ pin value
     93          * @param  None
     94          * @retval SPI IRQ pin value
     95          */

   \                                 In section .text, align 2, keep-with-next
     96          uint8_t SdkEvalSPI_Irq_Pin(void) 
     97          {
   \                     SdkEvalSPI_Irq_Pin: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     98            return (HAL_GPIO_ReadPin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN));
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable16_2  ;; 0x40020000
   \   00000008   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   0000000C   0xBD02             POP      {R1,PC}          ;; return
     99            
    100          }/* end SdkEvalSPI_Irq_Pin() */
    101          
    102          /**
    103          * @brief  Initializes the SPI 
    104          * @param  xSpiMode: SPI mode - GPIO (polling) or EXTI (IRQ)
    105          * @retval status
    106          */

   \                                 In section .text, align 2, keep-with-next
    107          int8_t SdkEvalSpiInit(SdkEvalSpiMode xSpiMode) 
    108          {
   \                     SdkEvalSpiInit: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0004             MOVS     R4,R0
    109            int8_t retValue; 
    110            GPIO_InitTypeDef GPIO_InitStruct;
    111            
    112            /* Configure SPI initialization parameters depending on the selected 
    113            platform: BlueNRG EVal Kits or User Defined platforms */
    114            retValue = SPI_Configure_Platform();
   \   00000006   0x.... 0x....      BL       SPI_Configure_Platform
   \   0000000A   0x0005             MOVS     R5,R0
    115            if (retValue == -1)
   \   0000000C   0xB26D             SXTB     R5,R5            ;; SignExt  R5,R5,#+24,#+24
   \   0000000E   0xF115 0x0F01      CMN      R5,#+1
   \   00000012   0xD102             BNE.N    ??SdkEvalSpiInit_0
    116              /* BlueNRG Development Kit platfrom is not supported */
    117              return (retValue);
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000018   0xE12E             B.N      ??SdkEvalSpiInit_1
    118            
    119            /* Reset */
    120            GPIO_InitStruct.Pin = BNRG_SPI_RESET_PIN;
   \                     ??SdkEvalSpiInit_0: (+1)
   \   0000001A   0xF44F 0x7080      MOV      R0,#+256
   \   0000001E   0x9000             STR      R0,[SP, #+0]
    121            GPIO_InitStruct.Mode = BNRG_SPI_RESET_MODE;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x9001             STR      R0,[SP, #+4]
    122            GPIO_InitStruct.Pull = BNRG_SPI_RESET_PULL;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x9002             STR      R0,[SP, #+8]
    123            GPIO_InitStruct.Speed = BNRG_SPI_RESET_SPEED;
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x9003             STR      R0,[SP, #+12]
    124            GPIO_InitStruct.Alternate = BNRG_SPI_RESET_ALTERNATE;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x9004             STR      R0,[SP, #+16]
    125            HAL_GPIO_Init(BNRG_SPI_RESET_PORT, &GPIO_InitStruct);	
   \   00000030   0x4669             MOV      R1,SP
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable16_2  ;; 0x40020000
   \   00000036   0x.... 0x....      BL       HAL_GPIO_Init
    126            BlueNRG_Power_Down();	/*Added to avoid spurious interrupt from the BlueNRG */
   \   0000003A   0x.... 0x....      BL       BlueNRG_Power_Down
    127            
    128            /* SCLK */
    129            GPIO_InitStruct.Pin = BNRG_SPI_SCLK_PIN;
   \   0000003E   0x2008             MOVS     R0,#+8
   \   00000040   0x9000             STR      R0,[SP, #+0]
    130            GPIO_InitStruct.Mode = BNRG_SPI_SCLK_MODE;
   \   00000042   0x2002             MOVS     R0,#+2
   \   00000044   0x9001             STR      R0,[SP, #+4]
    131            GPIO_InitStruct.Pull = BNRG_SPI_SCLK_PULL;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x9002             STR      R0,[SP, #+8]
    132            GPIO_InitStruct.Speed = BNRG_SPI_SCLK_SPEED;
   \   0000004A   0x2003             MOVS     R0,#+3
   \   0000004C   0x9003             STR      R0,[SP, #+12]
    133            GPIO_InitStruct.Alternate = BNRG_SPI_SCLK_ALTERNATE;
   \   0000004E   0x2005             MOVS     R0,#+5
   \   00000050   0x9004             STR      R0,[SP, #+16]
    134            HAL_GPIO_Init(BNRG_SPI_SCLK_PORT, &GPIO_InitStruct); 
   \   00000052   0x4669             MOV      R1,SP
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable16_3  ;; 0x40020400
   \   00000058   0x.... 0x....      BL       HAL_GPIO_Init
    135            
    136            /* MISO */
    137            GPIO_InitStruct.Pin = BNRG_SPI_MISO_PIN;
   \   0000005C   0x2040             MOVS     R0,#+64
   \   0000005E   0x9000             STR      R0,[SP, #+0]
    138            GPIO_InitStruct.Mode = BNRG_SPI_MISO_MODE;
   \   00000060   0x2002             MOVS     R0,#+2
   \   00000062   0x9001             STR      R0,[SP, #+4]
    139            GPIO_InitStruct.Pull = BNRG_SPI_MISO_PULL;
   \   00000064   0x2001             MOVS     R0,#+1
   \   00000066   0x9002             STR      R0,[SP, #+8]
    140            GPIO_InitStruct.Speed = BNRG_SPI_MISO_SPEED;
   \   00000068   0x2003             MOVS     R0,#+3
   \   0000006A   0x9003             STR      R0,[SP, #+12]
    141            GPIO_InitStruct.Alternate = BNRG_SPI_MISO_ALTERNATE;
   \   0000006C   0x2005             MOVS     R0,#+5
   \   0000006E   0x9004             STR      R0,[SP, #+16]
    142            HAL_GPIO_Init(BNRG_SPI_MISO_PORT, &GPIO_InitStruct);
   \   00000070   0x4669             MOV      R1,SP
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable16_2  ;; 0x40020000
   \   00000076   0x.... 0x....      BL       HAL_GPIO_Init
    143            
    144            /* MOSI */
    145            GPIO_InitStruct.Pin = BNRG_SPI_MOSI_PIN;
   \   0000007A   0x2080             MOVS     R0,#+128
   \   0000007C   0x9000             STR      R0,[SP, #+0]
    146            GPIO_InitStruct.Mode = BNRG_SPI_MOSI_MODE;
   \   0000007E   0x2002             MOVS     R0,#+2
   \   00000080   0x9001             STR      R0,[SP, #+4]
    147            GPIO_InitStruct.Pull = BNRG_SPI_MOSI_PULL;
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x9002             STR      R0,[SP, #+8]
    148            GPIO_InitStruct.Speed = BNRG_SPI_MOSI_SPEED;
   \   00000086   0x2003             MOVS     R0,#+3
   \   00000088   0x9003             STR      R0,[SP, #+12]
    149            GPIO_InitStruct.Alternate = BNRG_SPI_MOSI_ALTERNATE;
   \   0000008A   0x2005             MOVS     R0,#+5
   \   0000008C   0x9004             STR      R0,[SP, #+16]
    150            HAL_GPIO_Init(BNRG_SPI_MOSI_PORT, &GPIO_InitStruct);
   \   0000008E   0x4669             MOV      R1,SP
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable16_2  ;; 0x40020000
   \   00000094   0x.... 0x....      BL       HAL_GPIO_Init
    151            
    152            /* NSS/CSN/CS */
    153            GPIO_InitStruct.Pin = BNRG_SPI_CS_PIN;
   \   00000098   0x2002             MOVS     R0,#+2
   \   0000009A   0x9000             STR      R0,[SP, #+0]
    154            GPIO_InitStruct.Mode = BNRG_SPI_CS_MODE;
   \   0000009C   0x2001             MOVS     R0,#+1
   \   0000009E   0x9001             STR      R0,[SP, #+4]
    155            GPIO_InitStruct.Pull = BNRG_SPI_CS_PULL;
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0x9002             STR      R0,[SP, #+8]
    156            GPIO_InitStruct.Speed = BNRG_SPI_CS_SPEED;
   \   000000A4   0x2003             MOVS     R0,#+3
   \   000000A6   0x9003             STR      R0,[SP, #+12]
    157            GPIO_InitStruct.Alternate = BNRG_SPI_CS_ALTERNATE;
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0x9004             STR      R0,[SP, #+16]
    158            HAL_GPIO_Init(BNRG_SPI_CS_PORT, &GPIO_InitStruct);
   \   000000AC   0x4669             MOV      R1,SP
   \   000000AE   0x.... 0x....      LDR.W    R0,??DataTable16_2  ;; 0x40020000
   \   000000B2   0x.... 0x....      BL       HAL_GPIO_Init
    159            HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
   \   000000B6   0x2201             MOVS     R2,#+1
   \   000000B8   0x2102             MOVS     R1,#+2
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable16_2  ;; 0x40020000
   \   000000BE   0x.... 0x....      BL       HAL_GPIO_WritePin
    160            
    161            /* IRQ -- INPUT */
    162            GPIO_InitStruct.Pin = BNRG_SPI_IRQ_PIN;
   \   000000C2   0x2001             MOVS     R0,#+1
   \   000000C4   0x9000             STR      R0,[SP, #+0]
    163            GPIO_InitStruct.Mode = BNRG_SPI_IRQ_MODE;
   \   000000C6   0x.... 0x....      LDR.W    R0,??DataTable16_4  ;; 0x10110000
   \   000000CA   0x9001             STR      R0,[SP, #+4]
    164            GPIO_InitStruct.Pull = BNRG_SPI_IRQ_PULL;
   \   000000CC   0x2002             MOVS     R0,#+2
   \   000000CE   0x9002             STR      R0,[SP, #+8]
    165            GPIO_InitStruct.Speed = BNRG_SPI_IRQ_SPEED;
   \   000000D0   0x2003             MOVS     R0,#+3
   \   000000D2   0x9003             STR      R0,[SP, #+12]
    166            GPIO_InitStruct.Alternate = BNRG_SPI_IRQ_ALTERNATE;
   \   000000D4   0x2000             MOVS     R0,#+0
   \   000000D6   0x9004             STR      R0,[SP, #+16]
    167            HAL_GPIO_Init(BNRG_SPI_IRQ_PORT, &GPIO_InitStruct);
   \   000000D8   0x4669             MOV      R1,SP
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable16_2  ;; 0x40020000
   \   000000DE   0x.... 0x....      BL       HAL_GPIO_Init
    168            
    169            SpiHandle.Instance = BNRG_SPI_INSTANCE;
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable16_5  ;; 0x40013000
   \   000000E6   0x.... 0x....      LDR.W    R1,??DataTable16_6
   \   000000EA   0x6008             STR      R0,[R1, #+0]
    170            SpiHandle.Init.Mode = BNRG_SPI_MODE;
   \   000000EC   0xF44F 0x7082      MOV      R0,#+260
   \   000000F0   0x.... 0x....      LDR.W    R1,??DataTable16_6
   \   000000F4   0x6048             STR      R0,[R1, #+4]
    171            SpiHandle.Init.Direction = BNRG_SPI_DIRECTION;
   \   000000F6   0x2000             MOVS     R0,#+0
   \   000000F8   0x.... 0x....      LDR.W    R1,??DataTable16_6
   \   000000FC   0x6088             STR      R0,[R1, #+8]
    172            SpiHandle.Init.DataSize = BNRG_SPI_DATASIZE;
   \   000000FE   0x2000             MOVS     R0,#+0
   \   00000100   0x.... 0x....      LDR.W    R1,??DataTable16_6
   \   00000104   0x60C8             STR      R0,[R1, #+12]
    173            SpiHandle.Init.CLKPolarity = BNRG_SPI_CLKPOLARITY;
   \   00000106   0x2000             MOVS     R0,#+0
   \   00000108   0x.... 0x....      LDR.W    R1,??DataTable16_6
   \   0000010C   0x6108             STR      R0,[R1, #+16]
    174            SpiHandle.Init.CLKPhase = BNRG_SPI_CLKPHASE;
   \   0000010E   0x2001             MOVS     R0,#+1
   \   00000110   0x.... 0x....      LDR.W    R1,??DataTable16_6
   \   00000114   0x6148             STR      R0,[R1, #+20]
    175            SpiHandle.Init.NSS = BNRG_SPI_NSS;
   \   00000116   0xF44F 0x7000      MOV      R0,#+512
   \   0000011A   0x.... 0x....      LDR.W    R1,??DataTable16_6
   \   0000011E   0x6188             STR      R0,[R1, #+24]
    176            SpiHandle.Init.FirstBit = BNRG_SPI_FIRSTBIT;
   \   00000120   0x2000             MOVS     R0,#+0
   \   00000122   0x.... 0x....      LDR.W    R1,??DataTable16_6
   \   00000126   0x6208             STR      R0,[R1, #+32]
    177            SpiHandle.Init.TIMode = BNRG_SPI_TIMODE;
   \   00000128   0x2000             MOVS     R0,#+0
   \   0000012A   0x.... 0x....      LDR.W    R1,??DataTable16_6
   \   0000012E   0x6248             STR      R0,[R1, #+36]
    178            SpiHandle.Init.CRCPolynomial = BNRG_SPI_CRCPOLYNOMIAL;
   \   00000130   0x2007             MOVS     R0,#+7
   \   00000132   0x.... 0x....      LDR.W    R1,??DataTable16_6
   \   00000136   0x62C8             STR      R0,[R1, #+44]
    179            
    180            SpiHandle.Init.BaudRatePrescaler = BNRG_SPI_BAUDRATEPRESCALER;
   \   00000138   0x2020             MOVS     R0,#+32
   \   0000013A   0x.... 0x....      LDR.W    R1,??DataTable16_6
   \   0000013E   0x61C8             STR      R0,[R1, #+28]
    181            
    182            HAL_SPI_Init(&SpiHandle);
   \   00000140   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   00000144   0x.... 0x....      BL       HAL_SPI_Init
    183            
    184            if (xSpiMode == SPI_MODE_EXTI)
   \   00000148   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000014A   0x2C01             CMP      R4,#+1
   \   0000014C   0xD108             BNE.N    ??SdkEvalSpiInit_2
    185            {
    186              /* Configure the NVIC for SPI */  
    187              HAL_NVIC_SetPriority(BNRG_SPI_EXTI_IRQn, 3, 0);
   \   0000014E   0x2200             MOVS     R2,#+0
   \   00000150   0x2103             MOVS     R1,#+3
   \   00000152   0x2006             MOVS     R0,#+6
   \   00000154   0x.... 0x....      BL       HAL_NVIC_SetPriority
    188              HAL_NVIC_EnableIRQ(BNRG_SPI_EXTI_IRQn);
   \   00000158   0x2006             MOVS     R0,#+6
   \   0000015A   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \   0000015E   0xE080             B.N      ??SdkEvalSpiInit_3
    189            }
    190            else if (xSpiMode == SPI_MODE_DMA)
   \                     ??SdkEvalSpiInit_2: (+1)
   \   00000160   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000162   0x2C02             CMP      R4,#+2
   \   00000164   0xD17D             BNE.N    ??SdkEvalSpiInit_3
    191            { 
    192              /* Enable DMA clock */
    193              __HAL_RCC_DMA1_CLK_ENABLE();
   \   00000166   0x.... 0x....      LDR.W    R0,??DataTable16  ;; 0x4002381c
   \   0000016A   0x6800             LDR      R0,[R0, #+0]
   \   0000016C   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   00000170   0x.... 0x....      LDR.W    R1,??DataTable16  ;; 0x4002381c
   \   00000174   0x6008             STR      R0,[R1, #+0]
   \   00000176   0x.... 0x....      LDR.W    R0,??DataTable16  ;; 0x4002381c
   \   0000017A   0x6800             LDR      R0,[R0, #+0]
   \   0000017C   0xF010 0x7080      ANDS     R0,R0,#0x1000000
   \   00000180   0x9005             STR      R0,[SP, #+20]
   \   00000182   0x9805             LDR      R0,[SP, #+20]
    194              
    195              /*##-3- Configure the DMA ##################################################*/
    196              /* Configure the DMA handler for Transmission process */
    197              hdma_tx.Instance                 = DMA1_Channel3;
   \   00000184   0x.... 0x....      LDR.W    R0,??DataTable16_7  ;; 0x40026030
   \   00000188   0x.... 0x....      LDR.W    R1,??DataTable16_8
   \   0000018C   0x6008             STR      R0,[R1, #+0]
    198              hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
   \   0000018E   0x2010             MOVS     R0,#+16
   \   00000190   0x.... 0x....      LDR.W    R1,??DataTable16_8
   \   00000194   0x6048             STR      R0,[R1, #+4]
    199              hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
   \   00000196   0x2000             MOVS     R0,#+0
   \   00000198   0x.... 0x....      LDR.W    R1,??DataTable16_8
   \   0000019C   0x6088             STR      R0,[R1, #+8]
    200              hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
   \   0000019E   0x2080             MOVS     R0,#+128
   \   000001A0   0x.... 0x....      LDR.W    R1,??DataTable16_8
   \   000001A4   0x60C8             STR      R0,[R1, #+12]
    201              hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
   \   000001A6   0x2000             MOVS     R0,#+0
   \   000001A8   0x.... 0x....      LDR.W    R1,??DataTable16_8
   \   000001AC   0x6108             STR      R0,[R1, #+16]
    202              hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
   \   000001AE   0x2000             MOVS     R0,#+0
   \   000001B0   0x.... 0x....      LDR.W    R1,??DataTable16_8
   \   000001B4   0x6148             STR      R0,[R1, #+20]
    203              hdma_tx.Init.Mode                = DMA_NORMAL;
   \   000001B6   0x2000             MOVS     R0,#+0
   \   000001B8   0x.... 0x....      LDR.W    R1,??DataTable16_8
   \   000001BC   0x6188             STR      R0,[R1, #+24]
    204              hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
   \   000001BE   0x2000             MOVS     R0,#+0
   \   000001C0   0x.... 0x....      LDR.W    R1,??DataTable16_8
   \   000001C4   0x61C8             STR      R0,[R1, #+28]
    205              
    206              HAL_DMA_Init(&hdma_tx);
   \   000001C6   0x.... 0x....      LDR.W    R0,??DataTable16_8
   \   000001CA   0x.... 0x....      BL       HAL_DMA_Init
    207              
    208              /* Associate the initialized DMA handle to the the SPI handle */
    209              __HAL_LINKDMA(&SpiHandle, hdmatx, hdma_tx);
   \   000001CE   0x.... 0x....      LDR.W    R0,??DataTable16_8
   \   000001D2   0x.... 0x....      LDR.W    R1,??DataTable16_6
   \   000001D6   0x6408             STR      R0,[R1, #+64]
   \   000001D8   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   000001DC   0x.... 0x....      LDR.W    R1,??DataTable16_8
   \   000001E0   0x6248             STR      R0,[R1, #+36]
    210              
    211              /* Configure the DMA handler for Reception process */
    212              hdma_rx.Instance                 = DMA1_Channel2;
   \   000001E2   0x.... 0x....      LDR.W    R0,??DataTable16_9  ;; 0x4002601c
   \   000001E6   0x.... 0x....      LDR.W    R1,??DataTable16_10
   \   000001EA   0x6008             STR      R0,[R1, #+0]
    213              
    214              hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
   \   000001EC   0x2000             MOVS     R0,#+0
   \   000001EE   0x.... 0x....      LDR.W    R1,??DataTable16_10
   \   000001F2   0x6048             STR      R0,[R1, #+4]
    215              hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
   \   000001F4   0x2000             MOVS     R0,#+0
   \   000001F6   0x.... 0x....      LDR.W    R1,??DataTable16_10
   \   000001FA   0x6088             STR      R0,[R1, #+8]
    216              hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
   \   000001FC   0x2080             MOVS     R0,#+128
   \   000001FE   0x.... 0x....      LDR.W    R1,??DataTable16_10
   \   00000202   0x60C8             STR      R0,[R1, #+12]
    217              hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
   \   00000204   0x2000             MOVS     R0,#+0
   \   00000206   0x.... 0x....      LDR.W    R1,??DataTable16_10
   \   0000020A   0x6108             STR      R0,[R1, #+16]
    218              hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
   \   0000020C   0x2000             MOVS     R0,#+0
   \   0000020E   0x.... 0x....      LDR.W    R1,??DataTable16_10
   \   00000212   0x6148             STR      R0,[R1, #+20]
    219              hdma_rx.Init.Mode                = DMA_NORMAL;
   \   00000214   0x2000             MOVS     R0,#+0
   \   00000216   0x.... 0x....      LDR.W    R1,??DataTable16_10
   \   0000021A   0x6188             STR      R0,[R1, #+24]
    220              hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
   \   0000021C   0xF44F 0x5000      MOV      R0,#+8192
   \   00000220   0x.... 0x....      LDR.W    R1,??DataTable16_10
   \   00000224   0x61C8             STR      R0,[R1, #+28]
    221              
    222              HAL_DMA_Init(&hdma_rx);
   \   00000226   0x.... 0x....      LDR.W    R0,??DataTable16_10
   \   0000022A   0x.... 0x....      BL       HAL_DMA_Init
    223              
    224              /* Associate the initialized DMA handle to the the SPI handle */
    225              __HAL_LINKDMA(&SpiHandle, hdmarx, hdma_rx);
   \   0000022E   0x.... 0x....      LDR.W    R0,??DataTable16_10
   \   00000232   0x.... 0x....      LDR.W    R1,??DataTable16_6
   \   00000236   0x6448             STR      R0,[R1, #+68]
   \   00000238   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   0000023C   0x.... 0x....      LDR.W    R1,??DataTable16_10
   \   00000240   0x6248             STR      R0,[R1, #+36]
    226              
    227              /*##-4- Configure the NVIC for DMA #########################################*/ 
    228              /* NVIC configuration for DMA transfer complete interrupt (SPI3_TX) */
    229              HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 1, 1);
   \   00000242   0x2201             MOVS     R2,#+1
   \   00000244   0x2101             MOVS     R1,#+1
   \   00000246   0x200D             MOVS     R0,#+13
   \   00000248   0x.... 0x....      BL       HAL_NVIC_SetPriority
    230              HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
   \   0000024C   0x200D             MOVS     R0,#+13
   \   0000024E   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    231              
    232              /* NVIC configuration for DMA transfer complete interrupt (SPI3_RX) */
    233              HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 1, 0);
   \   00000252   0x2200             MOVS     R2,#+0
   \   00000254   0x2101             MOVS     R1,#+1
   \   00000256   0x200C             MOVS     R0,#+12
   \   00000258   0x.... 0x....      BL       HAL_NVIC_SetPriority
    234              HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
   \   0000025C   0x200C             MOVS     R0,#+12
   \   0000025E   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    235              
    236            }
    237            
    238            /* Added HAP to enable SPI since Optimized SPI Transmit, Receive and Transmit/Receive APIs are 
    239            used for BlueNRG, BlueNRG-MS SPI communication in order to get the best performance in terms of 
    240            BLE throughput */
    241            __HAL_SPI_ENABLE(&SpiHandle);
   \                     ??SdkEvalSpiInit_3: (+1)
   \   00000262   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   00000266   0x6800             LDR      R0,[R0, #+0]
   \   00000268   0x6800             LDR      R0,[R0, #+0]
   \   0000026A   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   0000026E   0x.... 0x....      LDR.W    R1,??DataTable16_6
   \   00000272   0x6809             LDR      R1,[R1, #+0]
   \   00000274   0x6008             STR      R0,[R1, #+0]
    242            
    243            return(0);
   \   00000276   0x2000             MOVS     R0,#+0
   \                     ??SdkEvalSpiInit_1: (+1)
   \   00000278   0xB007             ADD      SP,SP,#+28
   \   0000027A   0xBD30             POP      {R4,R5,PC}       ;; return
    244          }/* end SdkEvalSpiInit() */
    245          
    246          /**
    247          * @brief  Set GPIO pin in Hi-Z state.
    248          * @param  GPIOx: GPIO port
    249          *         GPIO_Pin: GPIo pin        
    250          * @retval None
    251          */

   \                                 In section .text, align 2, keep-with-next
    252          static void GPIO_SetHiZ(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
    253          {
   \                     GPIO_SetHiZ: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    254            GPIO_InitTypeDef  GPIO_InitStruct;
    255            
    256            /* Configure GPIO pin as output open drain HI-Z state */
    257            GPIO_InitStruct.Pin = GPIO_Pin;
   \   00000008   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000000A   0x9500             STR      R5,[SP, #+0]
    258            GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x9001             STR      R0,[SP, #+4]
    259            GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x9002             STR      R0,[SP, #+8]
    260            GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x9003             STR      R0,[SP, #+12]
    261            GPIO_InitStruct.Alternate = 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x9004             STR      R0,[SP, #+16]
    262            HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);	
   \   0000001C   0x4669             MOV      R1,SP
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x.... 0x....      BL       HAL_GPIO_Init
    263            HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
   \   00000024   0x2201             MOVS     R2,#+1
   \   00000026   0x0029             MOVS     R1,R5
   \   00000028   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x.... 0x....      BL       HAL_GPIO_WritePin
    264            
    265          }/* end GPIO_SetHiZ() */
   \   00000030   0xB005             ADD      SP,SP,#+20
   \   00000032   0xBD30             POP      {R4,R5,PC}       ;; return
    266          
    267          
    268          /**
    269          * @brief  Disable SPI
    270          * @param  None
    271          * @retval None
    272          */

   \                                 In section .text, align 2, keep-with-next
    273          void SdkEvalSpiDisable(void)
    274          {
   \                     SdkEvalSpiDisable: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    275            BNRG_SPI_CLK_DISABLE(); /*!< SPI disable */ 
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable16_1  ;; 0x40023820
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF430 0x5080      BICS     R0,R0,#0x1000
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable16_1  ;; 0x40023820
   \   00000010   0x6008             STR      R0,[R1, #+0]
    276            
    277            /* Configure pins as output open drain HI-Z state */
    278            GPIO_SetHiZ(BNRG_SPI_SCLK_PORT, BNRG_SPI_SCLK_PIN);
   \   00000012   0x2108             MOVS     R1,#+8
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable16_3  ;; 0x40020400
   \   00000018   0x.... 0x....      BL       GPIO_SetHiZ
    279            GPIO_SetHiZ(BNRG_SPI_MOSI_PORT, BNRG_SPI_MOSI_PIN);
   \   0000001C   0x2180             MOVS     R1,#+128
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable16_2  ;; 0x40020000
   \   00000022   0x.... 0x....      BL       GPIO_SetHiZ
    280            GPIO_SetHiZ(BNRG_SPI_MISO_PORT, BNRG_SPI_MISO_PIN);
   \   00000026   0x2140             MOVS     R1,#+64
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable16_2  ;; 0x40020000
   \   0000002C   0x.... 0x....      BL       GPIO_SetHiZ
    281            GPIO_SetHiZ(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN);
   \   00000030   0x2102             MOVS     R1,#+2
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable16_2  ;; 0x40020000
   \   00000036   0x.... 0x....      BL       GPIO_SetHiZ
    282            HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);
   \   0000003A   0x2006             MOVS     R0,#+6
   \   0000003C   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
    283            
    284          }/* end SdkEvalSpiDisable() */
   \   00000040   0xBD01             POP      {R0,PC}          ;; return
    285          
    286          /**
    287          * @brief  Reset the BlueNRG
    288          * @param  None
    289          * @retval None
    290          */

   \                                 In section .text, align 2, keep-with-next
    291          void BlueNRG_RST(void)
    292          {   
   \                     BlueNRG_RST: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    293            HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0xF44F 0x7180      MOV      R1,#+256
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable16_2  ;; 0x40020000
   \   0000000C   0x.... 0x....      BL       HAL_GPIO_WritePin
    294            /* 5 ms delay */
    295            HAL_Delay(5);
   \   00000010   0x2005             MOVS     R0,#+5
   \   00000012   0x.... 0x....      BL       HAL_Delay
    296            HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_SET);
   \   00000016   0x2201             MOVS     R2,#+1
   \   00000018   0xF44F 0x7180      MOV      R1,#+256
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable16_2  ;; 0x40020000
   \   00000020   0x.... 0x....      BL       HAL_GPIO_WritePin
    297            HAL_Delay(5);
   \   00000024   0x2005             MOVS     R0,#+5
   \   00000026   0x.... 0x....      BL       HAL_Delay
    298            
    299            __NOP();
   \   0000002A   0xBF00             Nop      
    300          }/* end BlueNRG_RST() */
   \   0000002C   0xBD01             POP      {R0,PC}          ;; return
    301          
    302          /**
    303          * @brief  Power down the BlueNRG (reset).
    304          * @param  None
    305          * @retval None
    306          */

   \                                 In section .text, align 2, keep-with-next
    307          void BlueNRG_Power_Down(void)
    308          {
   \                     BlueNRG_Power_Down: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    309            HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_RESET);
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0xF44F 0x7180      MOV      R1,#+256
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable16_2  ;; 0x40020000
   \   0000000C   0x.... 0x....      BL       HAL_GPIO_WritePin
    310            
    311          }/* end BlueNRG_Power_Down() */
   \   00000010   0xBD01             POP      {R0,PC}          ;; return
    312          
    313          /**
    314          * @brief  Power up the BlueNRG (release reset).
    315          * @param  None
    316          * @retval None
    317          */

   \                                 In section .text, align 2, keep-with-next
    318          void BlueNRG_Power_Up(void)
    319          {
   \                     BlueNRG_Power_Up: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    320            HAL_GPIO_WritePin(BNRG_SPI_RESET_PORT, BNRG_SPI_RESET_PIN, GPIO_PIN_SET);
   \   00000002   0x2201             MOVS     R2,#+1
   \   00000004   0xF44F 0x7180      MOV      R1,#+256
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable16_2  ;; 0x40020000
   \   0000000C   0x.... 0x....      BL       HAL_GPIO_WritePin
    321            
    322            HAL_Delay(5);
   \   00000010   0x2005             MOVS     R0,#+5
   \   00000012   0x.... 0x....      BL       HAL_Delay
    323          }/* end BlueNRG_Power_Up() */
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
    324          
    325          /**
    326          * @brief  Reports if the BlueNRG has data for the host micro.
    327          * @param  None
    328          * @retval TRUE if data are present, FALSE otherwise
    329          */

   \                                 In section .text, align 2, keep-with-next
    330          uint8_t BlueNRG_DataPresent(void)
    331          {
   \                     BlueNRG_DataPresent: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    332            if (HAL_GPIO_ReadPin(BNRG_SPI_IRQ_PORT, BNRG_SPI_IRQ_PIN) == GPIO_PIN_SET)  
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable16_2  ;; 0x40020000
   \   00000008   0x.... 0x....      BL       HAL_GPIO_ReadPin
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xD101             BNE.N    ??BlueNRG_DataPresent_0
    333              return TRUE;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xE000             B.N      ??BlueNRG_DataPresent_1
    334            else  
    335              return FALSE;
   \                     ??BlueNRG_DataPresent_0: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \                     ??BlueNRG_DataPresent_1: (+1)
   \   00000016   0xBD02             POP      {R1,PC}          ;; return
    336          } /* end BlueNRG_DataPresent() */
    337          
    338          /**
    339          * @brief  Disable SPI IRQ
    340          * @param  None
    341          * @retval None
    342          */

   \                                 In section .text, align 2, keep-with-next
    343          void Disable_SPI_IRQ(void)
    344          {  
   \                     Disable_SPI_IRQ: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    345            HAL_NVIC_DisableIRQ(BNRG_SPI_EXTI_IRQn);  
   \   00000002   0x2006             MOVS     R0,#+6
   \   00000004   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
    346          }/* end Disable_SPI_IRQ() */
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    347          
    348          /**
    349          * @brief  Enable SPI IRQ
    350          * @param  None
    351          * @retval None
    352          */

   \                                 In section .text, align 2, keep-with-next
    353          void Enable_SPI_IRQ(void)
    354          {  
   \                     Enable_SPI_IRQ: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    355            HAL_NVIC_EnableIRQ(BNRG_SPI_EXTI_IRQn);
   \   00000002   0x2006             MOVS     R0,#+6
   \   00000004   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    356          }/* end Enable_SPI_IRQ() */
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    357          
    358          /**
    359          * @brief  Clear Pending SPI IRQ
    360          * @param  None
    361          * @retval None
    362          */

   \                                 In section .text, align 2, keep-with-next
    363          void Clear_SPI_IRQ(void)
    364          {
   \                     Clear_SPI_IRQ: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    365            HAL_NVIC_ClearPendingIRQ(BNRG_SPI_EXTI_IRQn);
   \   00000002   0x2006             MOVS     R0,#+6
   \   00000004   0x.... 0x....      BL       HAL_NVIC_ClearPendingIRQ
    366          }/* end Clear_SPI_IRQ() */
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    367          
    368          /**
    369          * @brief  Clear Exti line for SPI IRQ
    370          * @param  None
    371          * @retval None
    372          */

   \                                 In section .text, align 2, keep-with-next
    373          void Clear_SPI_EXTI_Flag()
    374          {
    375            __HAL_GPIO_EXTI_CLEAR_IT(BNRG_SPI_EXTI_PIN);  
   \                     Clear_SPI_EXTI_Flag: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable16_11  ;; 0x40010414
   \   00000006   0x6008             STR      R0,[R1, #+0]
    376          }/* end Clear_SPI_EXTI_Flag() */
   \   00000008   0x4770             BX       LR               ;; return
    377          

   \                                 In section .text, align 2, keep-with-next
    378          int32_t BlueNRG_SPI_Write_Raw(uint8_t* data1, uint8_t Nb_bytes1)
    379          {  
   \                     BlueNRG_SPI_Write_Raw: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB0C5             SUB      SP,SP,#+276
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    380            uint32_t i;
    381            int32_t result = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    382            
    383            unsigned char header_master[5] = {0x0a, 0x00, 0x00, 0x00, 0x00};
   \   0000000A   0xA803             ADD      R0,SP,#+12
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable16_12
   \   00000010   0xE9D1 0x2300      LDRD     R2,R3,[R1, #+0]
   \   00000014   0xE9C0 0x2300      STRD     R2,R3,[R0, #+0]
    384            unsigned char header_slave[5]  = {0xaa, 0x00, 0x00, 0x00, 0x00};
   \   00000018   0xA801             ADD      R0,SP,#+4
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable16_13
   \   0000001E   0xE9D1 0x2300      LDRD     R2,R3,[R1, #+0]
   \   00000022   0xE9C0 0x2300      STRD     R2,R3,[R0, #+0]
    385            unsigned char read_char_buf[MAX_BUFFER_SIZE];
    386            
    387            HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0x2102             MOVS     R1,#+2
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable16_2  ;; 0x40020000
   \   0000002E   0x.... 0x....      BL       HAL_GPIO_WritePin
    388            
    389            /* Read the header */  
    390            HAL_SPI_TransmitReceive(&SpiHandle,header_master, header_slave, HEADER_SIZE, TIMEOUT_DURATION);
   \   00000032   0x200F             MOVS     R0,#+15
   \   00000034   0x9000             STR      R0,[SP, #+0]
   \   00000036   0x2305             MOVS     R3,#+5
   \   00000038   0xAA01             ADD      R2,SP,#+4
   \   0000003A   0xA903             ADD      R1,SP,#+12
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   00000040   0x.... 0x....      BL       HAL_SPI_TransmitReceive
    391            
    392            //  if (header_slave[0] == 0x02) {
    393            // SPI is ready
    394            if (header_slave[1] >= Nb_bytes1) {
   \   00000044   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000048   0x0029             MOVS     R1,R5
   \   0000004A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000004C   0x4288             CMP      R0,R1
   \   0000004E   0xD310             BCC.N    ??BlueNRG_SPI_Write_Raw_0
    395              //  Buffer is big enough
    396              for (i = 0; i < Nb_bytes1; i++) { 
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x0006             MOVS     R6,R0
   \                     ??BlueNRG_SPI_Write_Raw_1: (+1)
   \   00000054   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000056   0x42AE             CMP      R6,R5
   \   00000058   0xD20E             BCS.N    ??BlueNRG_SPI_Write_Raw_2
    397                HAL_SPI_TransmitReceive(&SpiHandle, data1 + i, read_char_buf, 1, TIMEOUT_DURATION);
   \   0000005A   0x200F             MOVS     R0,#+15
   \   0000005C   0x9000             STR      R0,[SP, #+0]
   \   0000005E   0x2301             MOVS     R3,#+1
   \   00000060   0xAA05             ADD      R2,SP,#+20
   \   00000062   0xEB04 0x0106      ADD      R1,R4,R6
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable16_6
   \   0000006A   0x.... 0x....      BL       HAL_SPI_TransmitReceive
    398              }
   \   0000006E   0x1C76             ADDS     R6,R6,#+1
   \   00000070   0xE7F0             B.N      ??BlueNRG_SPI_Write_Raw_1
    399            } else {
    400              // Buffer is too small
    401              result = -2;
   \                     ??BlueNRG_SPI_Write_Raw_0: (+1)
   \   00000072   0xF07F 0x0001      MVNS     R0,#+1
   \   00000076   0x0007             MOVS     R7,R0
    402            }
    403            //  } else {
    404            //    // SPI is not ready
    405            //    result = -1;
    406            //  }
    407            
    408            // Release CS line.
    409            HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
   \                     ??BlueNRG_SPI_Write_Raw_2: (+1)
   \   00000078   0x2201             MOVS     R2,#+1
   \   0000007A   0x2102             MOVS     R1,#+2
   \   0000007C   0x....             LDR.N    R0,??DataTable16_2  ;; 0x40020000
   \   0000007E   0x.... 0x....      BL       HAL_GPIO_WritePin
    410            
    411            return result;
   \   00000082   0x0038             MOVS     R0,R7
   \   00000084   0xB045             ADD      SP,SP,#+276
   \   00000086   0xBDF0             POP      {R4-R7,PC}       ;; return
    412          }
    413          
    414          /**
    415          * @brief  Activate internal bootloader using pin.
    416          * @param  None
    417          * @retval None
    418          */

   \                                 In section .text, align 2, keep-with-next
    419          void BlueNRG_HW_Bootloader(void)
    420          {
   \                     BlueNRG_HW_Bootloader: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    421            SdkEvalSpiMisoPinInit();
   \   00000002   0x.... 0x....      BL       SdkEvalSpiMisoPinInit
    422            // high MISO pin and reset BlueNRG-1
    423            SdkEvalSpiDtmMisoPinState(ENABLE);
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       SdkEvalSpiDtmMisoPinState
    424            BlueNRG_RST();
   \   0000000C   0x.... 0x....      BL       BlueNRG_RST
    425          }
   \   00000010   0xBD01             POP      {R0,PC}          ;; return
    426          
    427          /**
    428          * @brief  Read from BlueNRG SPI buffer and store data into local buffer 
    429          * @param  buffer:    buffer where data from SPI are stored
    430          *         buff_size: buffer size
    431          * @retval number of read bytes
    432          */

   \                                 In section .text, align 2, keep-with-next
    433          uint8_t BlueNRG_SPI_Read_All(uint8_t *buffer, uint8_t buff_size)
    434          {
   \                     BlueNRG_SPI_Read_All: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    435            uint16_t byte_count;
    436            uint8_t len = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    437            
    438            const uint8_t header_master[5] = {0x0b, 0x00, 0x00, 0x00, 0x00};
   \   0000000A   0xA802             ADD      R0,SP,#+8
   \   0000000C   0x....             LDR.N    R1,??DataTable16_14
   \   0000000E   0xE9D1 0x2300      LDRD     R2,R3,[R1, #+0]
   \   00000012   0xE9C0 0x2300      STRD     R2,R3,[R0, #+0]
    439            uint8_t header_slave[5];
    440            
    441            __disable_irq();
   \   00000016   0xB672             CPSID    I
    442            
    443            HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0x....             LDR.N    R0,??DataTable16_2  ;; 0x40020000
   \   0000001E   0x.... 0x....      BL       HAL_GPIO_WritePin
    444            
    445            /* Read the header */
    446            HAL_SPI_TransmitReceive_Opt(&SpiHandle, header_master, header_slave, HEADER_SIZE);
   \   00000022   0x2305             MOVS     R3,#+5
   \   00000024   0x466A             MOV      R2,SP
   \   00000026   0xA902             ADD      R1,SP,#+8
   \   00000028   0x....             LDR.N    R0,??DataTable16_6
   \   0000002A   0x.... 0x....      BL       HAL_SPI_TransmitReceive_Opt
    447            
    448            byte_count = ((uint16_t)header_slave[4])<<8 | (uint16_t)header_slave[3];
   \   0000002E   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000032   0xF89D 0x1003      LDRB     R1,[SP, #+3]
   \   00000036   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   0000003A   0x0006             MOVS     R6,R0
    449            
    450            if (byte_count > 0) {
   \   0000003C   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000003E   0x2E00             CMP      R6,#+0
   \   00000040   0xD010             BEQ.N    ??BlueNRG_SPI_Read_All_0
    451              if (byte_count > buff_size)
   \   00000042   0x0028             MOVS     R0,R5
   \   00000044   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   0x0031             MOVS     R1,R6
   \   00000048   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000004C   0x4288             CMP      R0,R1
   \   0000004E   0xD201             BCS.N    ??BlueNRG_SPI_Read_All_1
    452                byte_count = buff_size;
   \   00000050   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000052   0x002E             MOVS     R6,R5
    453              
    454              HAL_SPI_Receive_Opt(&SpiHandle, buffer, byte_count);
   \                     ??BlueNRG_SPI_Read_All_1: (+1)
   \   00000054   0x0032             MOVS     R2,R6
   \   00000056   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000058   0x0021             MOVS     R1,R4
   \   0000005A   0x....             LDR.N    R0,??DataTable16_6
   \   0000005C   0x.... 0x....      BL       HAL_SPI_Receive_Opt
    455              
    456              len = byte_count;
   \   00000060   0x0030             MOVS     R0,R6
   \   00000062   0x0007             MOVS     R7,R0
    457            }
    458            HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
   \                     ??BlueNRG_SPI_Read_All_0: (+1)
   \   00000064   0x2201             MOVS     R2,#+1
   \   00000066   0x2102             MOVS     R1,#+2
   \   00000068   0x....             LDR.N    R0,??DataTable16_2  ;; 0x40020000
   \   0000006A   0x.... 0x....      BL       HAL_GPIO_WritePin
    459            
    460            __enable_irq();
   \   0000006E   0xB662             CPSIE    I
    461            
    462            return len;
   \   00000070   0x0038             MOVS     R0,R7
   \   00000072   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000074   0xB005             ADD      SP,SP,#+20
   \   00000076   0xBDF0             POP      {R4-R7,PC}       ;; return
    463            
    464          }/* end BlueNRG_SPI_Read_All() */
    465          
    466          
    467          /**
    468          * @brief  Write data from local buffer to SPI
    469          * @param  data1:    first data buffer to be written, used to send header of higher
    470          *                   level protocol
    471          *         data2:    second data buffer to be written, used to send payload of higher
    472          *                   level protocol
    473          *         Nb_bytes1: size of header to be written
    474          *         Nb_bytes2: size of payload to be written
    475          * @retval Number of payload bytes that has been sent. If 0, all bytes in the header has been
    476          *         written.
    477          */

   \                                 In section .text, align 2, keep-with-next
    478          int16_t BlueNRG_SPI_Write_Bridge(uint8_t* data, uint16_t Nb_bytes)
    479          {  
   \                     BlueNRG_SPI_Write_Bridge: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    480            int16_t result = 0;
   \   00000008   0x2600             MOVS     R6,#+0
    481            uint16_t rx_bytes;
    482            struct timer t;
    483            
    484            const uint8_t header_master[5] = {0x0A, 0x00, 0x00, 0x00, 0x00};
   \   0000000A   0xA802             ADD      R0,SP,#+8
   \   0000000C   0x....             LDR.N    R1,??DataTable16_15
   \   0000000E   0xE9D1 0x2300      LDRD     R2,R3,[R1, #+0]
   \   00000012   0xE9C0 0x2300      STRD     R2,R3,[R0, #+0]
    485            uint8_t header_slave[5]  = {0x00};
   \   00000016   0x4668             MOV      R0,SP
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x2200             MOVS     R2,#+0
   \   0000001C   0xE9C0 0x1200      STRD     R1,R2,[R0, #+0]
    486            
    487            Timer_Set(&t, CLOCK_SECOND/10);
   \   00000020   0x....             LDR.N    R0,??DataTable16_16
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x210A             MOVS     R1,#+10
   \   00000026   0xFBB0 0xF1F1      UDIV     R1,R0,R1
   \   0000002A   0xA804             ADD      R0,SP,#+16
   \   0000002C   0x.... 0x....      BL       Timer_Set
    488            
    489            HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
   \   00000030   0x2200             MOVS     R2,#+0
   \   00000032   0x2102             MOVS     R1,#+2
   \   00000034   0x....             LDR.N    R0,??DataTable16_2  ;; 0x40020000
   \   00000036   0x.... 0x....      BL       HAL_GPIO_WritePin
    490            
    491            while(SdkEvalSPI_Irq_Pin() == GPIO_PIN_RESET) {
   \                     ??BlueNRG_SPI_Write_Bridge_0: (+1)
   \   0000003A   0x.... 0x....      BL       SdkEvalSPI_Irq_Pin
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD108             BNE.N    ??BlueNRG_SPI_Write_Bridge_1
    492              if(Timer_Expired(&t)){
   \   00000042   0xA804             ADD      R0,SP,#+16
   \   00000044   0x.... 0x....      BL       Timer_Expired
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD0F6             BEQ.N    ??BlueNRG_SPI_Write_Bridge_0
    493                result = -2;
   \   0000004C   0xF07F 0x0001      MVNS     R0,#+1
   \   00000050   0x0006             MOVS     R6,R0
    494                goto failed;
   \   00000052   0xE01F             B.N      ??BlueNRG_SPI_Write_Bridge_2
    495              }
    496            }
    497            
    498            HAL_SPI_TransmitReceive_Opt(&SpiHandle, header_master, header_slave, HEADER_SIZE);
   \                     ??BlueNRG_SPI_Write_Bridge_1: (+1)
   \   00000054   0x2305             MOVS     R3,#+5
   \   00000056   0x466A             MOV      R2,SP
   \   00000058   0xA902             ADD      R1,SP,#+8
   \   0000005A   0x....             LDR.N    R0,??DataTable16_6
   \   0000005C   0x.... 0x....      BL       HAL_SPI_TransmitReceive_Opt
    499            
    500            rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
   \   00000060   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000064   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   00000068   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   0000006C   0x0007             MOVS     R7,R0
    501            
    502            if(rx_bytes < Nb_bytes){
   \   0000006E   0x0038             MOVS     R0,R7
   \   00000070   0x0029             MOVS     R1,R5
   \   00000072   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000074   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000076   0x4288             CMP      R0,R1
   \   00000078   0xD203             BCS.N    ??BlueNRG_SPI_Write_Bridge_3
    503              result = -2;
   \   0000007A   0xF07F 0x0001      MVNS     R0,#+1
   \   0000007E   0x0006             MOVS     R6,R0
    504              goto failed;   
   \   00000080   0xE008             B.N      ??BlueNRG_SPI_Write_Bridge_2
    505            }
    506            
    507            HAL_SPI_Transmit_Opt(&SpiHandle, data, Nb_bytes);
   \                     ??BlueNRG_SPI_Write_Bridge_3: (+1)
   \   00000082   0x002A             MOVS     R2,R5
   \   00000084   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000086   0x0021             MOVS     R1,R4
   \   00000088   0x....             LDR.N    R0,??DataTable16_6
   \   0000008A   0x.... 0x....      BL       HAL_SPI_Transmit_Opt
    508            
    509            result = Nb_bytes;
   \   0000008E   0x0028             MOVS     R0,R5
   \   00000090   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000092   0x0006             MOVS     R6,R0
    510            
    511          failed:
    512            HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
   \                     ??BlueNRG_SPI_Write_Bridge_2: (+1)
   \   00000094   0x2201             MOVS     R2,#+1
   \   00000096   0x2102             MOVS     R1,#+2
   \   00000098   0x....             LDR.N    R0,??DataTable16_2  ;; 0x40020000
   \   0000009A   0x.... 0x....      BL       HAL_GPIO_WritePin
    513            
    514            return result;
   \   0000009E   0x0030             MOVS     R0,R6
   \   000000A0   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000A2   0xB007             ADD      SP,SP,#+28
   \   000000A4   0xBDF0             POP      {R4-R7,PC}       ;; return
    515          }/* end BlueNRG_SPI_Write() */
    516          
    517          /**
    518          * @brief  Write data from local buffer to SPI
    519          * @param  data1:    first data buffer to be written, used to send header of higher
    520          *                   level protocol
    521          *         data2:    second data buffer to be written, used to send payload of higher
    522          *                   level protocol
    523          *         Nb_bytes1: size of header to be written
    524          *         Nb_bytes2: size of payload to be written
    525          * @retval Number of payload bytes that has been sent. If 0, all bytes in the header has been
    526          *         written.
    527          */
    528          #define SPI_DMA_BUFFER_SIZE (255+4+5)

   \                                 In section .bss, align 4
    529            static uint8_t SpiDmaRxBuffer[SPI_DMA_BUFFER_SIZE];
   \                     SpiDmaRxBuffer:
   \   00000000                      DS8 264
    530          

   \                                 In section .text, align 2, keep-with-next
    531          int16_t BlueNRG_SPI_Read_Bridge(void)
    532          {  
   \                     BlueNRG_SPI_Read_Bridge: (+1)
   \   00000000   0xB57F             PUSH     {R0-R6,LR}
    533            int16_t result = -2;
   \   00000002   0xF07F 0x0401      MVNS     R4,#+1
    534            uint16_t byte_count =0;
   \   00000006   0x2500             MOVS     R5,#+0
    535            
    536            const uint8_t header_master[5] = {0x0B, 0x00, 0x00, 0x00, 0x00};
   \   00000008   0xA802             ADD      R0,SP,#+8
   \   0000000A   0x....             LDR.N    R1,??DataTable16_17
   \   0000000C   0xE9D1 0x2300      LDRD     R2,R3,[R1, #+0]
   \   00000010   0xE9C0 0x2300      STRD     R2,R3,[R0, #+0]
    537            uint8_t header_slave[5]  = {0x00};
   \   00000014   0x4668             MOV      R0,SP
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0xE9C0 0x1200      STRD     R1,R2,[R0, #+0]
    538            
    539            if(SdkEvalSPI_Irq_Pin() == GPIO_PIN_RESET) {
   \   0000001E   0x.... 0x....      BL       SdkEvalSPI_Irq_Pin
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD039             BEQ.N    ??BlueNRG_SPI_Read_Bridge_0
    540              goto failed;
    541            }
    542            
    543            __disable_irq();
   \                     ??BlueNRG_SPI_Read_Bridge_1: (+1)
   \   00000026   0xB672             CPSID    I
    544            
    545            HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
   \   00000028   0x2200             MOVS     R2,#+0
   \   0000002A   0x2102             MOVS     R1,#+2
   \   0000002C   0x....             LDR.N    R0,??DataTable16_2  ;; 0x40020000
   \   0000002E   0x.... 0x....      BL       HAL_GPIO_WritePin
    546            
    547            
    548            HAL_SPI_TransmitReceive_Opt(&SpiHandle, header_master, header_slave, HEADER_SIZE);
   \   00000032   0x2305             MOVS     R3,#+5
   \   00000034   0x466A             MOV      R2,SP
   \   00000036   0xA902             ADD      R1,SP,#+8
   \   00000038   0x....             LDR.N    R0,??DataTable16_6
   \   0000003A   0x.... 0x....      BL       HAL_SPI_TransmitReceive_Opt
    549            
    550            byte_count = ((uint16_t)header_slave[4])<<8 | (uint16_t)header_slave[3];
   \   0000003E   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000042   0xF89D 0x1003      LDRB     R1,[SP, #+3]
   \   00000046   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   0000004A   0x0005             MOVS     R5,R0
    551            
    552            if (byte_count > 0) {
   \   0000004C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004E   0x2D00             CMP      R5,#+0
   \   00000050   0xD00C             BEQ.N    ??BlueNRG_SPI_Read_Bridge_2
    553              if (byte_count > SPI_DMA_BUFFER_SIZE)
   \   00000052   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000054   0xF5B5 0x7F84      CMP      R5,#+264
   \   00000058   0xDD02             BLE.N    ??BlueNRG_SPI_Read_Bridge_3
    554                byte_count = SPI_DMA_BUFFER_SIZE;
   \   0000005A   0xF44F 0x7084      MOV      R0,#+264
   \   0000005E   0x0005             MOVS     R5,R0
    555              
    556              HAL_SPI_Receive_Opt(&SpiHandle, SpiDmaRxBuffer, byte_count);
   \                     ??BlueNRG_SPI_Read_Bridge_3: (+1)
   \   00000060   0x002A             MOVS     R2,R5
   \   00000062   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000064   0x....             LDR.N    R1,??DataTable16_18
   \   00000066   0x....             LDR.N    R0,??DataTable16_6
   \   00000068   0x.... 0x....      BL       HAL_SPI_Receive_Opt
    557              
    558            }
    559            result = byte_count;
   \                     ??BlueNRG_SPI_Read_Bridge_2: (+1)
   \   0000006C   0x0028             MOVS     R0,R5
   \   0000006E   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   00000070   0x0004             MOVS     R4,R0
    560            
    561            
    562          //  HAL_NVIC_DisableIRQ(UART_IRQ);
    563            for(uint16_t i = 0; i< byte_count;i++)
   \   00000072   0x2600             MOVS     R6,#+0
   \                     ??BlueNRG_SPI_Read_Bridge_4: (+1)
   \   00000074   0x0030             MOVS     R0,R6
   \   00000076   0x0029             MOVS     R1,R5
   \   00000078   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000007A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000007C   0x4288             CMP      R0,R1
   \   0000007E   0xD206             BCS.N    ??BlueNRG_SPI_Read_Bridge_5
    564              putchar(SpiDmaRxBuffer[i]);
   \   00000080   0x....             LDR.N    R0,??DataTable16_18
   \   00000082   0xB2B6             UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000084   0x5D80             LDRB     R0,[R0, R6]
   \   00000086   0x.... 0x....      BL       putchar
   \   0000008A   0x1C76             ADDS     R6,R6,#+1
   \   0000008C   0xE7F2             B.N      ??BlueNRG_SPI_Read_Bridge_4
    565          //  HAL_NVIC_EnableIRQ(UART_IRQ);
    566            
    567            __enable_irq();
   \                     ??BlueNRG_SPI_Read_Bridge_5: (+1)
   \   0000008E   0xB662             CPSIE    I
    568          
    569            HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
   \   00000090   0x2201             MOVS     R2,#+1
   \   00000092   0x2102             MOVS     R1,#+2
   \   00000094   0x....             LDR.N    R0,??DataTable16_2  ;; 0x40020000
   \   00000096   0x.... 0x....      BL       HAL_GPIO_WritePin
    570            
    571          failed:  
    572            
    573            return result;
   \                     ??BlueNRG_SPI_Read_Bridge_0: (+1)
   \   0000009A   0x0020             MOVS     R0,R4
   \   0000009C   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   0000009E   0xB004             ADD      SP,SP,#+16
   \   000000A0   0xBD70             POP      {R4-R6,PC}       ;; return
    574          }/* end BlueNRG_SPI_Write() */
    575          
    576          /**
    577          * @brief  Write data from local buffer to SPI
    578          * @param  data1:    first data buffer to be written, used to send header of higher
    579          *                   level protocol
    580          *         data2:    second data buffer to be written, used to send payload of higher
    581          *                   level protocol
    582          *         Nb_bytes1: size of header to be written
    583          *         Nb_bytes2: size of payload to be written
    584          * @retval Number of payload bytes that has been sent. If 0, all bytes in the header has been
    585          *         written.
    586          */

   \                                 In section .text, align 2, keep-with-next
    587          int16_t BlueNRG_SPI_Write(uint8_t* data1, uint8_t* data2, uint16_t Nb_bytes1, uint16_t Nb_bytes2)
    588          {  
   \                     BlueNRG_SPI_Write: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
    589            int16_t result = 0;
   \   0000000E   0xF05F 0x0800      MOVS     R8,#+0
    590            uint16_t tx_bytes;
    591            uint16_t rx_bytes;
    592            struct timer t;
    593            
    594            const uint8_t header_master[5] = {0x0a, 0x00, 0x00, 0x00, 0x00};
   \   00000012   0xA802             ADD      R0,SP,#+8
   \   00000014   0x....             LDR.N    R1,??DataTable16_19
   \   00000016   0xE9D1 0x2300      LDRD     R2,R3,[R1, #+0]
   \   0000001A   0xE9C0 0x2300      STRD     R2,R3,[R0, #+0]
    595            uint8_t header_slave[5]  = {0x00};
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x2200             MOVS     R2,#+0
   \   00000024   0xE9C0 0x1200      STRD     R1,R2,[R0, #+0]
    596            
    597            Timer_Set(&t, CLOCK_SECOND/10);
   \   00000028   0x....             LDR.N    R0,??DataTable16_16
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x210A             MOVS     R1,#+10
   \   0000002E   0xFBB0 0xF1F1      UDIV     R1,R0,R1
   \   00000032   0xA804             ADD      R0,SP,#+16
   \   00000034   0x.... 0x....      BL       Timer_Set
    598            
    599            HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_RESET);
   \   00000038   0x2200             MOVS     R2,#+0
   \   0000003A   0x2102             MOVS     R1,#+2
   \   0000003C   0x....             LDR.N    R0,??DataTable16_2  ;; 0x40020000
   \   0000003E   0x.... 0x....      BL       HAL_GPIO_WritePin
    600            
    601            while(SdkEvalSPI_Irq_Pin() == GPIO_PIN_RESET) {
   \                     ??BlueNRG_SPI_Write_0: (+1)
   \   00000042   0x.... 0x....      BL       SdkEvalSPI_Irq_Pin
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD108             BNE.N    ??BlueNRG_SPI_Write_1
    602              if(Timer_Expired(&t)){
   \   0000004A   0xA804             ADD      R0,SP,#+16
   \   0000004C   0x.... 0x....      BL       Timer_Expired
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD0F6             BEQ.N    ??BlueNRG_SPI_Write_0
    603                result = -2;
   \   00000054   0xF07F 0x0001      MVNS     R0,#+1
   \   00000058   0x4680             MOV      R8,R0
    604                goto failed;
   \   0000005A   0xE030             B.N      ??BlueNRG_SPI_Write_2
    605              }
    606            }
    607            
    608            HAL_SPI_TransmitReceive_Opt(&SpiHandle, header_master, header_slave, HEADER_SIZE);
   \                     ??BlueNRG_SPI_Write_1: (+1)
   \   0000005C   0x2305             MOVS     R3,#+5
   \   0000005E   0x466A             MOV      R2,SP
   \   00000060   0xA902             ADD      R1,SP,#+8
   \   00000062   0x....             LDR.N    R0,??DataTable16_6
   \   00000064   0x.... 0x....      BL       HAL_SPI_TransmitReceive_Opt
    609            
    610            rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
   \   00000068   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   0000006C   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   00000070   0xEA51 0x2000      ORRS     R0,R1,R0, LSL #+8
   \   00000074   0x4682             MOV      R10,R0
    611            
    612            if(rx_bytes < Nb_bytes1){
   \   00000076   0x4650             MOV      R0,R10
   \   00000078   0x0031             MOVS     R1,R6
   \   0000007A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000007C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000007E   0x4288             CMP      R0,R1
   \   00000080   0xD203             BCS.N    ??BlueNRG_SPI_Write_3
    613              result = -2;
   \   00000082   0xF07F 0x0001      MVNS     R0,#+1
   \   00000086   0x4680             MOV      R8,R0
    614              goto failed;
   \   00000088   0xE019             B.N      ??BlueNRG_SPI_Write_2
    615            }
    616            
    617            HAL_SPI_Transmit_Opt(&SpiHandle, data1, Nb_bytes1);
   \                     ??BlueNRG_SPI_Write_3: (+1)
   \   0000008A   0x0032             MOVS     R2,R6
   \   0000008C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000008E   0x0021             MOVS     R1,R4
   \   00000090   0x....             LDR.N    R0,??DataTable16_6
   \   00000092   0x.... 0x....      BL       HAL_SPI_Transmit_Opt
    618            
    619            rx_bytes -= Nb_bytes1;
   \   00000096   0xEBBA 0x0A06      SUBS     R10,R10,R6
    620            
    621            if(Nb_bytes2 > rx_bytes){
   \   0000009A   0x4650             MOV      R0,R10
   \   0000009C   0x0039             MOVS     R1,R7
   \   0000009E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A0   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000A2   0x4288             CMP      R0,R1
   \   000000A4   0xD201             BCS.N    ??BlueNRG_SPI_Write_4
    622              tx_bytes = rx_bytes;
   \   000000A6   0x46D1             MOV      R9,R10
   \   000000A8   0xE000             B.N      ??BlueNRG_SPI_Write_5
    623            }
    624            else{
    625              tx_bytes = Nb_bytes2;
   \                     ??BlueNRG_SPI_Write_4: (+1)
   \   000000AA   0x46B9             MOV      R9,R7
    626            }
    627            
    628            HAL_SPI_Transmit_Opt(&SpiHandle, data2, tx_bytes);
   \                     ??BlueNRG_SPI_Write_5: (+1)
   \   000000AC   0x464A             MOV      R2,R9
   \   000000AE   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000000B0   0x0029             MOVS     R1,R5
   \   000000B2   0x....             LDR.N    R0,??DataTable16_6
   \   000000B4   0x.... 0x....      BL       HAL_SPI_Transmit_Opt
    629            
    630            result = tx_bytes;
   \   000000B8   0x4648             MOV      R0,R9
   \   000000BA   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000BC   0x4680             MOV      R8,R0
    631            
    632          failed:
    633            HAL_GPIO_WritePin(BNRG_SPI_CS_PORT, BNRG_SPI_CS_PIN, GPIO_PIN_SET);
   \                     ??BlueNRG_SPI_Write_2: (+1)
   \   000000BE   0x2201             MOVS     R2,#+1
   \   000000C0   0x2102             MOVS     R1,#+2
   \   000000C2   0x....             LDR.N    R0,??DataTable16_2  ;; 0x40020000
   \   000000C4   0x.... 0x....      BL       HAL_GPIO_WritePin
    634            
    635            return result;
   \   000000C8   0x4640             MOV      R0,R8
   \   000000CA   0xB200             SXTH     R0,R0            ;; SignExt  R0,R0,#+16,#+16
   \   000000CC   0xB006             ADD      SP,SP,#+24
   \   000000CE   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    636          }/* end BlueNRG_SPI_Write() */
    637          

   \                                 In section .text, align 2, keep-with-next
    638          void Hal_Write_Serial(const void* data1, const void* data2, uint16_t n_bytes1, uint16_t n_bytes2)
    639          {
   \                     Hal_Write_Serial: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
    640            struct timer t;
    641            int ret;
    642            uint8_t data2_offset = 0;
   \   0000000E   0xF05F 0x0900      MOVS     R9,#+0
    643            
    644            Timer_Set(&t, CLOCK_SECOND/10);
   \   00000012   0x....             LDR.N    R0,??DataTable16_16
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x210A             MOVS     R1,#+10
   \   00000018   0xFBB0 0xF1F1      UDIV     R1,R0,R1
   \   0000001C   0x4668             MOV      R0,SP
   \   0000001E   0x.... 0x....      BL       Timer_Set
    645            
    646            Disable_SPI_IRQ();
   \   00000022   0x.... 0x....      BL       Disable_SPI_IRQ
    647            
    648            while(1){
    649              ret = BlueNRG_SPI_Write((uint8_t *)data1,(uint8_t *)data2 + data2_offset, n_bytes1, n_bytes2);
   \                     ??Hal_Write_Serial_0: (+1)
   \   00000026   0x003B             MOVS     R3,R7
   \   00000028   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000002A   0x0032             MOVS     R2,R6
   \   0000002C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000002E   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000032   0xEB05 0x0109      ADD      R1,R5,R9
   \   00000036   0x0020             MOVS     R0,R4
   \   00000038   0x.... 0x....      BL       BlueNRG_SPI_Write
   \   0000003C   0x4680             MOV      R8,R0
    650              
    651              if(ret >= 0){      
   \   0000003E   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000042   0xD408             BMI.N    ??Hal_Write_Serial_1
    652                n_bytes1 = 0;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x0006             MOVS     R6,R0
    653                n_bytes2 -= ret;
   \   00000048   0xEBB7 0x0708      SUBS     R7,R7,R8
    654                data2_offset += ret;
   \   0000004C   0xEB18 0x0909      ADDS     R9,R8,R9
    655                if(n_bytes2==0)
   \   00000050   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000052   0x2F00             CMP      R7,#+0
   \   00000054   0xD004             BEQ.N    ??Hal_Write_Serial_2
    656                  break;
    657              }
    658              
    659              if(Timer_Expired(&t)){
   \                     ??Hal_Write_Serial_1: (+1)
   \   00000056   0x4668             MOV      R0,SP
   \   00000058   0x.... 0x....      BL       Timer_Expired
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD0E2             BEQ.N    ??Hal_Write_Serial_0
    660                break;
    661              }
    662            }
    663            
    664            Enable_SPI_IRQ();
   \                     ??Hal_Write_Serial_2: (+1)
   \   00000060   0x.... 0x....      BL       Enable_SPI_IRQ
    665          }
   \   00000064   0xE8BD 0x83F7      POP      {R0-R2,R4-R9,PC}  ;; return
    666          
    667          

   \                                 In section .text, align 2, keep-with-next
    668          void SdkEvalSpiMisoPinInit(void)
    669          {
   \                     SdkEvalSpiMisoPinInit: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    670            //#warning "the pin must be reset as SPI MISO pin"
    671            GPIO_InitTypeDef GPIO_InitStruct;
    672            
    673            /* Configure MOSI pin for bootloader */
    674            GPIO_InitStruct.Pin = BNRG_SPI_MOSI_PIN;
   \   00000004   0x2080             MOVS     R0,#+128
   \   00000006   0x9000             STR      R0,[SP, #+0]
    675            GPIO_InitStruct.Mode = BNRG_SPI_MOSI_UPDATER_MODE;
   \   00000008   0x2002             MOVS     R0,#+2
   \   0000000A   0x9001             STR      R0,[SP, #+4]
    676            GPIO_InitStruct.Pull = BNRG_SPI_MOSI_UPDATER_PULL;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x9002             STR      R0,[SP, #+8]
    677            GPIO_InitStruct.Speed = BNRG_SPI_MOSI_SPEED;
   \   00000010   0x2003             MOVS     R0,#+3
   \   00000012   0x9003             STR      R0,[SP, #+12]
    678            HAL_GPIO_Init(BNRG_SPI_MOSI_PORT, &GPIO_InitStruct); 
   \   00000014   0x4669             MOV      R1,SP
   \   00000016   0x....             LDR.N    R0,??DataTable16_2  ;; 0x40020000
   \   00000018   0x.... 0x....      BL       HAL_GPIO_Init
    679          }
   \   0000001C   0xB005             ADD      SP,SP,#+20
   \   0000001E   0xBD00             POP      {PC}             ;; return
    680          

   \                                 In section .text, align 2, keep-with-next
    681          void SdkEvalSpiDtmMisoPinState(FunctionalState state)
    682          {
   \                     SdkEvalSpiDtmMisoPinState: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    683            if(state == ENABLE) {
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C01             CMP      R4,#+1
   \   00000008   0xD105             BNE.N    ??SdkEvalSpiDtmMisoPinState_0
    684              HAL_GPIO_WritePin(BNRG_SPI_MOSI_PORT, BNRG_SPI_MOSI_PIN, GPIO_PIN_SET);
   \   0000000A   0x2201             MOVS     R2,#+1
   \   0000000C   0x2180             MOVS     R1,#+128
   \   0000000E   0x....             LDR.N    R0,??DataTable16_2  ;; 0x40020000
   \   00000010   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   00000014   0xE004             B.N      ??SdkEvalSpiDtmMisoPinState_1
    685            }
    686            else {
    687              HAL_GPIO_WritePin(BNRG_SPI_MOSI_PORT, BNRG_SPI_MOSI_PIN, GPIO_PIN_RESET);
   \                     ??SdkEvalSpiDtmMisoPinState_0: (+1)
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0x2180             MOVS     R1,#+128
   \   0000001A   0x....             LDR.N    R0,??DataTable16_2  ;; 0x40020000
   \   0000001C   0x.... 0x....      BL       HAL_GPIO_WritePin
    688            }  
    689          }
   \                     ??SdkEvalSpiDtmMisoPinState_1: (+1)
   \   00000020   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x4002381C         DC32     0x4002381c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0x40023820         DC32     0x40023820

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   0x10110000         DC32     0x10110000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_6:
   \   00000000   0x........         DC32     SpiHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_7:
   \   00000000   0x40026030         DC32     0x40026030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_8:
   \   00000000   0x........         DC32     hdma_tx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_9:
   \   00000000   0x4002601C         DC32     0x4002601c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_10:
   \   00000000   0x........         DC32     hdma_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_11:
   \   00000000   0x40010414         DC32     0x40010414

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_12:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_13:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_14:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_15:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_16:
   \   00000000   0x........         DC32     CLOCK_SECOND

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_17:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_18:
   \   00000000   0x........         DC32     SpiDmaRxBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_19:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x0A 0x00          DC8 10, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0xAA 0x00          DC8 170, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x0B 0x00          DC8 11, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x0A 0x00          DC8 10, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x0B 0x00          DC8 11, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x0A 0x00          DC8 10, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    690          
    691          
    692          
    693          /**
    694          * @}
    695          */
    696          
    697          
    698          /**
    699          * @}
    700          */
    701          
    702          
    703          /**
    704          * @}
    705          */
    706          
    707          
    708          
    709          /******************* (C) COPYRIGHT 2014 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   BlueNRG_DataPresent
         8   -> HAL_GPIO_ReadPin
       8   BlueNRG_HW_Bootloader
         8   -> BlueNRG_RST
         8   -> SdkEvalSpiDtmMisoPinState
         8   -> SdkEvalSpiMisoPinInit
       8   BlueNRG_Power_Down
         8   -> HAL_GPIO_WritePin
       8   BlueNRG_Power_Up
         8   -> HAL_Delay
         8   -> HAL_GPIO_WritePin
       8   BlueNRG_RST
         8   -> HAL_Delay
         8   -> HAL_GPIO_WritePin
      40   BlueNRG_SPI_Read_All
        40   -> HAL_GPIO_WritePin
        40   -> HAL_SPI_Receive_Opt
        40   -> HAL_SPI_TransmitReceive_Opt
      32   BlueNRG_SPI_Read_Bridge
        32   -> HAL_GPIO_WritePin
        32   -> HAL_SPI_Receive_Opt
        32   -> HAL_SPI_TransmitReceive_Opt
        32   -> SdkEvalSPI_Irq_Pin
        32   -> putchar
      56   BlueNRG_SPI_Write
        56   -> HAL_GPIO_WritePin
        56   -> HAL_SPI_TransmitReceive_Opt
        56   -> HAL_SPI_Transmit_Opt
        56   -> SdkEvalSPI_Irq_Pin
        56   -> Timer_Expired
        56   -> Timer_Set
      48   BlueNRG_SPI_Write_Bridge
        48   -> HAL_GPIO_WritePin
        48   -> HAL_SPI_TransmitReceive_Opt
        48   -> HAL_SPI_Transmit_Opt
        48   -> SdkEvalSPI_Irq_Pin
        48   -> Timer_Expired
        48   -> Timer_Set
     296   BlueNRG_SPI_Write_Raw
       296   -> HAL_GPIO_WritePin
       296   -> HAL_SPI_TransmitReceive
       0   Clear_SPI_EXTI_Flag
       8   Clear_SPI_IRQ
         8   -> HAL_NVIC_ClearPendingIRQ
       8   Disable_SPI_IRQ
         8   -> HAL_NVIC_DisableIRQ
       8   Enable_SPI_IRQ
         8   -> HAL_NVIC_EnableIRQ
      32   GPIO_SetHiZ
        32   -> HAL_GPIO_Init
        32   -> HAL_GPIO_WritePin
      40   Hal_Write_Serial
        40   -> BlueNRG_SPI_Write
        40   -> Disable_SPI_IRQ
        40   -> Enable_SPI_IRQ
        40   -> Timer_Expired
        40   -> Timer_Set
       4   SPI_Configure_Platform
       8   SdkEvalSPI_Irq_Pin
         8   -> HAL_GPIO_ReadPin
       8   SdkEvalSpiDisable
         8   -> GPIO_SetHiZ
         8   -> HAL_NVIC_DisableIRQ
       8   SdkEvalSpiDtmMisoPinState
         8   -> HAL_GPIO_WritePin
      40   SdkEvalSpiInit
        40   -> BlueNRG_Power_Down
        40   -> HAL_DMA_Init
        40   -> HAL_GPIO_Init
        40   -> HAL_GPIO_WritePin
        40   -> HAL_NVIC_EnableIRQ
        40   -> HAL_NVIC_SetPriority
        40   -> HAL_SPI_Init
        40   -> SPI_Configure_Platform
      24   SdkEvalSpiMisoPinInit
        24   -> HAL_GPIO_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_10
       4  ??DataTable16_11
       4  ??DataTable16_12
       4  ??DataTable16_13
       4  ??DataTable16_14
       4  ??DataTable16_15
       4  ??DataTable16_16
       4  ??DataTable16_17
       4  ??DataTable16_18
       4  ??DataTable16_19
       4  ??DataTable16_2
       4  ??DataTable16_3
       4  ??DataTable16_4
       4  ??DataTable16_5
       4  ??DataTable16_6
       4  ??DataTable16_7
       4  ??DataTable16_8
       4  ??DataTable16_9
       8  ?_0
       8  ?_1
       8  ?_2
       8  ?_3
       8  ?_4
       8  ?_5
       8  ?_6
       8  ?_7
       8  ?_8
      24  BlueNRG_DataPresent
      18  BlueNRG_HW_Bootloader
      18  BlueNRG_Power_Down
      24  BlueNRG_Power_Up
      46  BlueNRG_RST
     120  BlueNRG_SPI_Read_All
     162  BlueNRG_SPI_Read_Bridge
     210  BlueNRG_SPI_Write
     166  BlueNRG_SPI_Write_Bridge
     136  BlueNRG_SPI_Write_Raw
      10  Clear_SPI_EXTI_Flag
      10  Clear_SPI_IRQ
      10  Disable_SPI_IRQ
      10  Enable_SPI_IRQ
      52  GPIO_SetHiZ
     104  Hal_Write_Serial
     218  SPI_Configure_Platform
      14  SdkEvalSPI_Irq_Pin
      66  SdkEvalSpiDisable
      34  SdkEvalSpiDtmMisoPinState
     636  SdkEvalSpiInit
      32  SdkEvalSpiMisoPinInit
     264  SpiDmaRxBuffer
      88  SpiHandle
      56  hdma_rx
      56  hdma_tx

 
   464 bytes in section .bss
    72 bytes in section .rodata
 2 200 bytes in section .text
 
 2 200 bytes of CODE  memory
    72 bytes of CONST memory
   464 bytes of DATA  memory

Errors: none
Warnings: none
