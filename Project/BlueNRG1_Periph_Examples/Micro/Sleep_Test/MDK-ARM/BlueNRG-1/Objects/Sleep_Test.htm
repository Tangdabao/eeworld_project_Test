<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Sleep_Test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Sleep_Test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Tue Jan 30 10:25:44 2018
<BR><P>
<H3>Maximum Stack Usage =        688 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
RESET_HANDLER &rArr; main &rArr; BTLE_StackTick &rArr; Timer_ProcessQ &rArr; TimerCallback &rArr; HAL_VTimerTimeoutCallback &rArr; sleep_timer &rArr;  BTLE_StackTick (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[8c]">AES128ECB_Wrapper</a>
 <LI><a href="#[90]">AES_CMAC_Encrypt</a>
 <LI><a href="#[92]">AES_CMAC_Encrypt_Append</a>
 <LI><a href="#[93]">AES_CMAC_Encrypt_Finish</a>
 <LI><a href="#[91]">AES_CMAC_Encrypt_Init</a>
 <LI><a href="#[8f]">AES_general_SW_enc</a>
 <LI><a href="#[8d]">AES_keyschedule_enc</a>
 <LI><a href="#[97]">Accu_Handles_Requiring_Auth</a>
 <LI><a href="#[9c]">Accu_UuidTypes_Requiring_Auth</a>
 <LI><a href="#[9e]">Acl_Clone_Fragment</a>
 <LI><a href="#[a1]">Acl_Disconnected_Peer</a>
 <LI><a href="#[1cf]">Acl_Get_Last</a>
 <LI><a href="#[a0]">Acl_Get_Pack_Off</a>
 <LI><a href="#[a4]">Acl_Init</a>
 <LI><a href="#[a6]">Acl_Rcv_Pkt_Handler</a>
 <LI><a href="#[a9]">Acl_Transmit_Data</a>
 <LI><a href="#[aa]">Acl_Transmit_Packet</a>
 <LI><a href="#[ad]">Acl_Tx_Cmpl_Pkt_Handler</a>
 <LI><a href="#[ae]">Att_Send_Read_Blob_Req_Pdu</a>
 <LI><a href="#[b0]">Att_Send_Read_By_Typ_Req_Pdu</a>
 <LI><a href="#[b2]">BTLE_StackTick</a>
 <LI><a href="#[c5]">BlueNRG_Stack_Initialization</a>
 <LI><a href="#[c8]">BlueNRG_Stack_Initialize_ConfigData</a>
 <LI><a href="#[ca]">BlueNRG_Stack_Initialize_Layers</a>
 <LI><a href="#[d4]">BlueNRG_Stack_Initialize_RAM</a>
 <LI><a href="#[c6]">BlueNRG_Stack_Initialize_RAM_check</a>
 <LI><a href="#[c2]">BlueNRG_Stack_Perform_Deep_Sleep_Check</a>
 <LI><a href="#[d8]">BlueNRG_Start_Crystal_Measurement</a>
 <LI><a href="#[dc]">Blue_Init_Global</a>
 <LI><a href="#[dd]">Blue_Set_Radio_Config_Data</a>
 <LI><a href="#[df]">Build_Notif_Or_Ind</a>
 <LI><a href="#[e0]">CheckSecForSignedWrite</a>
 <LI><a href="#[156]">Check_Encry_Key_Size</a>
 <LI><a href="#[e3]">Check_Flags</a>
 <LI><a href="#[e7]">Check_For_Service_Change</a>
 <LI><a href="#[ec]">Check_Permission</a>
 <LI><a href="#[ef]">Check_Serv_Chng_Charac_Ind_Not</a>
 <LI><a href="#[f1]">Check_Stat</a>
 <LI><a href="#[b5]">Controller_Process_Q</a>
 <LI><a href="#[234]">Delay_With_NOP_Cycles</a>
 <LI><a href="#[d5]">Dynamic_allocator</a>
 <LI><a href="#[d6]">Dynamic_allocator_noRet</a>
 <LI><a href="#[b6]">Events_Process_Q</a>
 <LI><a href="#[d3]">Events_Process_init</a>
 <LI><a href="#[ff]">Exchg_Mtu_Resp</a>
 <LI><a href="#[101]">Exec_Write_Resp</a>
 <LI><a href="#[e9]">Fetch_Handle</a>
 <LI><a href="#[ea]">Find_Attr_Index</a>
 <LI><a href="#[109]">Find_By_Type_Val_Resp</a>
 <LI><a href="#[10c]">Find_Client_Data</a>
 <LI><a href="#[e4]">Find_Gatt_Client</a>
 <LI><a href="#[111]">Find_Info_Resp</a>
 <LI><a href="#[198]">Find_L2cap_signalling_connection</a>
 <LI><a href="#[148]">Find_Timed_Out_Connection</a>
 <LI><a href="#[112]">Flash_Write_Client_Data</a>
 <LI><a href="#[118]">Flash_Write_Flagged</a>
 <LI><a href="#[119]">GAP_Connection_Complete_Handler</a>
 <LI><a href="#[11b]">GAP_Delete_ADType</a>
 <LI><a href="#[11f]">GAP_DiscProcTimeoutcb</a>
 <LI><a href="#[121]">GAP_Init</a>
 <LI><a href="#[d0]">GAP_Init_Context</a>
 <LI><a href="#[12a]">GAP_Internal_Evt_Handler</a>
 <LI><a href="#[12b]">GAP_LL_Event_Handler_ISR</a>
 <LI><a href="#[12d]">GAP_LimDiscTimeoutcb</a>
 <LI><a href="#[130]">GAP_Notify_Add_Charac</a>
 <LI><a href="#[12c]">GAP_Parse_Advertising_Report</a>
 <LI><a href="#[134]">GAP_Privacy1v2</a>
 <LI><a href="#[13c]">GAP_PrivateAddrTimercb</a>
 <LI><a href="#[ba]">GAP_Process_Q</a>
 <LI><a href="#[140]">GAP_Set_Discoverable_Mode</a>
 <LI><a href="#[142]">GAP_Set_Non_Discoverable_Mode</a>
 <LI><a href="#[173]">GAP_Started_Gatt_Proc</a>
 <LI><a href="#[15f]">GATT_Clear_Flag</a>
 <LI><a href="#[143]">GATT_Connection_Complete_Handler</a>
 <LI><a href="#[131]">GATT_Num_Charac_Present</a>
 <LI><a href="#[145]">GATT_Set_Flag</a>
 <LI><a href="#[147]">GATT_TimeOut_Handler</a>
 <LI><a href="#[29f]">GapIsPrivacySupported</a>
 <LI><a href="#[151]">Gatt_Add_Charac_Desc</a>
 <LI><a href="#[128]">Gatt_Add_Characteristic</a>
 <LI><a href="#[155]">Gatt_Add_Descriptor</a>
 <LI><a href="#[127]">Gatt_Add_Service</a>
 <LI><a href="#[159]">Gatt_Check_Not_Error_Resp</a>
 <LI><a href="#[1f8]">Gatt_Find_Srv_From_Handle</a>
 <LI><a href="#[99]">Gatt_Find_Srv_Owner_Of_Handle</a>
 <LI><a href="#[167]">Gatt_Find_Timed_Out_Connection_Index</a>
 <LI><a href="#[15b]">Gatt_Flush_Pending_AclPacket_Lists</a>
 <LI><a href="#[bb]">Gatt_Process_Q</a>
 <LI><a href="#[13f]">Gatt_Read_Charac_By_Uuid</a>
 <LI><a href="#[1d]">Gatt_Read_Charac_By_Uuid_Cb</a>
 <LI><a href="#[15c]">Gatt_Reset_To_Closed_State</a>
 <LI><a href="#[152]">Gatt_Server_Db_Check</a>
 <LI><a href="#[16b]">Gatt_Server_Init</a>
 <LI><a href="#[16d]">Gatt_Server_L2C_Handler</a>
 <LI><a href="#[171]">Gatt_Server_L2C_Handler_ISR</a>
 <LI><a href="#[166]">Gatt_Super_Handler_Task7</a>
 <LI><a href="#[129]">Gatt_Update_Charac_Value</a>
 <LI><a href="#[17b]">Gatt_Update_Charac_Value_Ext</a>
 <LI><a href="#[138]">Generate_Non_Resolvable_Private_Address</a>
 <LI><a href="#[146]">Get_GAP_Handle</a>
 <LI><a href="#[10e]">Get_Max_SecDb_Size</a>
 <LI><a href="#[115]">Get_SecRec_Len_In_Words</a>
 <LI><a href="#[17f]">Get_SecRecord_Size</a>
 <LI><a href="#[123]">Get_StaticRandAddr</a>
 <LI><a href="#[180]">HAL_Flash_Store_Data</a>
 <LI><a href="#[181]">HAL_Generate_Random_Bytes_To</a>
 <LI><a href="#[d2]">HAL_Init</a>
 <LI><a href="#[236]">HAL_Set_TX_Power_Level</a>
 <LI><a href="#[185]">HAL_VTimerAcc_sysT32_ms</a>
 <LI><a href="#[18b]">HAL_VTimerDiff_ms_sysT32</a>
 <LI><a href="#[182]">HAL_VTimerGetCurrentTime_sysT32</a>
 <LI><a href="#[184]">HAL_VTimerStart_ms</a>
 <LI><a href="#[186]">HAL_VTimerStart_sysT32</a>
 <LI><a href="#[189]">HAL_VTimer_Stop</a>
 <LI><a href="#[d1]">HCI_Init</a>
 <LI><a href="#[17c]">Hal_Get_Random_Number</a>
 <LI><a href="#[192]">Hal_Get_Random_Number32</a>
 <LI><a href="#[122]">IDD_Initialize_Device_IDs</a>
 <LI><a href="#[eb]">Ind_Service_Change_Charac</a>
 <LI><a href="#[194]">InvaliDate_Record</a>
 <LI><a href="#[1a7]">Is_Address_Initialized</a>
 <LI><a href="#[1e2]">Is_Flash_Write_On_Going</a>
 <LI><a href="#[9b]">L2CAP_Get_PDU_Len</a>
 <LI><a href="#[195]">L2CAP_Reset_To_Closed_State</a>
 <LI><a href="#[197]">L2C_Build_Command_Reject_Pdu</a>
 <LI><a href="#[199]">L2C_Connection_Complete_Handler</a>
 <LI><a href="#[19c]">L2C_Connection_Complete_Signal_Handler</a>
 <LI><a href="#[ce]">L2C_Init</a>
 <LI><a href="#[19d]">L2C_Rcv_Event_Handler</a>
 <LI><a href="#[1a0]">L2C_Rcv_Event_Handler_ISR</a>
 <LI><a href="#[164]">L2C_Send_Data</a>
 <LI><a href="#[1a2]">L2C_SigChan_Req_TimeOut_Handler</a>
 <LI><a href="#[19f]">L2C_Signal_Channel_Handler</a>
 <LI><a href="#[19b]">L2C_Signal_Channel_Handler_ISR</a>
 <LI><a href="#[1a4]">LE_TO_NRG_32</a>
 <LI><a href="#[135]">LL_Allow_Address_Setting</a>
 <LI><a href="#[1a6]">LL_Check_And_Set_Addresses</a>
 <LI><a href="#[12e]">LL_Enable_Disable_Adv</a>
 <LI><a href="#[120]">LL_Enable_Disable_Scan</a>
 <LI><a href="#[1b4]">LL_Encrypt_Plain_Data</a>
 <LI><a href="#[1a5]">LL_Get_Address</a>
 <LI><a href="#[136]">LL_Get_AdvAddress</a>
 <LI><a href="#[11d]">LL_Get_Adv_Data</a>
 <LI><a href="#[1b6]">LL_Get_Adv_Tx_Power_Level</a>
 <LI><a href="#[1b8]">LL_Get_LTK</a>
 <LI><a href="#[137]">LL_Get_ScanAddress</a>
 <LI><a href="#[cc]">LL_Init</a>
 <LI><a href="#[1bb]">LL_LE_Clear_White_List</a>
 <LI><a href="#[1bd]">LL_LE_Set_Address_Resolution_Enable</a>
 <LI><a href="#[124]">LL_LE_Set_Resolvable_Private_Address_Timeout</a>
 <LI><a href="#[1ba]">LL_Rcv_ACL_Data</a>
 <LI><a href="#[ab]">LL_Send_ACL_Data</a>
 <LI><a href="#[126]">LL_SetAddressResolutionEnable</a>
 <LI><a href="#[11e]">LL_Set_Adv_Data</a>
 <LI><a href="#[1be]">LL_Set_Adv_Params</a>
 <LI><a href="#[1ad]">LL_Set_Advertising_Buffers</a>
 <LI><a href="#[1aa]">LL_Set_DirectAddress</a>
 <LI><a href="#[1ab]">LL_Set_OwnAddress</a>
 <LI><a href="#[293]">LL_Set_Scan_Resp_Data</a>
 <LI><a href="#[1b0]">LL_Sleep_Req</a>
 <LI><a href="#[1bf]">LL_Start_Encryption</a>
 <LI><a href="#[1c0]">LL_Update_Advertising_Buffers</a>
 <LI><a href="#[1c1]">LL_Update_Scanning_Initiating_Buffers</a>
 <LI><a href="#[1e9]">LL_receive_data_patch</a>
 <LI><a href="#[1eb]">LL_update_proc</a>
 <LI><a href="#[153]">List_Circular_Get_Size</a>
 <LI><a href="#[267]">List_Circular_Insert_Head</a>
 <LI><a href="#[158]">List_Circular_Insert_Tail</a>
 <LI><a href="#[1c2]">List_Circular_Node_Present</a>
 <LI><a href="#[22b]">List_Circular_Remove_Head</a>
 <LI><a href="#[157]">List_Circular_Remove_Node</a>
 <LI><a href="#[1c4]">PKA_Generate_ECDH_Public_Key</a>
 <LI><a href="#[1c8]">PKA_Get_Current_Operation</a>
 <LI><a href="#[f3]">PKA_Offline_Processing</a>
 <LI><a href="#[1cd]">PKA_Start_Generate_DHKey</a>
 <LI><a href="#[1ce]">PM_Append_Fragment</a>
 <LI><a href="#[1d0]">PM_Clone_Pckt</a>
 <LI><a href="#[103]">PM_Copy_Pckt_Data</a>
 <LI><a href="#[1d2]">PM_Eng_Config</a>
 <LI><a href="#[10a]">PM_Extend_Pckt_Pdu_Size</a>
 <LI><a href="#[169]">PM_Get_Available_Fragments</a>
 <LI><a href="#[1d1]">PM_Get_Fragments_Count</a>
 <LI><a href="#[e5]">PM_Get_Pckt</a>
 <LI><a href="#[cd]">PM_Init</a>
 <LI><a href="#[10b]">PM_Pckt_Cmp</a>
 <LI><a href="#[a3]">PM_Release_Pckt</a>
 <LI><a href="#[af]">PM_Set_Att_Pdu_Length</a>
 <LI><a href="#[e6]">PM_Set_ConnHandle</a>
 <LI><a href="#[b1]">PM_Write_Pckt_Data</a>
 <LI><a href="#[1d3]">PRIVWHIT_u8AddAddrInList</a>
 <LI><a href="#[1d4]">PRIVWHIT_u8RemoveAddrInList</a>
 <LI><a href="#[1a8]">PRIVWHIT_u8SearchAddrInList</a>
 <LI><a href="#[1d5]">PRIVWHIT_vInit_Struct</a>
 <LI><a href="#[1e5]">PRIV_SearchAddrInWhiteList</a>
 <LI><a href="#[1d6]">PRIV_u32ProcessAdvPacket</a>
 <LI><a href="#[f2]">PRIV_u8OfflineProcessing</a>
 <LI><a href="#[1d7]">PRIV_u8ResolvePrivateAddress</a>
 <LI><a href="#[1a9]">PRIV_vGeneratePrivateAddress</a>
 <LI><a href="#[1d8]">Prepare_Write_Resp</a>
 <LI><a href="#[162]">Process_Peer_Client_Data</a>
 <LI><a href="#[160]">Process_Peer_Server_Data</a>
 <LI><a href="#[db]">RAL_Isr</a>
 <LI><a href="#[1dc]">Read_Blob_Resp</a>
 <LI><a href="#[1de]">Read_By_Grp_Type_Resp</a>
 <LI><a href="#[1da]">Read_By_Type_Resp</a>
 <LI><a href="#[1dd]">Read_Multi_Resp</a>
 <LI><a href="#[10f]">Read_RecordValidity</a>
 <LI><a href="#[1db]">Read_Resp</a>
 <LI><a href="#[113]">Read_SDBRecord</a>
 <LI><a href="#[1fa]">Reclassify_All_Channels</a>
 <LI><a href="#[1fb]">SDB_Add_Record</a>
 <LI><a href="#[117]">SDB_Delete</a>
 <LI><a href="#[1fe]">SDB_Find_Matching_LTK</a>
 <LI><a href="#[202]">SDB_Find_Record</a>
 <LI><a href="#[203]">SDB_Find_Record_By_ConnHandle</a>
 <LI><a href="#[200]">SDB_Get_Data_From_Record</a>
 <LI><a href="#[232]">SDB_Get_GattDb_End_Addr</a>
 <LI><a href="#[10d]">SDB_Get_GattDb_Start_Addr</a>
 <LI><a href="#[132]">SDB_Get_Number_Of_Records</a>
 <LI><a href="#[1fd]">SDB_Get_SecurityDb_Start_Addr</a>
 <LI><a href="#[e8]">SDB_Read_Peer_Bonded_Data</a>
 <LI><a href="#[201]">SMA_Diversify</a>
 <LI><a href="#[1ff]">SMA_GenEDIV_RecovDIV</a>
 <LI><a href="#[204]">SMA_Generate_CSRK</a>
 <LI><a href="#[205]">SMA_Generate_IRK</a>
 <LI><a href="#[206]">SMA_LP_s1_Generate_STK</a>
 <LI><a href="#[207]">SMA_SC_Gen_f4_Confirm</a>
 <LI><a href="#[209]">SMA_SC_Gen_f5_Keys</a>
 <LI><a href="#[20a]">SMA_SC_Gen_f6_Check_Val</a>
 <LI><a href="#[20b]">SMA_SC_Gen_g2_NumComp_Val</a>
 <LI><a href="#[15e]">SMP_Check_Is_Device_Bonded</a>
 <LI><a href="#[15d]">SMP_Forget_Device_by_ConnHandle</a>
 <LI><a href="#[cf]">SMP_Init</a>
 <LI><a href="#[20d]">SMP_MI_PairingRequest_Send</a>
 <LI><a href="#[bc]">SMP_Process_Q</a>
 <LI><a href="#[21a]">SMP_Repeated_Attacks_Timer_cb</a>
 <LI><a href="#[21b]">SMP_Timer_cb</a>
 <LI><a href="#[ee]">SM_Check_Encryption_KeySize</a>
 <LI><a href="#[139]">SM_Generate_Resolvable_Private_Address</a>
 <LI><a href="#[ed]">SM_Get_Link_Status</a>
 <LI><a href="#[e2]">SM_Get_Remote_Device_Info</a>
 <LI><a href="#[1a1]">SM_L2CAP_Encryption_changed_Handler_ISR</a>
 <LI><a href="#[19e]">SM_L2CAP_Handler</a>
 <LI><a href="#[19a]">SM_L2CAP_Handler_ISR</a>
 <LI><a href="#[114]">SM_Resolve_Private_Address</a>
 <LI><a href="#[223]">SM_Validate_Signed_Packet</a>
 <LI><a href="#[177]">STORE_LE_16</a>
 <LI><a href="#[110]">STORE_LE_32</a>
 <LI><a href="#[9a]">Search_Handle</a>
 <LI><a href="#[a2]">Search_In_Stat</a>
 <LI><a href="#[f0]">Search_Service_Handle</a>
 <LI><a href="#[224]">Select_Next_Notification_Client</a>
 <LI><a href="#[100]">Send_Error_Resp</a>
 <LI><a href="#[170]">Send_Notif_Or_Ind</a>
 <LI><a href="#[16f]">Start_Gatt_Timer</a>
 <LI><a href="#[16e]">Stop_Gatt_Timer</a>
 <LI><a href="#[1e1]">Timer_ExpiryCallback</a>
 <LI><a href="#[cb]">Timer_Init</a>
 <LI><a href="#[b3]">Timer_ProcessQ</a>
 <LI><a href="#[13b]">Timer_StartOneShot</a>
 <LI><a href="#[187]">Timer_StartOneShot_sysTime32</a>
 <LI><a href="#[13a]">Timer_StopOneShot</a>
 <LI><a href="#[183]">Timer_sysTime32_convMachineTime</a>
 <LI><a href="#[e1]">ValidLinkPermRequest</a>
 <LI><a href="#[26d]">WindowWiden1</a>
 <LI><a href="#[26f]">WindowWiden2</a>
 <LI><a href="#[116]">Write_Client_Data</a>
 <LI><a href="#[1e0]">Write_Cmd</a>
 <LI><a href="#[1df]">Write_Resp</a>
 <LI><a href="#[c7]">_BlueNRG_Stack_Initialization</a>
 <LI><a href="#[154]">__ARM_common_switch8</a>
 <LI><a href="#[141]">_gap_set_discoverable_connectable</a>
 <LI><a href="#[23b]">aci_att_exchange_mtu_resp_event</a>
 <LI><a href="#[40]">aci_att_exchange_mtu_resp_event_cb</a>
 <LI><a href="#[23c]">aci_att_exec_write_resp_event</a>
 <LI><a href="#[4a]">aci_att_exec_write_resp_event_cb</a>
 <LI><a href="#[23d]">aci_att_find_by_type_value_resp_event</a>
 <LI><a href="#[42]">aci_att_find_by_type_value_resp_event_cb</a>
 <LI><a href="#[23e]">aci_att_find_info_resp_event</a>
 <LI><a href="#[41]">aci_att_find_info_resp_event_cb</a>
 <LI><a href="#[23f]">aci_att_prepare_write_resp_event</a>
 <LI><a href="#[49]">aci_att_prepare_write_resp_event_cb</a>
 <LI><a href="#[240]">aci_att_read_blob_resp_event</a>
 <LI><a href="#[45]">aci_att_read_blob_resp_event_cb</a>
 <LI><a href="#[241]">aci_att_read_by_group_type_resp_event</a>
 <LI><a href="#[47]">aci_att_read_by_group_type_resp_event_cb</a>
 <LI><a href="#[242]">aci_att_read_by_type_resp_event</a>
 <LI><a href="#[43]">aci_att_read_by_type_resp_event_cb</a>
 <LI><a href="#[243]">aci_att_read_multiple_resp_event</a>
 <LI><a href="#[46]">aci_att_read_multiple_resp_event_cb</a>
 <LI><a href="#[244]">aci_att_read_resp_event</a>
 <LI><a href="#[44]">aci_att_read_resp_event_cb</a>
 <LI><a href="#[245]">aci_att_write_resp_event</a>
 <LI><a href="#[48]">aci_att_write_resp_event_cb</a>
 <LI><a href="#[a8]">aci_event_fifo_push</a>
 <LI><a href="#[a7]">aci_event_fifo_push_header</a>
 <LI><a href="#[247]">aci_gap_addr_not_resolved_event</a>
 <LI><a href="#[37]">aci_gap_addr_not_resolved_event_cb</a>
 <LI><a href="#[248]">aci_gap_authorization_req_event</a>
 <LI><a href="#[32]">aci_gap_authorization_req_event_cb</a>
 <LI><a href="#[24a]">aci_gap_bond_lost_event</a>
 <LI><a href="#[34]">aci_gap_bond_lost_event_cb</a>
 <LI><a href="#[24b]">aci_gap_device_found_event</a>
 <LI><a href="#[35]">aci_gap_device_found_event_cb</a>
 <LI><a href="#[f7]">aci_gap_init</a>
 <LI><a href="#[24c]">aci_gap_keypress_notification_event</a>
 <LI><a href="#[39]">aci_gap_keypress_notification_event_cb</a>
 <LI><a href="#[24d]">aci_gap_limited_discoverable_event</a>
 <LI><a href="#[2f]">aci_gap_limited_discoverable_event_cb</a>
 <LI><a href="#[24e]">aci_gap_numeric_comparison_value_event</a>
 <LI><a href="#[38]">aci_gap_numeric_comparison_value_event_cb</a>
 <LI><a href="#[250]">aci_gap_pairing_complete_event</a>
 <LI><a href="#[30]">aci_gap_pairing_complete_event_cb</a>
 <LI><a href="#[251]">aci_gap_pass_key_req_event</a>
 <LI><a href="#[31]">aci_gap_pass_key_req_event_cb</a>
 <LI><a href="#[252]">aci_gap_proc_complete_event</a>
 <LI><a href="#[36]">aci_gap_proc_complete_event_cb</a>
 <LI><a href="#[226]">aci_gap_set_discoverable</a>
 <LI><a href="#[18d]">aci_gap_set_non_discoverable</a>
 <LI><a href="#[254]">aci_gap_slave_security_initiated_event</a>
 <LI><a href="#[33]">aci_gap_slave_security_initiated_event_cb</a>
 <LI><a href="#[255]">aci_gatt_attribute_modified_event</a>
 <LI><a href="#[3e]">aci_gatt_attribute_modified_event_cb</a>
 <LI><a href="#[256]">aci_gatt_disc_read_char_by_uuid_resp_event</a>
 <LI><a href="#[4f]">aci_gatt_disc_read_char_by_uuid_resp_event_cb</a>
 <LI><a href="#[257]">aci_gatt_error_resp_event</a>
 <LI><a href="#[4e]">aci_gatt_error_resp_event_cb</a>
 <LI><a href="#[258]">aci_gatt_indication_event</a>
 <LI><a href="#[4b]">aci_gatt_indication_event_cb</a>
 <LI><a href="#[f6]">aci_gatt_init</a>
 <LI><a href="#[259]">aci_gatt_notification_event</a>
 <LI><a href="#[4c]">aci_gatt_notification_event_cb</a>
 <LI><a href="#[25a]">aci_gatt_prepare_write_permit_req_event</a>
 <LI><a href="#[51]">aci_gatt_prepare_write_permit_req_event_cb</a>
 <LI><a href="#[25b]">aci_gatt_proc_complete_event</a>
 <LI><a href="#[4d]">aci_gatt_proc_complete_event_cb</a>
 <LI><a href="#[25c]">aci_gatt_proc_timeout_event</a>
 <LI><a href="#[3f]">aci_gatt_proc_timeout_event_cb</a>
 <LI><a href="#[25d]">aci_gatt_read_multi_permit_req_event</a>
 <LI><a href="#[53]">aci_gatt_read_multi_permit_req_event_cb</a>
 <LI><a href="#[25e]">aci_gatt_read_permit_req_event</a>
 <LI><a href="#[52]">aci_gatt_read_permit_req_event_cb</a>
 <LI><a href="#[25f]">aci_gatt_server_confirmation_event</a>
 <LI><a href="#[55]">aci_gatt_server_confirmation_event_cb</a>
 <LI><a href="#[260]">aci_gatt_tx_pool_available_event</a>
 <LI><a href="#[54]">aci_gatt_tx_pool_available_event_cb</a>
 <LI><a href="#[261]">aci_gatt_write_permit_req_event</a>
 <LI><a href="#[50]">aci_gatt_write_permit_req_event_cb</a>
 <LI><a href="#[27a]">aci_hal_end_of_radio_activity_event</a>
 <LI><a href="#[262]">aci_hal_scan_req_report_event</a>
 <LI><a href="#[2c]">aci_hal_scan_req_report_event_cb</a>
 <LI><a href="#[f5]">aci_hal_set_tx_power_level</a>
 <LI><a href="#[263]">aci_l2cap_command_reject_event</a>
 <LI><a href="#[3d]">aci_l2cap_command_reject_event_cb</a>
 <LI><a href="#[264]">aci_l2cap_connection_update_req_event</a>
 <LI><a href="#[3c]">aci_l2cap_connection_update_req_event_cb</a>
 <LI><a href="#[265]">aci_l2cap_connection_update_resp_event</a>
 <LI><a href="#[3a]">aci_l2cap_connection_update_resp_event_cb</a>
 <LI><a href="#[266]">aci_l2cap_proc_timeout_event</a>
 <LI><a href="#[3b]">aci_l2cap_proc_timeout_event_cb</a>
 <LI><a href="#[1d9]">acl_list_full_on_packt</a>
 <LI><a href="#[102]">acl_list_get_pckt_count</a>
 <LI><a href="#[16c]">acl_list_init</a>
 <LI><a href="#[219]">acl_list_insert_head</a>
 <LI><a href="#[165]">acl_list_insert_tail</a>
 <LI><a href="#[161]">acl_list_is_empty</a>
 <LI><a href="#[104]">acl_list_remove</a>
 <LI><a href="#[163]">acl_list_remove_head</a>
 <LI><a href="#[239]">advParamsCheckAndSet</a>
 <LI><a href="#[1ed]">advance_slave_timing_MultiSlave</a>
 <LI><a href="#[299]">advance_transmit</a>
 <LI><a href="#[1b1]">advance_wakeup_timer</a>
 <LI><a href="#[1f2]">anchor_replace</a>
 <LI><a href="#[1af]">cancel_current_master</a>
 <LI><a href="#[274]">cancel_master</a>
 <LI><a href="#[275]">cancel_slave</a>
 <LI><a href="#[de]">char_copy</a>
 <LI><a href="#[1b7]">convert_power</a>
 <LI><a href="#[208]">copy_swap_buffer</a>
 <LI><a href="#[da]">deepSleepTimers_check</a>
 <LI><a href="#[1b5]">encrypt</a>
 <LI><a href="#[238]">gapClearAllModeFlags</a>
 <LI><a href="#[1e4]">get_adv_addr</a>
 <LI><a href="#[13d]">get_advertiser</a>
 <LI><a href="#[1b9]">get_connection_no</a>
 <LI><a href="#[1ac]">get_next_free_slot</a>
 <LI><a href="#[1e3]">get_scan_addr</a>
 <LI><a href="#[13e]">get_scan_connection</a>
 <LI><a href="#[1e6]">go_to_connect</a>
 <LI><a href="#[1ef]">go_to_connect_master</a>
 <LI><a href="#[c9]">hal_get_hw_version</a>
 <LI><a href="#[fc]">hal_radio_activity_state_callback_check</a>
 <LI><a href="#[fd]">hal_radio_activity_state_init</a>
 <LI><a href="#[279]">hal_read_radio_activity_state</a>
 <LI><a href="#[b4]">hci_acl_Process_Q</a>
 <LI><a href="#[57]">hci_acl_data_ind_event_int_cb</a>
 <LI><a href="#[56]">hci_acl_data_tx_cmpl_event_int_cb</a>
 <LI><a href="#[28]">hci_data_buffer_overflow_event_cb</a>
 <LI><a href="#[27d]">hci_disconnection_complete_event</a>
 <LI><a href="#[1e]">hci_disconnection_complete_event_cb</a>
 <LI><a href="#[58]">hci_disconnection_complete_event_int_cb</a>
 <LI><a href="#[27e]">hci_encryption_change_event</a>
 <LI><a href="#[1f]">hci_encryption_change_event_cb</a>
 <LI><a href="#[59]">hci_encryption_change_event_int_cb</a>
 <LI><a href="#[280]">hci_encryption_key_refresh_complete_event</a>
 <LI><a href="#[20]">hci_encryption_key_refresh_complete_event_cb</a>
 <LI><a href="#[5a]">hci_encryption_key_refresh_complete_event_int_cb</a>
 <LI><a href="#[fb]">hci_hardware_error_event</a>
 <LI><a href="#[282]">hci_le_advertising_report_event</a>
 <LI><a href="#[23]">hci_le_advertising_report_event_cb</a>
 <LI><a href="#[5d]">hci_le_advertising_report_event_int_cb</a>
 <LI><a href="#[284]">hci_le_connection_complete_event</a>
 <LI><a href="#[21]">hci_le_connection_complete_event_cb</a>
 <LI><a href="#[5b]">hci_le_connection_complete_event_int_cb</a>
 <LI><a href="#[286]">hci_le_connection_update_complete_event</a>
 <LI><a href="#[2a]">hci_le_connection_update_complete_event_cb</a>
 <LI><a href="#[288]">hci_le_direct_advertising_report_event</a>
 <LI><a href="#[27]">hci_le_direct_advertising_report_event_cb</a>
 <LI><a href="#[61]">hci_le_direct_advertising_report_event_int_cb</a>
 <LI><a href="#[28a]">hci_le_enhanced_connection_complete_event</a>
 <LI><a href="#[26]">hci_le_enhanced_connection_complete_event_cb</a>
 <LI><a href="#[60]">hci_le_enhanced_connection_complete_event_int_cb</a>
 <LI><a href="#[28c]">hci_le_generate_dhkey</a>
 <LI><a href="#[28d]">hci_le_generate_dhkey_complete_event</a>
 <LI><a href="#[25]">hci_le_generate_dhkey_complete_event_cb</a>
 <LI><a href="#[5f]">hci_le_generate_dhkey_complete_event_int_cb</a>
 <LI><a href="#[28f]">hci_le_long_term_key_request_event</a>
 <LI><a href="#[22]">hci_le_long_term_key_request_event_cb</a>
 <LI><a href="#[5c]">hci_le_long_term_key_request_event_int_cb</a>
 <LI><a href="#[213]">hci_le_read_local_p256_public_key</a>
 <LI><a href="#[290]">hci_le_read_local_p256_public_key_complete_event</a>
 <LI><a href="#[24]">hci_le_read_local_p256_public_key_complete_event_cb</a>
 <LI><a href="#[5e]">hci_le_read_local_p256_public_key_complete_event_int_cb</a>
 <LI><a href="#[292]">hci_le_read_remote_used_features_complete_event</a>
 <LI><a href="#[2b]">hci_le_read_remote_used_features_complete_event_cb</a>
 <LI><a href="#[18c]">hci_le_set_advertising_data</a>
 <LI><a href="#[125]">hci_le_set_event_mask</a>
 <LI><a href="#[225]">hci_le_set_scan_response_data</a>
 <LI><a href="#[294]">hci_number_of_completed_packets_event</a>
 <LI><a href="#[2d]">hci_number_of_completed_packets_event_cb</a>
 <LI><a href="#[295]">hci_read_remote_version_information_complete_event</a>
 <LI><a href="#[29]">hci_read_remote_version_information_complete_event_cb</a>
 <LI><a href="#[27b]">hci_rx_acl_data</a>
 <LI><a href="#[296]">hci_rx_acl_data_event</a>
 <LI><a href="#[2e]">hci_rx_acl_data_event_cb</a>
 <LI><a href="#[27c]">hci_tx_acl_data_done</a>
 <LI><a href="#[193]">is_Buffer_All_Set_To</a>
 <LI><a href="#[276]">is_slave</a>
 <LI><a href="#[1f4]">isr_event_handler_patched</a>
 <LI><a href="#[1f5]">isr_postproc</a>
 <LI><a href="#[1ea]">isr_postproc1</a>
 <LI><a href="#[1f1]">isr_postproc_encrypt_data</a>
 <LI><a href="#[b8]">machine_time_trans</a>
 <LI><a href="#[d7]">mem_alloc_ctx_init</a>
 <LI><a href="#[271]">microseconds_to_machine_time</a>
 <LI><a href="#[1ec]">modulo_37</a>
 <LI><a href="#[1bc]">nsar_init</a>
 <LI><a href="#[b9]">patch_advance_transmit</a>
 <LI><a href="#[1f3]">read_rssi</a>
 <LI><a href="#[1b2]">request_scan_slot</a>
 <LI><a href="#[1ae]">schedule_advertise_slot</a>
 <LI><a href="#[23a]">setGapAdvData</a>
 <LI><a href="#[d9]">set_freq</a>
 <LI><a href="#[26c]">set_sca</a>
 <LI><a href="#[1ee]">set_string</a>
 <LI><a href="#[ac]">slave_advance</a>
 <LI><a href="#[20e]">sm_Search_BlackList</a>
 <LI><a href="#[29c]">smp_Add_To_Database</a>
 <LI><a href="#[29d]">smp_Determine_Key_Association_Method</a>
 <LI><a href="#[222]">smp_Find_Remote_Device_Index</a>
 <LI><a href="#[2aa]">smp_Get_Local_Identity_Address</a>
 <LI><a href="#[2a7]">smp_Keys_Distribution_Start</a>
 <LI><a href="#[210]">smp_OOB_Check_Is_Remote_Data_Present</a>
 <LI><a href="#[2ac]">smp_OOB_Clear_Remote_Data_Entry_by_Index</a>
 <LI><a href="#[2ad]">smp_OOB_Get_Remote_Data_Reference</a>
 <LI><a href="#[2a9]">smp_Pairing_Completed</a>
 <LI><a href="#[2b3]">smp_Receive_Keys</a>
 <LI><a href="#[212]">smp_Send_Data</a>
 <LI><a href="#[2a6]">smp____PairingFailed_Send</a>
 <LI><a href="#[2bc]">smp____Pairing_2Octets_Packet_Send</a>
 <LI><a href="#[2ba]">smp____SC_Continue_If_Exclusive_SC_Pairing</a>
 <LI><a href="#[2b1]">smp____SC_PairingPublicKey_Receive</a>
 <LI><a href="#[2a1]">smp____SC_PairingPublicKey_Send</a>
 <LI><a href="#[2a3]">smp____SC_Pairing_OOB_Confirm_Receive_and_Verify</a>
 <LI><a href="#[2b6]">smp____SC_Phase_2AS2_DHKeyCheck_Receive</a>
 <LI><a href="#[2c1]">smp____SC_Phase_2AS2_DHKeyCheck_Send</a>
 <LI><a href="#[2a5]">smp____SC_Phase_2AS2_Start</a>
 <LI><a href="#[2be]">smp____SC_Verify_Peer_PK_and_Generate_DHKey</a>
 <LI><a href="#[28e]">smp____SC_hci_le_generate_dhkey_complete_evt_hndl</a>
 <LI><a href="#[291]">smp____SC_hci_le_read_local_p256_public_key_complete_evt_hndl</a>
 <LI><a href="#[20c]">smp____SC_initialize</a>
 <LI><a href="#[2bf]">smp____SC_is_Debug_Key_Usage_Forced</a>
 <LI><a href="#[2bd]">smp____SC_is_any_other_SC_Pairing_Ongoing</a>
 <LI><a href="#[2a0]">smp____SC_submit_ECC_PK_generation_request</a>
 <LI><a href="#[1b3]">start_timebase</a>
 <LI><a href="#[172]">store_data</a>
 <LI><a href="#[1f0]">system_time_trans</a>
 <LI><a href="#[22a]">system_time_trans_ext</a>
 <LI><a href="#[26e]">time_offset1</a>
 <LI><a href="#[270]">time_offset2</a>
 <LI><a href="#[278]">timebase_start_connect</a>
 <LI><a href="#[1e8]">unpack_channel_map</a>
 <LI><a href="#[1e7]">unpack_update_request</a>
 <LI><a href="#[253]">_aci_gap_set_discoverable_param_check</a>
 <LI><a href="#[b7]">BlueNRG_Stack_Perform_Crystal_Check</a>
 <LI><a href="#[1cb]">hci_le_generate_dhkey_complete_event_push</a>
 <LI><a href="#[1ca]">hci_le_read_local_p256_public_key_complete_event_push</a>
 <LI><a href="#[229]">TimerCallback</a>
 <LI><a href="#[246]">fifoBuf_getFreeHeader</a>
 <LI><a href="#[fe]">fifoCtrl_init</a>
 <LI><a href="#[133]">_GAP_Parse_Advertising_Report</a>
 <LI><a href="#[12f]">aci_gap_limited_discoverable_event_push</a>
 <LI><a href="#[11a]">aci_gap_proc_complete_event_push</a>
 <LI><a href="#[176]">aci_att_read_blob_resp_event_push</a>
 <LI><a href="#[175]">aci_att_read_multiple_resp_event_push</a>
 <LI><a href="#[174]">aci_att_read_resp_event_push</a>
 <LI><a href="#[179]">aci_gatt_disc_read_char_by_uuid_resp_event_push</a>
 <LI><a href="#[15a]">aci_gatt_error_resp_event_push</a>
 <LI><a href="#[17a]">aci_gatt_proc_complete_event_push</a>
 <LI><a href="#[144]">GATT_Server_Set_Flag</a>
 <LI><a href="#[168]">Gatt_Store_Server_Database_And_Reset_CCCD</a>
 <LI><a href="#[196]">Find_L2cap_conn_index</a>
 <LI><a href="#[1a3]">aci_l2cap_connection_update_req_event_push</a>
 <LI><a href="#[27f]">hci_encryption_change_event_push</a>
 <LI><a href="#[281]">hci_encryption_key_refresh_complete_event_push</a>
 <LI><a href="#[283]">hci_le_advertising_report_event_push</a>
 <LI><a href="#[285]">hci_le_connection_complete_event_push</a>
 <LI><a href="#[287]">hci_le_connection_update_complete_event_push</a>
 <LI><a href="#[289]">hci_le_direct_advertising_report_event_push</a>
 <LI><a href="#[28b]">hci_le_enhanced_connection_complete_event_push</a>
 <LI><a href="#[f8]">Mem_assign</a>
 <LI><a href="#[268]">adapt_slot</a>
 <LI><a href="#[26a]">nsar_insertSlotListEntry</a>
 <LI><a href="#[26b]">nsar_searchBestFreeSlot</a>
 <LI><a href="#[298]">nsar_updateBestFreeSlot</a>
 <LI><a href="#[269]">nsar_updateSlotListEntry</a>
 <LI><a href="#[272]">swap_char</a>
 <LI><a href="#[273]">swap_short_int</a>
 <LI><a href="#[9f]">Acl_Copy_Data</a>
 <LI><a href="#[f9]">Erase_Sector</a>
 <LI><a href="#[1fc]">Write_SDBRecord</a>
 <LI><a href="#[24f]">aci_gap_numeric_comparison_value_event_push</a>
 <LI><a href="#[214]">sm_Get_Long_Term_Key</a>
 <LI><a href="#[29b]">sm_RepeatedAttacks_Protection</a>
 <LI><a href="#[20f]">smp_Build_AuthReq_Field</a>
 <LI><a href="#[211]">smp_Build_Pairing_ReqResp_Packet</a>
 <LI><a href="#[2b9]">smp_Check_Incoming_Pairing_Parameters</a>
 <LI><a href="#[215]">smp_Execute_Actions_wrt_Current_State</a>
 <LI><a href="#[2bb]">smp_Get_Pairing_Parameters_From_Peer_Packet</a>
 <LI><a href="#[2a8]">smp_Keys_Distribution_Send</a>
 <LI><a href="#[2ab]">smp_LP_MI_Compute_c1_Confirm_Value</a>
 <LI><a href="#[218]">smp_Process_Rx_Packet_Exception_Cases</a>
 <LI><a href="#[216]">smp_Process_Rx_Packet_wrt_Current_State</a>
 <LI><a href="#[2ae]">smp_Reset_Timer</a>
 <LI><a href="#[2b7]">smp_SR_Compute_c1_Confirm_Value</a>
 <LI><a href="#[2b8]">smp_Set_Key_Association_Method</a>
 <LI><a href="#[29e]">smp____MI_PairingConfirm_Receive</a>
 <LI><a href="#[2a2]">smp____MI_PairingConfirm_Send</a>
 <LI><a href="#[2b5]">smp____MI_PairingRandom_Receive</a>
 <LI><a href="#[2b4]">smp____MI_PairingResponse_Receive</a>
 <LI><a href="#[2b0]">smp____MI_SecurityRequest_Receive</a>
 <LI><a href="#[217]">smp____Pairing_Process_Abort</a>
 <LI><a href="#[2a4]">smp____SR_PairingConfirm_Receive</a>
 <LI><a href="#[2b2]">smp____SR_PairingRandom_Receive</a>
 <LI><a href="#[2af]">smp____SR_PairingRequest_Receive</a>
 <LI><a href="#[21f]">SM_Connection_Complete_Handler</a>
 <LI><a href="#[249]">aci_gap_authorization_req_event_push</a>
 <LI><a href="#[21c]">aci_gap_pairing_complete_event_push</a>
 <LI><a href="#[221]">smp_Keys_Distribution_Complete</a>
 <LI><a href="#[105]">aci_gatt_attribute_modified_event_push</a>
 <LI><a href="#[1f9]">aci_gatt_read_multi_permit_req_event_push</a>
 <LI><a href="#[1f7]">aci_gatt_read_permit_req_event_push</a>
 <LI><a href="#[233]">aci_gatt_write_permit_req_event_push</a>
 <LI><a href="#[2c0]">smp____SC_Phase_2AS2_Generate_DHKeyCheck</a>
 <LI><a href="#[2c2]">smp____SC_Phase_2AS2__Set_Addresses</a>
 <LI><a href="#[29a]">LeftShift</a>
 <LI><a href="#[21d]">SM_CMAC_Generate_Tag</a>
 <LI><a href="#[220]">sm_Calculate_Hash</a>
 <LI><a href="#[21e]">sm_Generate_SubKeys</a>
 <LI><a href="#[94]">AES_general_enc</a>
 <LI><a href="#[96]">AES_keyschedule_enc_LL</a>
 <LI><a href="#[95]">AESstdInit</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[106]">assert_failed</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[106]">assert_failed</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[18e]">sleep_timer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b2]">BTLE_StackTick</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[11]">ADC_Handler</a> from system_bluenrg1.o(i.ADC_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[f]">Blue_Handler</a> from bluenrg1_it.o(i.Blue_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[1a]">DMA_Handler</a> from system_bluenrg1.o(i.DMA_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[b]">GPIO_Handler</a> from bluenrg1_it.o(i.GPIO_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[1d]">Gatt_Read_Charac_By_Uuid_Cb</a> from gatt_client.o(i.Gatt_Read_Charac_By_Uuid_Cb) referenced from gatt_client.o(i.Gatt_Read_Charac_By_Uuid)
 <LI><a href="#[7]">HardFault_Handler</a> from bluenrg1_it.o(i.HardFault_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[13]">I2C1_Handler</a> from system_bluenrg1.o(i.I2C1_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[12]">I2C2_Handler</a> from system_bluenrg1.o(i.I2C2_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[14]">MFT1A_Handler</a> from system_bluenrg1.o(i.MFT1A_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[15]">MFT1B_Handler</a> from system_bluenrg1.o(i.MFT1B_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[16]">MFT2A_Handler</a> from system_bluenrg1.o(i.MFT2A_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[17]">MFT2B_Handler</a> from system_bluenrg1.o(i.MFT2B_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[6]">NMI_Handler</a> from bluenrg1_it.o(i.NMI_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[c]">NVM_Handler</a> from system_bluenrg1.o(i.NVM_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[19]">PKA_Handler</a> from system_bluenrg1.o(i.PKA_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[9]">PendSV_Handler</a> from system_bluenrg1.o(i.PendSV_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[5]">RESET_HANDLER</a> from system_bluenrg1.o(i.RESET_HANDLER) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[18]">RTC_Handler</a> from system_bluenrg1.o(i.RTC_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[e]">SPI_Handler</a> from system_bluenrg1.o(i.SPI_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[8]">SVC_Handler</a> from bluenrg1_it.o(i.SVC_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[a]">SysTick_Handler</a> from bluenrg1_it.o(i.SysTick_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[d]">UART_Handler</a> from bluenrg1_it.o(i.UART_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[10]">WDG_Handler</a> from system_bluenrg1.o(i.WDG_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[1c]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[40]">aci_att_exchange_mtu_resp_event_cb</a> from aci_events.o(i.aci_att_exchange_mtu_resp_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[4a]">aci_att_exec_write_resp_event_cb</a> from aci_events.o(i.aci_att_exec_write_resp_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[42]">aci_att_find_by_type_value_resp_event_cb</a> from aci_events.o(i.aci_att_find_by_type_value_resp_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[41]">aci_att_find_info_resp_event_cb</a> from aci_events.o(i.aci_att_find_info_resp_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[49]">aci_att_prepare_write_resp_event_cb</a> from aci_events.o(i.aci_att_prepare_write_resp_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[45]">aci_att_read_blob_resp_event_cb</a> from aci_events.o(i.aci_att_read_blob_resp_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[47]">aci_att_read_by_group_type_resp_event_cb</a> from aci_events.o(i.aci_att_read_by_group_type_resp_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[43]">aci_att_read_by_type_resp_event_cb</a> from aci_events.o(i.aci_att_read_by_type_resp_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[46]">aci_att_read_multiple_resp_event_cb</a> from aci_events.o(i.aci_att_read_multiple_resp_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[44]">aci_att_read_resp_event_cb</a> from aci_events.o(i.aci_att_read_resp_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[48]">aci_att_write_resp_event_cb</a> from aci_events.o(i.aci_att_write_resp_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[37]">aci_gap_addr_not_resolved_event_cb</a> from aci_events.o(i.aci_gap_addr_not_resolved_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[32]">aci_gap_authorization_req_event_cb</a> from aci_events.o(i.aci_gap_authorization_req_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[34]">aci_gap_bond_lost_event_cb</a> from aci_events.o(i.aci_gap_bond_lost_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[35]">aci_gap_device_found_event_cb</a> from aci_events.o(i.aci_gap_device_found_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[39]">aci_gap_keypress_notification_event_cb</a> from aci_events.o(i.aci_gap_keypress_notification_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[2f]">aci_gap_limited_discoverable_event_cb</a> from aci_events.o(i.aci_gap_limited_discoverable_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[38]">aci_gap_numeric_comparison_value_event_cb</a> from aci_events.o(i.aci_gap_numeric_comparison_value_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[30]">aci_gap_pairing_complete_event_cb</a> from aci_events.o(i.aci_gap_pairing_complete_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[31]">aci_gap_pass_key_req_event_cb</a> from aci_events.o(i.aci_gap_pass_key_req_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[36]">aci_gap_proc_complete_event_cb</a> from aci_events.o(i.aci_gap_proc_complete_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[33]">aci_gap_slave_security_initiated_event_cb</a> from aci_events.o(i.aci_gap_slave_security_initiated_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[3e]">aci_gatt_attribute_modified_event_cb</a> from aci_events.o(i.aci_gatt_attribute_modified_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[4f]">aci_gatt_disc_read_char_by_uuid_resp_event_cb</a> from aci_events.o(i.aci_gatt_disc_read_char_by_uuid_resp_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[4e]">aci_gatt_error_resp_event_cb</a> from aci_events.o(i.aci_gatt_error_resp_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[4b]">aci_gatt_indication_event_cb</a> from aci_events.o(i.aci_gatt_indication_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[4c]">aci_gatt_notification_event_cb</a> from aci_events.o(i.aci_gatt_notification_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[51]">aci_gatt_prepare_write_permit_req_event_cb</a> from aci_events.o(i.aci_gatt_prepare_write_permit_req_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[4d]">aci_gatt_proc_complete_event_cb</a> from aci_events.o(i.aci_gatt_proc_complete_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[3f]">aci_gatt_proc_timeout_event_cb</a> from aci_events.o(i.aci_gatt_proc_timeout_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[53]">aci_gatt_read_multi_permit_req_event_cb</a> from aci_events.o(i.aci_gatt_read_multi_permit_req_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[52]">aci_gatt_read_permit_req_event_cb</a> from aci_events.o(i.aci_gatt_read_permit_req_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[55]">aci_gatt_server_confirmation_event_cb</a> from aci_events.o(i.aci_gatt_server_confirmation_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[54]">aci_gatt_tx_pool_available_event_cb</a> from aci_events.o(i.aci_gatt_tx_pool_available_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[50]">aci_gatt_write_permit_req_event_cb</a> from aci_events.o(i.aci_gatt_write_permit_req_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[2c]">aci_hal_scan_req_report_event_cb</a> from aci_events.o(i.aci_hal_scan_req_report_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[3d]">aci_l2cap_command_reject_event_cb</a> from aci_events.o(i.aci_l2cap_command_reject_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[3c]">aci_l2cap_connection_update_req_event_cb</a> from aci_events.o(i.aci_l2cap_connection_update_req_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[3a]">aci_l2cap_connection_update_resp_event_cb</a> from aci_events.o(i.aci_l2cap_connection_update_resp_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[3b]">aci_l2cap_proc_timeout_event_cb</a> from aci_events.o(i.aci_l2cap_proc_timeout_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[1b]">fputc</a> from hw_config.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[57]">hci_acl_data_ind_event_int_cb</a> from acl.o(i.hci_acl_data_ind_event_int_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[56]">hci_acl_data_tx_cmpl_event_int_cb</a> from acl.o(i.hci_acl_data_tx_cmpl_event_int_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[28]">hci_data_buffer_overflow_event_cb</a> from aci_events.o(i.hci_data_buffer_overflow_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[1e]">hci_disconnection_complete_event_cb</a> from aci_events.o(i.hci_disconnection_complete_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[58]">hci_disconnection_complete_event_int_cb</a> from aci_events.o(i.hci_disconnection_complete_event_int_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[1f]">hci_encryption_change_event_cb</a> from aci_events.o(i.hci_encryption_change_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[59]">hci_encryption_change_event_int_cb</a> from aci_events.o(i.hci_encryption_change_event_int_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[20]">hci_encryption_key_refresh_complete_event_cb</a> from aci_events.o(i.hci_encryption_key_refresh_complete_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[5a]">hci_encryption_key_refresh_complete_event_int_cb</a> from aci_events.o(i.hci_encryption_key_refresh_complete_event_int_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[23]">hci_le_advertising_report_event_cb</a> from aci_events.o(i.hci_le_advertising_report_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[5d]">hci_le_advertising_report_event_int_cb</a> from aci_events.o(i.hci_le_advertising_report_event_int_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[21]">hci_le_connection_complete_event_cb</a> from aci_events.o(i.hci_le_connection_complete_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[5b]">hci_le_connection_complete_event_int_cb</a> from aci_events.o(i.hci_le_connection_complete_event_int_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[2a]">hci_le_connection_update_complete_event_cb</a> from aci_events.o(i.hci_le_connection_update_complete_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[27]">hci_le_direct_advertising_report_event_cb</a> from aci_events.o(i.hci_le_direct_advertising_report_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[61]">hci_le_direct_advertising_report_event_int_cb</a> from aci_events.o(i.hci_le_direct_advertising_report_event_int_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[26]">hci_le_enhanced_connection_complete_event_cb</a> from aci_events.o(i.hci_le_enhanced_connection_complete_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[60]">hci_le_enhanced_connection_complete_event_int_cb</a> from aci_events.o(i.hci_le_enhanced_connection_complete_event_int_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[25]">hci_le_generate_dhkey_complete_event_cb</a> from aci_events.o(i.hci_le_generate_dhkey_complete_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[5f]">hci_le_generate_dhkey_complete_event_int_cb</a> from aci_events.o(i.hci_le_generate_dhkey_complete_event_int_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[22]">hci_le_long_term_key_request_event_cb</a> from aci_events.o(i.hci_le_long_term_key_request_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[5c]">hci_le_long_term_key_request_event_int_cb</a> from aci_events.o(i.hci_le_long_term_key_request_event_int_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[24]">hci_le_read_local_p256_public_key_complete_event_cb</a> from aci_events.o(i.hci_le_read_local_p256_public_key_complete_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[5e]">hci_le_read_local_p256_public_key_complete_event_int_cb</a> from aci_events.o(i.hci_le_read_local_p256_public_key_complete_event_int_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[2b]">hci_le_read_remote_used_features_complete_event_cb</a> from aci_events.o(i.hci_le_read_remote_used_features_complete_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[2d]">hci_number_of_completed_packets_event_cb</a> from aci_events.o(i.hci_number_of_completed_packets_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[29]">hci_read_remote_version_information_complete_event_cb</a> from aci_events.o(i.hci_read_remote_version_information_complete_event_cb) referenced from aci_events.o(.constdata)
 <LI><a href="#[2e]">hci_rx_acl_data_event_cb</a> from aci_events.o(i.hci_rx_acl_data_event_cb) referenced from aci_events.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[62]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
</UL>

<P><STRONG><a name="[63]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[65]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2c3]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2c4]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[66]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[2c5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[bf]"></a>CS_contextSave</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, context_switch.o(. text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_InternalSleep
</UL>

<P><STRONG><a name="[237]"></a>CS_contextRestore</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, context_switch.o(. text))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
</UL>

<P><STRONG><a name="[c4]"></a>BlueNRG_IdleSleep</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_switch.o(. text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Sleep
</UL>

<P><STRONG><a name="[7d]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[67]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[68]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[6a]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[6d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[2c6]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2c7]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2c8]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2c9]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2ca]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[2cb]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2cc]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[2cd]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2ce]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[2cf]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2d0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2d1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2d2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2d3]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2d4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2d5]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[2d6]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2d7]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[2d8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[2d9]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[2da]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[72]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[2db]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[2dc]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[2dd]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2de]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[2df]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[2e0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[2e1]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[64]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2e2]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2e3]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry6.o(.ARM.Collect$$rtentry$$00000006))

<P><STRONG><a name="[6c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2e4]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[6e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; BTLE_StackTick &rArr; Timer_ProcessQ &rArr; TimerCallback &rArr; HAL_VTimerTimeoutCallback &rArr; sleep_timer &rArr;  BTLE_StackTick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2e5]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[8b]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[71]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2e6]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[73]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Delete_ADType
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Beaconing
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceConfiguration
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_f5_Keys
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Add_To_Database
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Determine_Key_Association_Method
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sca
</UL>

<P><STRONG><a name="[2e7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[75]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_timer
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerTimeoutCallback
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Beaconing
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[87]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[69]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[6b]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[2e8]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__printf</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1c3]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>

<P><STRONG><a name="[7e]"></a>memcpy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>

<P><STRONG><a name="[2e9]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>memset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>

<P><STRONG><a name="[83]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[82]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[2ea]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Delete_ADType
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey
</UL>

<P><STRONG><a name="[2eb]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_uread4</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Flash_Store_Data
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_channel_map
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect_master
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_addr
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adv_addr
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Start_Encryption
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_keyschedule_enc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Append
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_TO_NRG_32
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_OwnAddress
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_DirectAddress
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128ECB_Wrapper
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
</UL>

<P><STRONG><a name="[2ec]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Db_Check
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
</UL>

<P><STRONG><a name="[2ee]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>__aeabi_idivmod</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_slot
</UL>

<P><STRONG><a name="[7a]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[76]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[79]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[88]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[89]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[70]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[74]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2ef]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>ADC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.ADC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[8c]"></a>AES128ECB_Wrapper</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, aes128cmac.o(i.AES128ECB_Wrapper))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_keyschedule_enc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_general_SW_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data
</UL>

<P><STRONG><a name="[90]"></a>AES_CMAC_Encrypt</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, aes128cmac.o(i.AES_CMAC_Encrypt))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Finish
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Append
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_f6_Check_Val
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_f5_Keys
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_g2_NumComp_Val
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_f4_Confirm
</UL>

<P><STRONG><a name="[92]"></a>AES_CMAC_Encrypt_Append</STRONG> (Thumb, 642 bytes, Stack size unknown bytes, crypto.o(i.AES_CMAC_Encrypt_Append))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_general_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Finish
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt
</UL>

<P><STRONG><a name="[93]"></a>AES_CMAC_Encrypt_Finish</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, crypto.o(i.AES_CMAC_Encrypt_Finish))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Append
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt
</UL>

<P><STRONG><a name="[91]"></a>AES_CMAC_Encrypt_Init</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, crypto.o(i.AES_CMAC_Encrypt_Init))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AESstdInit
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt
</UL>

<P><STRONG><a name="[8f]"></a>AES_general_SW_enc</STRONG> (Thumb, 604 bytes, Stack size unknown bytes, crypto.o(i.AES_general_SW_enc))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_general_enc
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128ECB_Wrapper
</UL>

<P><STRONG><a name="[8d]"></a>AES_keyschedule_enc</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, crypto.o(i.AES_keyschedule_enc))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_keyschedule_enc_LL
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AESstdInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128ECB_Wrapper
</UL>

<P><STRONG><a name="[97]"></a>Accu_Handles_Requiring_Auth</STRONG> (Thumb, 110 bytes, Stack size unknown bytes, rom_att.o(i.Accu_Handles_Requiring_Auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Accu_Handles_Requiring_Auth &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
</UL>

<P><STRONG><a name="[9c]"></a>Accu_UuidTypes_Requiring_Auth</STRONG> (Thumb, 232 bytes, Stack size unknown bytes, rom_att.o(i.Accu_UuidTypes_Requiring_Auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Accu_UuidTypes_Requiring_Auth &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
</UL>

<P><STRONG><a name="[9e]"></a>Acl_Clone_Fragment</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, pm.o(i.Acl_Clone_Fragment))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Acl_Clone_Fragment &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_ind_event_int_cb
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Clone_Pckt
</UL>

<P><STRONG><a name="[a1]"></a>Acl_Disconnected_Peer</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, acl.o(i.Acl_Disconnected_Peer))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_In_Stat
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>

<P><STRONG><a name="[1cf]"></a>Acl_Get_Last</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, pm.o(i.Acl_Get_Last))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Append_Fragment
</UL>

<P><STRONG><a name="[a0]"></a>Acl_Get_Pack_Off</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, pm.o(i.Acl_Get_Pack_Off))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Pckt_Cmp
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Copy_Data
</UL>

<P><STRONG><a name="[a4]"></a>Acl_Init</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, acl.o(i.Acl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Acl_Init &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[a6]"></a>Acl_Rcv_Pkt_Handler</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, acl.o(i.Acl_Rcv_Pkt_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
</UL>

<P><STRONG><a name="[a9]"></a>Acl_Transmit_Data</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, acl.o(i.Acl_Transmit_Data))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_Process_Q
</UL>

<P><STRONG><a name="[aa]"></a>Acl_Transmit_Packet</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, acl.o(i.Acl_Transmit_Packet))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_advance
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
</UL>

<P><STRONG><a name="[ad]"></a>Acl_Tx_Cmpl_Pkt_Handler</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, acl.o(i.Acl_Tx_Cmpl_Pkt_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
</UL>

<P><STRONG><a name="[c3]"></a>App_SleepMode_Check</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sleep.o(i.App_SleepMode_Check))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Sleep
</UL>

<P><STRONG><a name="[ae]"></a>Att_Send_Read_Blob_Req_Pdu</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, rom_att.o(i.Att_Send_Read_Blob_Req_Pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Att_Send_Read_Blob_Req_Pdu &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>

<P><STRONG><a name="[b0]"></a>Att_Send_Read_By_Typ_Req_Pdu</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, rom_att.o(i.Att_Send_Read_By_Typ_Req_Pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Att_Send_Read_By_Typ_Req_Pdu &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid
</UL>

<P><STRONG><a name="[b2]"></a>BTLE_StackTick</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BTLE_StackTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = BTLE_StackTick &rArr; Timer_ProcessQ &rArr; TimerCallback &rArr; HAL_VTimerTimeoutCallback &rArr; sleep_timer &rArr;  BTLE_StackTick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_Q
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Process_Q
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Crystal_Check
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_advance_transmit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_Process_Q
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Process_Q
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_timer
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>BlueNRG_Sleep</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sleep.o(i.BlueNRG_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = BlueNRG_Sleep &rArr; BlueNRG_InternalSleep &rArr; DeviceConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SleepMode_Check
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Deep_Sleep_Check
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_IdleSleep
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_InternalSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_timer
</UL>

<P><STRONG><a name="[c5]"></a>BlueNRG_Stack_Initialization</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = BlueNRG_Stack_Initialization &rArr; _BlueNRG_Stack_Initialization &rArr; BlueNRG_Stack_Initialize_Layers &rArr; SMP_Init &rArr; smp____SC_initialize &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM_check
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>BlueNRG_Stack_Initialize_ConfigData</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Initialize_ConfigData))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_get_hw_version
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[ca]"></a>BlueNRG_Stack_Initialize_Layers</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Initialize_Layers))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = BlueNRG_Stack_Initialize_Layers &rArr; SMP_Init &rArr; smp____SC_initialize &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init_Context
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[d4]"></a>BlueNRG_Stack_Initialize_RAM</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Initialize_RAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = BlueNRG_Stack_Initialize_RAM &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator_noRet
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_ctx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[c6]"></a>BlueNRG_Stack_Initialize_RAM_check</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Initialize_RAM_check))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator_noRet
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[c2]"></a>BlueNRG_Stack_Perform_Deep_Sleep_Check</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Perform_Deep_Sleep_Check))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepSleepTimers_check
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Sleep
</UL>

<P><STRONG><a name="[d8]"></a>BlueNRG_Start_Crystal_Measurement</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BlueNRG_Start_Crystal_Measurement))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Crystal_Check
</UL>

<P><STRONG><a name="[f]"></a>Blue_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bluenrg1_it.o(i.Blue_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Blue_Handler &rArr; RAL_Isr &rArr; isr_event_handler_patched &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[dc]"></a>Blue_Init_Global</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, routines_support.o(i.Blue_Init_Global))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Set_Radio_Config_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[dd]"></a>Blue_Set_Radio_Config_Data</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, rom_ll_routines_support.o(i.Blue_Set_Radio_Config_Data))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Init_Global
</UL>

<P><STRONG><a name="[df]"></a>Build_Notif_Or_Ind</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, gatt_server.o(i.Build_Notif_Or_Ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Build_Notif_Or_Ind &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
</UL>

<P><STRONG><a name="[e0]"></a>CheckSecForSignedWrite</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, att.o(i.CheckSecForSignedWrite))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
</UL>

<P><STRONG><a name="[156]"></a>Check_Encry_Key_Size</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, rom_gatt_server.o(i.Check_Encry_Key_Size))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Descriptor
</UL>

<P><STRONG><a name="[e3]"></a>Check_Flags</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, gatt_client.o(i.Check_Flags))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_ConnHandle
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid
</UL>

<P><STRONG><a name="[e7]"></a>Check_For_Service_Change</STRONG> (Thumb, 768 bytes, Stack size unknown bytes, gatt_server.o(i.Check_For_Service_Change))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Check_For_Service_Change &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Read_Peer_Bonded_Data
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fetch_Handle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ind_Service_Change_Charac
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[ec]"></a>Check_Permission</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, rom_att.o(i.Check_Permission))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Link_Status
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Check_Encryption_KeySize
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
</UL>

<P><STRONG><a name="[ef]"></a>Check_Serv_Chng_Charac_Ind_Not</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, rom_gatt_server.o(i.Check_Serv_Chng_Charac_Ind_Not))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Service_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Db_Check
</UL>

<P><STRONG><a name="[f1]"></a>Check_Stat</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, acl.o(i.Check_Stat))
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_tx_cmpl_event_int_cb
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_ind_event_int_cb
</UL>

<P><STRONG><a name="[b5]"></a>Controller_Process_Q</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, hci.o(i.Controller_Process_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Controller_Process_Q &rArr; PRIV_u8OfflineProcessing &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_u8OfflineProcessing
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Offline_Processing
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[1a]"></a>DMA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.DMA_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[234]"></a>Delay_With_NOP_Cycles</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, utils.o(i.Delay_With_NOP_Cycles))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SDBRecord
</UL>

<P><STRONG><a name="[c0]"></a>DeviceConfiguration</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, system_bluenrg1.o(i.DeviceConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DeviceConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_InternalSleep
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[f4]"></a>Device_Init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, micro_sleep_test_main.o(i.Device_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Device_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>Dynamic_allocator</STRONG> (Thumb, 614 bytes, Stack size unknown bytes, mem_alloc.o(i.Dynamic_allocator))
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM_check
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM
</UL>

<P><STRONG><a name="[d6]"></a>Dynamic_allocator_noRet</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, mem_alloc.o(i.Dynamic_allocator_noRet))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM_check
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM
</UL>

<P><STRONG><a name="[b6]"></a>Events_Process_Q</STRONG> (Thumb, 278 bytes, Stack size unknown bytes, aci_events.o(i.Events_Process_Q))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_hardware_error_event
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_radio_activity_state_callback_check
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[d3]"></a>Events_Process_init</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, aci_events.o(i.Events_Process_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Events_Process_init &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_radio_activity_state_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifoCtrl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[ff]"></a>Exchg_Mtu_Resp</STRONG> (Thumb, 174 bytes, Stack size unknown bytes, rom_att.o(i.Exchg_Mtu_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Exchg_Mtu_Resp &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[101]"></a>Exec_Write_Resp</STRONG> (Thumb, 596 bytes, Stack size unknown bytes, att.o(i.Exec_Write_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Exec_Write_Resp &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_get_pckt_count
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Pckt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[fa]"></a>FLASH_ErasePage</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bluenrg1_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_ErasePage
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitCmdDone
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Sector
</UL>

<P><STRONG><a name="[108]"></a>FLASH_ProgramWord</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bluenrg1_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitCmdDone
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Flash_Store_Data
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvaliDate_Record
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Flagged
</UL>

<P><STRONG><a name="[107]"></a>FLASH_WaitCmdDone</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bluenrg1_flash.o(i.FLASH_WaitCmdDone))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[e9]"></a>Fetch_Handle</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, rom_gatt_server.o(i.Fetch_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
</UL>

<P><STRONG><a name="[ea]"></a>Find_Attr_Index</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, gatt_server.o(i.Find_Attr_Index))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Server_Database_And_Reset_CCCD
</UL>

<P><STRONG><a name="[109]"></a>Find_By_Type_Val_Resp</STRONG> (Thumb, 662 bytes, Stack size unknown bytes, att.o(i.Find_By_Type_Val_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Find_By_Type_Val_Resp &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Extend_Pckt_Pdu_Size
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Pckt_Cmp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_ConnHandle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[10c]"></a>Find_Client_Data</STRONG> (Thumb, 200 bytes, Stack size unknown bytes, rom_sdb.o(i.Find_Client_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Find_Client_Data &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_32
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_GattDb_Start_Addr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Max_SecDb_Size
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecordValidity
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Read_Peer_Bonded_Data
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Delete
</UL>

<P><STRONG><a name="[e4]"></a>Find_Gatt_Client</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, gatt_client.o(i.Find_Gatt_Client))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler_ISR
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Server_Database_And_Reset_CCCD
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Flags
</UL>

<P><STRONG><a name="[111]"></a>Find_Info_Resp</STRONG> (Thumb, 518 bytes, Stack size unknown bytes, rom_att.o(i.Find_Info_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Find_Info_Resp &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Extend_Pckt_Pdu_Size
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_ConnHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[198]"></a>Find_L2cap_signalling_connection</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, l2cap.o(i.Find_L2cap_signalling_connection))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Connection_Complete_Signal_Handler
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Command_Reject_Pdu
</UL>

<P><STRONG><a name="[148]"></a>Find_Timed_Out_Connection</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, gatt_server.o(i.Find_Timed_Out_Connection))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_TimeOut_Handler
</UL>

<P><STRONG><a name="[112]"></a>Flash_Write_Client_Data</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, sdb.o(i.Flash_Write_Client_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Flash_Write_Client_Data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Resolve_Private_Address
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Delete
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SDBRecord
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecordValidity
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SecRec_Len_In_Words
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Server_Database_And_Reset_CCCD
</UL>

<P><STRONG><a name="[118]"></a>Flash_Write_Flagged</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, nvm.o(i.Flash_Write_Flagged))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Flash_Write_Flagged &rArr; FLASH_ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SDBRecord
</UL>

<P><STRONG><a name="[119]"></a>GAP_Connection_Complete_Handler</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, gap.o(i.GAP_Connection_Complete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GAP_Connection_Complete_Handler &rArr; aci_gap_proc_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
</UL>

<P><STRONG><a name="[11b]"></a>GAP_Delete_ADType</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, rom_gap_rom.o(i.GAP_Delete_ADType))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GAP_Delete_ADType &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Data
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Adv_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
</UL>

<P><STRONG><a name="[11f]"></a>GAP_DiscProcTimeoutcb</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, gap.o(i.GAP_DiscProcTimeoutcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GAP_DiscProcTimeoutcb &rArr; aci_gap_proc_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_push
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[121]"></a>GAP_Init</STRONG> (Thumb, 478 bytes, Stack size unknown bytes, gap.o(i.GAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GAP_Init &rArr; Gatt_Update_Charac_Value &rArr; Gatt_Update_Charac_Value_Ext &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAddressResolutionEnable
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Resolvable_Private_Address_Timeout
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_StaticRandAddr
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_event_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
</UL>

<P><STRONG><a name="[d0]"></a>GAP_Init_Context</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, gap.o(i.GAP_Init_Context))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[12a]"></a>GAP_Internal_Evt_Handler</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, gap.o(i.GAP_Internal_Evt_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GAP_Internal_Evt_Handler &rArr; aci_gap_proc_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Check_Not_Error_Resp
</UL>

<P><STRONG><a name="[12b]"></a>GAP_LL_Event_Handler_ISR</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, gap.o(i.GAP_LL_Event_Handler_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GAP_LL_Event_Handler_ISR &rArr; GAP_Connection_Complete_Handler &rArr; aci_gap_proc_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Parse_Advertising_Report
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Connection_Complete_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_int_cb
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_direct_advertising_report_event_int_cb
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_int_cb
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event_int_cb
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event_int_cb
</UL>

<P><STRONG><a name="[12d]"></a>GAP_LimDiscTimeoutcb</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, gap.o(i.GAP_LimDiscTimeoutcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GAP_LimDiscTimeoutcb &rArr; LL_Enable_Disable_Adv &rArr; schedule_advertise_slot &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event_push
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[130]"></a>GAP_Notify_Add_Charac</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, rom_gap_rom.o(i.GAP_Notify_Add_Charac))
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Number_Of_Records
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Num_Charac_Present
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
</UL>

<P><STRONG><a name="[12c]"></a>GAP_Parse_Advertising_Report</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, gap.o(i.GAP_Parse_Advertising_Report))
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GAP_Parse_Advertising_Report
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
</UL>

<P><STRONG><a name="[134]"></a>GAP_Privacy1v2</STRONG> (Thumb, 448 bytes, Stack size unknown bytes, rom_gap.o(i.GAP_Privacy1v2))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GAP_Privacy1v2 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Resolvable_Private_Address
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_ScanAddress
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_AdvAddress
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Allow_Address_Setting
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_Non_Resolvable_Private_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
</UL>

<P><STRONG><a name="[13c]"></a>GAP_PrivateAddrTimercb</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, rom_gap.o(i.GAP_PrivateAddrTimercb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GAP_PrivateAddrTimercb &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_advertiser
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[ba]"></a>GAP_Process_Q</STRONG> (Thumb, 102 bytes, Stack size unknown bytes, gap.o(i.GAP_Process_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GAP_Process_Q &rArr; Gatt_Read_Charac_By_Uuid &rArr; Att_Send_Read_By_Typ_Req_Pdu &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event_push
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[140]"></a>GAP_Set_Discoverable_Mode</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, gap.o(i.GAP_Set_Discoverable_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GAP_Set_Discoverable_Mode &rArr; _gap_set_discoverable_connectable &rArr; GAP_Privacy1v2 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
</UL>

<P><STRONG><a name="[142]"></a>GAP_Set_Non_Discoverable_Mode</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, gap.o(i.GAP_Set_Non_Discoverable_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GAP_Set_Non_Discoverable_Mode &rArr; _gap_set_discoverable_connectable &rArr; GAP_Privacy1v2 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
</UL>

<P><STRONG><a name="[173]"></a>GAP_Started_Gatt_Proc</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, gap.o(i.GAP_Started_Gatt_Proc))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>

<P><STRONG><a name="[15f]"></a>GATT_Clear_Flag</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, rom_att.o(i.GATT_Clear_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[143]"></a>GATT_Connection_Complete_Handler</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, gatt_server.o(i.GATT_Connection_Complete_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Server_Set_Flag
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler_ISR
</UL>

<P><STRONG><a name="[131]"></a>GATT_Num_Charac_Present</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, rom_gatt_server.o(i.GATT_Num_Charac_Present))
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GAP_Handle
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Service_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Notify_Add_Charac
</UL>

<P><STRONG><a name="[145]"></a>GATT_Set_Flag</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, rom_att.o(i.GATT_Set_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Notif_Or_Ind
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Connection_Complete_Handler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>

<P><STRONG><a name="[147]"></a>GATT_TimeOut_Handler</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, gatt_server.o(i.GATT_TimeOut_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Timed_Out_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[149]"></a>GPIO_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bluenrg1_gpio.o(i.GPIO_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
</UL>

<P><STRONG><a name="[14a]"></a>GPIO_Configuration</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hw_config.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_PeripheralClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Config
</UL>

<P><STRONG><a name="[14e]"></a>GPIO_GetITPendingBit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, bluenrg1_gpio.o(i.GPIO_GetITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_GetITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
</UL>

<P><STRONG><a name="[b]"></a>GPIO_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bluenrg1_it.o(i.GPIO_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Handler &rArr; SdkEvalLedToggle &rArr; GPIO_ToggleBits
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetITPendingBit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearITPendingBit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedToggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[14d]"></a>GPIO_Init</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, bluenrg1_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[14c]"></a>GPIO_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bluenrg1_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[150]"></a>GPIO_ToggleBits</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bluenrg1_gpio.o(i.GPIO_ToggleBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ToggleBits
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedToggle
</UL>

<P><STRONG><a name="[29f]"></a>GapIsPrivacySupported</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, rom_gap.o(i.GapIsPrivacySupported))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[151]"></a>Gatt_Add_Charac_Desc</STRONG> (Thumb, 342 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Add_Charac_Desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Gatt_Add_Charac_Desc &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value_Ext &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Get_Size
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Service_Handle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ind_Service_Change_Charac
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Db_Check
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Descriptor
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
</UL>

<P><STRONG><a name="[128]"></a>Gatt_Add_Characteristic</STRONG> (Thumb, 802 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Add_Characteristic))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Gatt_Add_Characteristic &rArr; Gatt_Add_Charac_Desc &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value_Ext &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Get_Size
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GAP_Handle
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Notify_Add_Charac
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Encry_Key_Size
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Service_Handle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ind_Service_Change_Charac
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Db_Check
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[155]"></a>Gatt_Add_Descriptor</STRONG> (Thumb, 326 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Add_Descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Gatt_Add_Descriptor &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Encry_Key_Size
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
</UL>

<P><STRONG><a name="[127]"></a>Gatt_Add_Service</STRONG> (Thumb, 322 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Add_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Gatt_Add_Service &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Get_Size
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ind_Service_Change_Charac
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Db_Check
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[159]"></a>Gatt_Check_Not_Error_Resp</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, gatt_client.o(i.Gatt_Check_Not_Error_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Gatt_Check_Not_Error_Resp &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_error_resp_event_push
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Internal_Evt_Handler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>

<P><STRONG><a name="[1f8]"></a>Gatt_Find_Srv_From_Handle</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Find_Srv_From_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
</UL>

<P><STRONG><a name="[99]"></a>Gatt_Find_Srv_Owner_Of_Handle</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Find_Srv_Owner_Of_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_UuidTypes_Requiring_Auth
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_Handles_Requiring_Auth
</UL>

<P><STRONG><a name="[167]"></a>Gatt_Find_Timed_Out_Connection_Index</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Find_Timed_Out_Connection_Index))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Gatt_Timer
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Gatt_Timer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[15b]"></a>Gatt_Flush_Pending_AclPacket_Lists</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Flush_Pending_AclPacket_Lists))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_get_pckt_count
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[bb]"></a>Gatt_Process_Q</STRONG> (Thumb, 348 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Process_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Gatt_Process_Q &rArr; SMP_Check_Is_Device_Bonded &rArr; SDB_Find_Record &rArr; SM_Resolve_Private_Address &rArr; sm_Calculate_Hash &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Forget_Device_by_ConnHandle
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Check_Is_Device_Bonded
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Clear_Flag
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove_head
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_is_empty
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[13f]"></a>Gatt_Read_Charac_By_Uuid</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, gatt_client.o(i.Gatt_Read_Charac_By_Uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Gatt_Read_Charac_By_Uuid &rArr; Att_Send_Read_By_Typ_Req_Pdu &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Send_Read_By_Typ_Req_Pdu
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Flags
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Pckt
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Process_Q
</UL>

<P><STRONG><a name="[1d]"></a>Gatt_Read_Charac_By_Uuid_Cb</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, gatt_client.o(i.Gatt_Read_Charac_By_Uuid_Cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Gatt_Read_Charac_By_Uuid_Cb &rArr; Gatt_Super_Handler_Task7 &rArr; Att_Send_Read_Blob_Req_Pdu &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_client.o(i.Gatt_Read_Charac_By_Uuid)
</UL>
<P><STRONG><a name="[15c]"></a>Gatt_Reset_To_Closed_State</STRONG> (Thumb, 186 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Reset_To_Closed_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Gatt_Reset_To_Closed_State &rArr; Gatt_Store_Server_Database_And_Reset_CCCD &rArr; SMP_Check_Is_Device_Bonded &rArr; SDB_Find_Record &rArr; SM_Resolve_Private_Address &rArr; sm_Calculate_Hash &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Flush_Pending_AclPacket_Lists
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Timed_Out_Connection_Index
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Server_Database_And_Reset_CCCD
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[152]"></a>Gatt_Server_Db_Check</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Server_Db_Check))
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Available_Fragments
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Serv_Chng_Charac_Ind_Not
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
</UL>

<P><STRONG><a name="[16b]"></a>Gatt_Server_Init</STRONG> (Thumb, 384 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Server_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Gatt_Server_Init &rArr; Gatt_Update_Charac_Value &rArr; Gatt_Update_Charac_Value_Ext &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Server_Set_Flag
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
</UL>

<P><STRONG><a name="[16d]"></a>Gatt_Server_L2C_Handler</STRONG> (Thumb, 548 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Server_L2C_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Gatt_Server_L2C_Handler &rArr; Start_Gatt_Timer &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Gatt_Timer
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Gatt_Timer
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Available_Fragments
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Notif_Or_Ind
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Clear_Flag
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Pckt
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler
</UL>

<P><STRONG><a name="[171]"></a>Gatt_Server_L2C_Handler_ISR</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Server_L2C_Handler_ISR))
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Connection_Complete_Handler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Connection_Complete_Handler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>

<P><STRONG><a name="[166]"></a>Gatt_Super_Handler_Task7</STRONG> (Thumb, 418 bytes, Stack size unknown bytes, gatt_client.o(i.Gatt_Super_Handler_Task7))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Gatt_Super_Handler_Task7 &rArr; Att_Send_Read_Blob_Req_Pdu &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_16
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Clear_Flag
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Send_Read_Blob_Req_Pdu
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Check_Not_Error_Resp
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_complete_event_push
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_disc_read_char_by_uuid_resp_event_push
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_resp_event_push
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_multiple_resp_event_push
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_blob_resp_event_push
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Started_Gatt_Proc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Internal_Evt_Handler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_ConnHandle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Pckt
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid_Cb
</UL>

<P><STRONG><a name="[129]"></a>Gatt_Update_Charac_Value</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Update_Charac_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Gatt_Update_Charac_Value &rArr; Gatt_Update_Charac_Value_Ext &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Service_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[17b]"></a>Gatt_Update_Charac_Value_Ext</STRONG> (Thumb, 766 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Update_Charac_Value_Ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Gatt_Update_Charac_Value_Ext &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Extend_Pckt_Pdu_Size
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Notif_Or_Ind
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Service_Handle
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_Notif_Or_Ind
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Server_Set_Flag
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Pckt
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ind_Service_Change_Charac
</UL>

<P><STRONG><a name="[138]"></a>Generate_Non_Resolvable_Private_Address</STRONG> (Thumb, 130 bytes, Stack size unknown bytes, rom_gap.o(i.Generate_Non_Resolvable_Private_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Generate_Non_Resolvable_Private_Address &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
</UL>

<P><STRONG><a name="[146]"></a>Get_GAP_Handle</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, rom_gap_rom.o(i.Get_GAP_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Num_Charac_Present
</UL>

<P><STRONG><a name="[10e]"></a>Get_Max_SecDb_Size</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, sdb.o(i.Get_Max_SecDb_Size))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Client_Data
</UL>

<P><STRONG><a name="[115]"></a>Get_SecRec_Len_In_Words</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, rom_sdb.o(i.Get_SecRec_Len_In_Words))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SecRecord_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Client_Data
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Delete
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Number_Of_Records
</UL>

<P><STRONG><a name="[17f]"></a>Get_SecRecord_Size</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, sdb.o(i.Get_SecRecord_Size))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SDBRecord
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SecRec_Len_In_Words
</UL>

<P><STRONG><a name="[123]"></a>Get_StaticRandAddr</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, rom_gap_rom.o(i.Get_StaticRandAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Get_StaticRandAddr &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Local_Identity_Address
</UL>

<P><STRONG><a name="[180]"></a>HAL_Flash_Store_Data</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, hal.o(i.HAL_Flash_Store_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = HAL_Flash_Store_Data &rArr; FLASH_ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
</UL>

<P><STRONG><a name="[181]"></a>HAL_Generate_Random_Bytes_To</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, hal.o(i.HAL_Generate_Random_Bytes_To))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[d2]"></a>HAL_Init</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = HAL_Init &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[236]"></a>HAL_Set_TX_Power_Level</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, hal.o(i.HAL_Set_TX_Power_Level))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
</UL>

<P><STRONG><a name="[185]"></a>HAL_VTimerAcc_sysT32_ms</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, host_timer.o(i.HAL_VTimerAcc_sysT32_ms))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerStart_ms
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
</UL>

<P><STRONG><a name="[18b]"></a>HAL_VTimerDiff_ms_sysT32</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, host_timer.o(i.HAL_VTimerDiff_ms_sysT32))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerTimeoutCallback
</UL>

<P><STRONG><a name="[182]"></a>HAL_VTimerGetCurrentTime_sysT32</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, host_timer.o(i.HAL_VTimerGetCurrentTime_sysT32))
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_sysTime32_convMachineTime
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerStart_ms
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerTimeoutCallback
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Resolvable_Private_Address_Timeout
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_u8OfflineProcessing
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_vInit_Struct
</UL>

<P><STRONG><a name="[184]"></a>HAL_VTimerStart_ms</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, host_timer.o(i.HAL_VTimerStart_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = HAL_VTimerStart_ms &rArr; HAL_VTimerStart_sysT32 &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerGetCurrentTime_sysT32
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerStart_sysT32
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerAcc_sysT32_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_timer
</UL>

<P><STRONG><a name="[186]"></a>HAL_VTimerStart_sysT32</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, host_timer.o(i.HAL_VTimerStart_sysT32))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = HAL_VTimerStart_sysT32 &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot_sysTime32
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerStart_ms
</UL>

<P><STRONG><a name="[188]"></a>HAL_VTimerTimeoutCallback</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, micro_sleep_test_main.o(i.HAL_VTimerTimeoutCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = HAL_VTimerTimeoutCallback &rArr; sleep_timer &rArr;  BTLE_StackTick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_data
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_non_discoverable
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimer_Stop
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerGetCurrentTime_sysT32
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerDiff_ms_sysT32
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_timer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Beaconing
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[189]"></a>HAL_VTimer_Stop</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, host_timer.o(i.HAL_VTimer_Stop))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerTimeoutCallback
</UL>

<P><STRONG><a name="[d1]"></a>HCI_Init</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, hci.o(i.HCI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = HCI_Init &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[18f]"></a>HW_Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_config.o(i.HW_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_Config &rArr; UART_Configuration &rArr; UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17c]"></a>Hal_Get_Random_Number</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, hal.o(i.Hal_Get_Random_Number))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number32
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Resolvable_Private_Address
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_Non_Resolvable_Private_Address
</UL>

<P><STRONG><a name="[192]"></a>Hal_Get_Random_Number32</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, hal.o(i.Hal_Get_Random_Number32))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_vGeneratePrivateAddress
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_u8OfflineProcessing
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Generate_ECDH_Public_Key
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_LTK
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg1_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[13]"></a>I2C1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.I2C1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[12]"></a>I2C2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.I2C2_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[122]"></a>IDD_Initialize_Device_IDs</STRONG> (Thumb, 282 bytes, Stack size unknown bytes, device_id_data.o(i.IDD_Initialize_Device_IDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = IDD_Initialize_Device_IDs &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Flash_Store_Data
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Buffer_All_Set_To
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[eb]"></a>Ind_Service_Change_Charac</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, gatt_server.o(i.Ind_Service_Change_Charac))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value_Ext &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
</UL>

<P><STRONG><a name="[194]"></a>InvaliDate_Record</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, rom_sdb.o(i.InvaliDate_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = InvaliDate_Record &rArr; FLASH_ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
</UL>

<P><STRONG><a name="[1a7]"></a>Is_Address_Initialized</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.Is_Address_Initialized))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Params
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
</UL>

<P><STRONG><a name="[1e2]"></a>Is_Flash_Write_On_Going</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, nvm.o(i.Is_Flash_Write_On_Going))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[9b]"></a>L2CAP_Get_PDU_Len</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, l2cap.o(i.L2CAP_Get_PDU_Len))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchg_Mtu_Resp
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Notif_Or_Ind
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Check_Not_Error_Resp
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_resp_event_push
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_multiple_resp_event_push
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_blob_resp_event_push
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Stat
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Validate_Signed_Packet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_Handles_Requiring_Auth
</UL>

<P><STRONG><a name="[195]"></a>L2CAP_Reset_To_Closed_State</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, l2cap.o(i.L2CAP_Reset_To_Closed_State))
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_L2cap_conn_index
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler_ISR
</UL>

<P><STRONG><a name="[197]"></a>L2C_Build_Command_Reject_Pdu</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Build_Command_Reject_Pdu))
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_L2cap_signalling_connection
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_ConnHandle
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
</UL>

<P><STRONG><a name="[199]"></a>L2C_Connection_Complete_Handler</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Connection_Complete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = L2C_Connection_Complete_Handler &rArr; SM_L2CAP_Handler_ISR &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler_ISR
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>

<P><STRONG><a name="[19c]"></a>L2C_Connection_Complete_Signal_Handler</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Connection_Complete_Signal_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_L2cap_signalling_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler_ISR
</UL>

<P><STRONG><a name="[ce]"></a>L2C_Init</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Init))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[19d]"></a>L2C_Rcv_Event_Handler</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Rcv_Event_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = L2C_Rcv_Event_Handler &rArr; SM_L2CAP_Handler &rArr; smp_Keys_Distribution_Complete &rArr; smp_Pairing_Completed &rArr; smp_Add_To_Database &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_tx_cmpl_event_int_cb
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_ind_event_int_cb
</UL>

<P><STRONG><a name="[1a0]"></a>L2C_Rcv_Event_Handler_ISR</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Rcv_Event_Handler_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = L2C_Rcv_Event_Handler_ISR &rArr; SM_L2CAP_Handler_ISR &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Encryption_changed_Handler_ISR
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler_ISR
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Connection_Complete_Handler
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler_ISR
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Disconnected_Peer
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_event_int_cb
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_int_cb
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_int_cb
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_int_cb
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_int_cb
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event_int_cb
</UL>

<P><STRONG><a name="[164]"></a>L2C_Send_Data</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Send_Data))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Command_Reject_Pdu
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____Pairing_2Octets_Packet_Send
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Send_Data
</UL>

<P><STRONG><a name="[1a2]"></a>L2C_SigChan_Req_TimeOut_Handler</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, l2cap.o(i.L2C_SigChan_Req_TimeOut_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[19f]"></a>L2C_Signal_Channel_Handler</STRONG> (Thumb, 404 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Signal_Channel_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = L2C_Signal_Channel_Handler &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Command_Reject_Pdu
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_req_event_push
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_L2cap_conn_index
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler
</UL>

<P><STRONG><a name="[19b]"></a>L2C_Signal_Channel_Handler_ISR</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Signal_Channel_Handler_ISR))
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Connection_Complete_Signal_Handler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Reset_To_Closed_State
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Connection_Complete_Handler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>

<P><STRONG><a name="[1a4]"></a>LE_TO_NRG_32</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, utils.o(i.LE_TO_NRG_32))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Validate_Signed_Packet
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SDBRecord
</UL>

<P><STRONG><a name="[135]"></a>LL_Allow_Address_Setting</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Allow_Address_Setting))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_advertiser
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_connection
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
</UL>

<P><STRONG><a name="[1a6]"></a>LL_Check_And_Set_Addresses</STRONG> (Thumb, 434 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Check_And_Set_Addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = LL_Check_And_Set_Addresses &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_vGeneratePrivateAddress
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_u8SearchAddrInList
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Address_Initialized
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_OwnAddress
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_DirectAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Params
</UL>

<P><STRONG><a name="[12e]"></a>LL_Enable_Disable_Adv</STRONG> (Thumb, 432 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Enable_Disable_Adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = LL_Enable_Disable_Adv &rArr; schedule_advertise_slot &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_advertiser
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Advertising_Buffers
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_advertise_slot
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_free_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LimDiscTimeoutcb
</UL>

<P><STRONG><a name="[120]"></a>LL_Enable_Disable_Scan</STRONG> (Thumb, 588 bytes, Stack size unknown bytes, ll_routines_master.o(i.LL_Enable_Disable_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = LL_Enable_Disable_Scan &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Sleep_Req
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_connection
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timebase
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_scan_slot
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_free_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DiscProcTimeoutcb
</UL>

<P><STRONG><a name="[1b4]"></a>LL_Encrypt_Plain_Data</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, ll_routines_support.o(i.LL_Encrypt_Plain_Data))
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128ECB_Wrapper
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_vGeneratePrivateAddress
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_u8ResolvePrivateAddress
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_u8OfflineProcessing
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Generate_SubKeys
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Calculate_Hash
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CMAC_Generate_Tag
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_LP_s1_Generate_STK
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_SR_Compute_c1_Confirm_Value
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_MI_Compute_c1_Confirm_Value
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_GenEDIV_RecovDIV
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
</UL>

<P><STRONG><a name="[1a5]"></a>LL_Get_Address</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Get_Address))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_SR_Compute_c1_Confirm_Value
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_MI_Compute_c1_Confirm_Value
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Advertising_Buffers
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Allow_Address_Setting
</UL>

<P><STRONG><a name="[136]"></a>LL_Get_AdvAddress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Get_AdvAddress))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_advertiser
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
</UL>

<P><STRONG><a name="[11d]"></a>LL_Get_Adv_Data</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Get_Adv_Data))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Delete_ADType
</UL>

<P><STRONG><a name="[1b6]"></a>LL_Get_Adv_Tx_Power_Level</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, rom_ll_routines_support.o(i.LL_Get_Adv_Tx_Power_Level))
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_power
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGapAdvData
</UL>

<P><STRONG><a name="[1b8]"></a>LL_Get_LTK</STRONG> (Thumb, 192 bytes, Stack size unknown bytes, ll_routines_support.o(i.LL_Get_LTK))
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number32
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_no
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[137]"></a>LL_Get_ScanAddress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Get_ScanAddress))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
</UL>

<P><STRONG><a name="[cc]"></a>LL_Init</STRONG> (Thumb, 372 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_Init &rArr; LL_LE_Clear_White_List &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Rcv_ACL_Data
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Clear_White_List
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Init_Global
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[1bb]"></a>LL_LE_Clear_White_List</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_LE_Clear_White_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_LE_Clear_White_List &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[1bd]"></a>LL_LE_Set_Address_Resolution_Enable</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_LE_Set_Address_Resolution_Enable))
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_advertiser
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetAddressResolutionEnable
</UL>

<P><STRONG><a name="[124]"></a>LL_LE_Set_Resolvable_Private_Address_Timeout</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_LE_Set_Resolvable_Private_Address_Timeout))
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerGetCurrentTime_sysT32
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[1ba]"></a>LL_Rcv_ACL_Data</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Rcv_ACL_Data))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_ind_event_int_cb
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[ab]"></a>LL_Send_ACL_Data</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Send_ACL_Data))
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_no
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Packet
</UL>

<P><STRONG><a name="[126]"></a>LL_SetAddressResolutionEnable</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, routines_support.o(i.LL_SetAddressResolutionEnable))
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Address_Resolution_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[11e]"></a>LL_Set_Adv_Data</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Set_Adv_Data))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Delete_ADType
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_data
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGapAdvData
</UL>

<P><STRONG><a name="[1be]"></a>LL_Set_Adv_Params</STRONG> (Thumb, 738 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Set_Adv_Params))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = LL_Set_Adv_Params &rArr; LL_Check_And_Set_Addresses &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_connection
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Address_Initialized
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
</UL>

<P><STRONG><a name="[1ad]"></a>LL_Set_Advertising_Buffers</STRONG> (Thumb, 130 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Set_Advertising_Buffers))
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>

<P><STRONG><a name="[1aa]"></a>LL_Set_DirectAddress</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Set_DirectAddress))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
</UL>

<P><STRONG><a name="[1ab]"></a>LL_Set_OwnAddress</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Set_OwnAddress))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
</UL>

<P><STRONG><a name="[293]"></a>LL_Set_Scan_Resp_Data</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Set_Scan_Resp_Data))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_response_data
</UL>

<P><STRONG><a name="[1b0]"></a>LL_Sleep_Req</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, rom_ll_routines_support.o(i.LL_Sleep_Req))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_advance
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan
</UL>

<P><STRONG><a name="[1bf]"></a>LL_Start_Encryption</STRONG> (Thumb, 228 bytes, Stack size unknown bytes, rom_ll_ll_routines_master.o(i.LL_Start_Encryption))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_no
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_PairingRequest_Send
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Complete
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_DHKeyCheck_Receive
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
</UL>

<P><STRONG><a name="[1c0]"></a>LL_Update_Advertising_Buffers</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Update_Advertising_Buffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = LL_Update_Advertising_Buffers &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>

<P><STRONG><a name="[1c1]"></a>LL_Update_Scanning_Initiating_Buffers</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Update_Scanning_Initiating_Buffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = LL_Update_Scanning_Initiating_Buffers &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>

<P><STRONG><a name="[1e9]"></a>LL_receive_data_patch</STRONG> (Thumb, 186 bytes, Stack size unknown bytes, isr_routines.o(i.LL_receive_data_patch))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[1eb]"></a>LL_update_proc</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.LL_update_proc))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_slave
</UL>

<P><STRONG><a name="[153]"></a>List_Circular_Get_Size</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, rom_list.o(i.List_Circular_Get_Size))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
</UL>

<P><STRONG><a name="[267]"></a>List_Circular_Insert_Head</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, rom_list.o(i.List_Circular_Insert_Head))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_head
</UL>

<P><STRONG><a name="[158]"></a>List_Circular_Insert_Tail</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, rom_list.o(i.List_Circular_Insert_Tail))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Descriptor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot_sysTime32
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
</UL>

<P><STRONG><a name="[1c2]"></a>List_Circular_Node_Present</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, rom_list.o(i.List_Circular_Node_Present))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
</UL>

<P><STRONG><a name="[22b]"></a>List_Circular_Remove_Head</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, rom_list.o(i.List_Circular_Remove_Head))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove_head
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot_sysTime32
</UL>

<P><STRONG><a name="[157]"></a>List_Circular_Remove_Node</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, rom_list.o(i.List_Circular_Remove_Node))
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Node_Present
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Descriptor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
</UL>

<P><STRONG><a name="[14]"></a>MFT1A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.MFT1A_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[15]"></a>MFT1B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.MFT1B_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[16]"></a>MFT2A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.MFT2A_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[17]"></a>MFT2B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.MFT2B_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg1_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[c]"></a>NVM_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.NVM_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[9d]"></a>Osal_MemCmp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, osal.o(i.Osal_MemCmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_u8ResolvePrivateAddress
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_u8SearchAddrInList
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_u8AddAddrInList
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Pckt_Cmp
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Repeated_Attacks_Timer_cb
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_u8OfflineProcessing
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Validate_Signed_Packet
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_UuidTypes_Requiring_Auth
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_DHKeyCheck_Receive
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Pairing_OOB_Confirm_Receive_and_Verify
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_PairingPublicKey_Receive
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_OOB_Check_Is_Remote_Data_Present
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Search_BlackList
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_RepeatedAttacks_Protection
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_Long_Term_Key
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Resolve_Private_Address
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Client_Data
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_Non_Resolvable_Private_Address
</UL>

<P><STRONG><a name="[98]"></a>Osal_MemCpy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, osal.o(i.Osal_MemCpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Delete_ADType
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialization
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_vGeneratePrivateAddress
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_u8RemoveAddrInList
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_u8AddAddrInList
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Client_Data
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchg_Mtu_Resp
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_data
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Descriptor
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_Notif_Or_Ind
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Send_Read_By_Typ_Req_Pdu
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Send_Read_Blob_Req_Pdu
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Check_Not_Error_Resp
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_error_resp_event_push
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_StaticRandAddr
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGapAdvData
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advParamsCheckAndSet
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_push
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Update_Scanning_Initiating_Buffers
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Update_Advertising_Buffers
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Clone_Fragment
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_hci_le_read_local_p256_public_key_complete_evt_hndl
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_hci_le_generate_dhkey_complete_evt_hndl
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_u32ProcessAdvPacket
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot_sysTime32
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_u8OfflineProcessing
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_complete_event_push
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_complete_event_push
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Calculate_Hash
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CMAC_Generate_Tag
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2__Set_Addresses
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_Generate_DHKeyCheck
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Validate_Signed_Packet
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_UuidTypes_Requiring_Auth
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_Handles_Requiring_Auth
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_multi_permit_req_event_push
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event_push
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_initialize
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Connection_Complete_Handler
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_Start
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Local_Identity_Address
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Add_To_Database
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_LP_s1_Generate_STK
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_SR_Compute_c1_Confirm_Value
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_MI_Compute_c1_Confirm_Value
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_RepeatedAttacks_Protection
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_Long_Term_Key
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_GenEDIV_RecovDIV
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Data_From_Record
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Resolvable_Private_Address
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Copy_Data
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_push
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_direct_advertising_report_event_push
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_push
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event_push
</UL>

<P><STRONG><a name="[a5]"></a>Osal_MemSet</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, osal.o(i.Osal_MemSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_PairingRequest_Send
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_u8RemoveAddrInList
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Server_Database_And_Reset_CCCD
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Timer_cb
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Clear_White_List
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_vInit_Struct
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Calculate_Hash
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CMAC_Generate_Tag
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_Generate_DHKeyCheck
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_OOB_Clear_Remote_Data_Entry_by_Index
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_DHKeyCheck_Receive
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Pairing_OOB_Confirm_Receive_and_Verify
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Add_To_Database
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_SR_Compute_c1_Confirm_Value
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_MI_Compute_c1_Confirm_Value
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_Long_Term_Key
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_GenEDIV_RecovDIV
</UL>

<P><STRONG><a name="[1c4]"></a>PKA_Generate_ECDH_Public_Key</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, pka.o(i.PKA_Generate_ECDH_Public_Key))
<BR><BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_StartProcessing
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number32
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key
</UL>

<P><STRONG><a name="[1c6]"></a>PKA_GetData</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bluenrg1_pka.o(i.PKA_GetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PKA_GetData
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Offline_Processing
</UL>

<P><STRONG><a name="[1c7]"></a>PKA_GetProcessStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bluenrg1_pka.o(i.PKA_GetProcessStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Offline_Processing
</UL>

<P><STRONG><a name="[1c8]"></a>PKA_Get_Current_Operation</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, pka.o(i.PKA_Get_Current_Operation))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Offline_Processing
</UL>

<P><STRONG><a name="[19]"></a>PKA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.PKA_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[f3]"></a>PKA_Offline_Processing</STRONG> (Thumb, 184 bytes, Stack size unknown bytes, hci.o(i.PKA_Offline_Processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = PKA_Offline_Processing &rArr; hci_le_read_local_p256_public_key_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_VerifyProcess
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_GetProcessStatus
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_GetData
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Get_Current_Operation
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_complete_event_push
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_complete_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Process_Q
</UL>

<P><STRONG><a name="[235]"></a>PKA_Reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bluenrg1_pka.o(i.PKA_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[1cc]"></a>PKA_SetData</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bluenrg1_pka.o(i.PKA_SetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PKA_SetData
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Start_Generate_DHKey
</UL>

<P><STRONG><a name="[1c5]"></a>PKA_StartProcessing</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bluenrg1_pka.o(i.PKA_StartProcessing))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Start_Generate_DHKey
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Generate_ECDH_Public_Key
</UL>

<P><STRONG><a name="[1cd]"></a>PKA_Start_Generate_DHKey</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, pka.o(i.PKA_Start_Generate_DHKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = PKA_Start_Generate_DHKey &rArr; PKA_SetData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_StartProcessing
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_SetData
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey
</UL>

<P><STRONG><a name="[1c9]"></a>PKA_VerifyProcess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bluenrg1_pka.o(i.PKA_VerifyProcess))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Offline_Processing
</UL>

<P><STRONG><a name="[1ce]"></a>PM_Append_Fragment</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, pm.o(i.PM_Append_Fragment))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Get_Last
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_tx_cmpl_event_int_cb
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_ind_event_int_cb
</UL>

<P><STRONG><a name="[1d0]"></a>PM_Clone_Pckt</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, pm.o(i.PM_Clone_Pckt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = PM_Clone_Pckt &rArr; Acl_Clone_Fragment &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Clone_Fragment
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
</UL>

<P><STRONG><a name="[103]"></a>PM_Copy_Pckt_Data</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, pm.o(i.PM_Copy_Pckt_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = PM_Copy_Pckt_Data &rArr; Acl_Copy_Data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Copy_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_disc_read_char_by_uuid_resp_event_push
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_resp_event_push
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_multiple_resp_event_push
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_blob_resp_event_push
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CMAC_Generate_Tag
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Validate_Signed_Packet
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_permit_req_event_push
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_DHKeyCheck_Receive
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_PairingPublicKey_Receive
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Receive_Keys
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Receive
</UL>

<P><STRONG><a name="[1d2]"></a>PM_Eng_Config</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, pm.o(i.PM_Eng_Config))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Init
</UL>

<P><STRONG><a name="[10a]"></a>PM_Extend_Pckt_Pdu_Size</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, pm.o(i.PM_Extend_Pckt_Pdu_Size))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Fragments_Count
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_PairingPublicKey_Send
</UL>

<P><STRONG><a name="[169]"></a>PM_Get_Available_Fragments</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, pm.o(i.PM_Get_Available_Fragments))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Db_Check
</UL>

<P><STRONG><a name="[1d1]"></a>PM_Get_Fragments_Count</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, pm.o(i.PM_Get_Fragments_Count))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Extend_Pckt_Pdu_Size
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove_head
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_head
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_full_on_packt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
</UL>

<P><STRONG><a name="[e5]"></a>PM_Get_Pckt</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, pm.o(i.PM_Get_Pckt))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove_head
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_get_pckt_count
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_PairingRequest_Send
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Command_Reject_Pdu
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Extend_Pckt_Pdu_Size
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Flags
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_ind_event_int_cb
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_DHKeyCheck_Send
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_PairingPublicKey_Send
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____Pairing_2Octets_Packet_Send
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Send
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Receive
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
</UL>

<P><STRONG><a name="[cd]"></a>PM_Init</STRONG> (Thumb, 102 bytes, Stack size unknown bytes, pm.o(i.PM_Init))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Eng_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[10b]"></a>PM_Pckt_Cmp</STRONG> (Thumb, 106 bytes, Stack size unknown bytes, pm.o(i.PM_Pckt_Cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PM_Pckt_Cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Get_Pack_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Receive_Keys
</UL>

<P><STRONG><a name="[a3]"></a>PM_Release_Pckt</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, pm.o(i.PM_Release_Pckt))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Flush_Pending_AclPacket_Lists
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Disconnected_Peer
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_ind_event_int_cb
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_acl_data_done
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[af]"></a>PM_Set_Att_Pdu_Length</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, pm.o(i.PM_Set_Att_Pdu_Length))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Command_Reject_Pdu
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchg_Mtu_Resp
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Notif_Or_Ind
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_Notif_Or_Ind
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Send_Read_By_Typ_Req_Pdu
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Send_Read_Blob_Req_Pdu
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_DHKeyCheck_Send
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_PairingPublicKey_Send
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____Pairing_2Octets_Packet_Send
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Send
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Receive
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Build_Pairing_ReqResp_Packet
</UL>

<P><STRONG><a name="[e6]"></a>PM_Set_ConnHandle</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, pm.o(i.PM_Set_ConnHandle))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Command_Reject_Pdu
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Notif_Or_Ind
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Flags
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____Pairing_2Octets_Packet_Send
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Send_Data
</UL>

<P><STRONG><a name="[b1]"></a>PM_Write_Pckt_Data</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, pm.o(i.PM_Write_Pckt_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = PM_Write_Pckt_Data &rArr; Acl_Copy_Data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Copy_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_Notif_Or_Ind
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Send_Read_By_Typ_Req_Pdu
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_DHKeyCheck_Send
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_PairingPublicKey_Send
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Send
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Receive
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
</UL>

<P><STRONG><a name="[1d3]"></a>PRIVWHIT_u8AddAddrInList</STRONG> (Thumb, 458 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIVWHIT_u8AddAddrInList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = PRIVWHIT_u8AddAddrInList &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_u8SearchAddrInList
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_u8RemoveAddrInList
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_u8ResolvePrivateAddress
</UL>

<P><STRONG><a name="[1d4]"></a>PRIVWHIT_u8RemoveAddrInList</STRONG> (Thumb, 186 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIVWHIT_u8RemoveAddrInList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = PRIVWHIT_u8RemoveAddrInList &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_u8ResolvePrivateAddress
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_u8AddAddrInList
</UL>

<P><STRONG><a name="[1a8]"></a>PRIVWHIT_u8SearchAddrInList</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIVWHIT_u8SearchAddrInList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PRIVWHIT_u8SearchAddrInList &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_u8ResolvePrivateAddress
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_u8AddAddrInList
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
</UL>

<P><STRONG><a name="[1d5]"></a>PRIVWHIT_vInit_Struct</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIVWHIT_vInit_Struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PRIVWHIT_vInit_Struct &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerGetCurrentTime_sysT32
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[1e5]"></a>PRIV_SearchAddrInWhiteList</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIV_SearchAddrInWhiteList))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[1d6]"></a>PRIV_u32ProcessAdvPacket</STRONG> (Thumb, 1670 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIV_u32ProcessAdvPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = PRIV_u32ProcessAdvPacket &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_u8ResolvePrivateAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[f2]"></a>PRIV_u8OfflineProcessing</STRONG> (Thumb, 474 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIV_u8OfflineProcessing))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = PRIV_u8OfflineProcessing &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerGetCurrentTime_sysT32
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_u8ResolvePrivateAddress
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number32
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Process_Q
</UL>

<P><STRONG><a name="[1d7]"></a>PRIV_u8ResolvePrivateAddress</STRONG> (Thumb, 224 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIV_u8ResolvePrivateAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = PRIV_u8ResolvePrivateAddress &rArr; PRIVWHIT_u8RemoveAddrInList &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_u8SearchAddrInList
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_u8RemoveAddrInList
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_u8AddAddrInList
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_u32ProcessAdvPacket
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_u8OfflineProcessing
</UL>

<P><STRONG><a name="[1a9]"></a>PRIV_vGeneratePrivateAddress</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIV_vGeneratePrivateAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = PRIV_vGeneratePrivateAddress &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number32
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[1d8]"></a>Prepare_Write_Resp</STRONG> (Thumb, 400 bytes, Stack size unknown bytes, att.o(i.Prepare_Write_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Prepare_Write_Resp &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Extend_Pckt_Pdu_Size
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_full_on_packt
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_ConnHandle
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Clone_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[162]"></a>Process_Peer_Client_Data</STRONG> (Thumb, 546 bytes, Stack size unknown bytes, gatt_server.o(i.Process_Peer_Client_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Process_Peer_Client_Data &rArr; Write_Resp &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchg_Mtu_Resp
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Clear_Flag
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_get_pckt_count
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_ConnHandle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Pckt
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[160]"></a>Process_Peer_Server_Data</STRONG> (Thumb, 522 bytes, Stack size unknown bytes, gatt_server.o(i.Process_Peer_Server_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Process_Peer_Server_Data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Gatt_Timer
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Gatt_Timer
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Clear_Flag
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_get_pckt_count
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Pckt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[db]"></a>RAL_Isr</STRONG> (Thumb, 5894 bytes, Stack size unknown bytes, ll_isr.o(i.RAL_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = RAL_Isr &rArr; isr_event_handler_patched &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_update_request
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_channel_map
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_string
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rssi
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulo_37
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc_encrypt_data
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc1
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect_master
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_addr
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adv_addr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anchor_replace
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_u32ProcessAdvPacket
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_SearchAddrInWhiteList
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_update_proc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_receive_data_patch
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Flash_Write_On_Going
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ExpiryCallback
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Handler
</UL>

<P><STRONG><a name="[5]"></a>RESET_HANDLER</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system_bluenrg1.o(i.RESET_HANDLER))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = RESET_HANDLER &rArr; main &rArr; BTLE_StackTick &rArr; Timer_ProcessQ &rArr; TimerCallback &rArr; HAL_VTimerTimeoutCallback &rArr; sleep_timer &rArr;  BTLE_StackTick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[18]"></a>RTC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.RTC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[1dc]"></a>Read_Blob_Resp</STRONG> (Thumb, 352 bytes, Stack size unknown bytes, att.o(i.Read_Blob_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Read_Blob_Resp &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Extend_Pckt_Pdu_Size
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_ConnHandle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_permit_req_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[1de]"></a>Read_By_Grp_Type_Resp</STRONG> (Thumb, 852 bytes, Stack size unknown bytes, att.o(i.Read_By_Grp_Type_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Read_By_Grp_Type_Resp &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Extend_Pckt_Pdu_Size
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_From_Handle
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_ConnHandle
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[1da]"></a>Read_By_Type_Resp</STRONG> (Thumb, 828 bytes, Stack size unknown bytes, att.o(i.Read_By_Type_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Read_By_Type_Resp &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Extend_Pckt_Pdu_Size
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_16
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_ConnHandle
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_UuidTypes_Requiring_Auth
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_multi_permit_req_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[1dd]"></a>Read_Multi_Resp</STRONG> (Thumb, 416 bytes, Stack size unknown bytes, att.o(i.Read_Multi_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Read_Multi_Resp &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Extend_Pckt_Pdu_Size
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_ConnHandle
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_Handles_Requiring_Auth
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_multi_permit_req_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[10f]"></a>Read_RecordValidity</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, rom_sdb.o(i.Read_RecordValidity))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Client_Data
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Delete
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Client_Data
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Number_Of_Records
</UL>

<P><STRONG><a name="[1db]"></a>Read_Resp</STRONG> (Thumb, 326 bytes, Stack size unknown bytes, att.o(i.Read_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Read_Resp &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Extend_Pckt_Pdu_Size
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_ConnHandle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_permit_req_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[113]"></a>Read_SDBRecord</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, rom_sdb.o(i.Read_SDBRecord))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_32
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SecRecord_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Client_Data
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Delete
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>

<P><STRONG><a name="[1fa]"></a>Reclassify_All_Channels</STRONG> (Thumb, 184 bytes, Stack size unknown bytes, ll_routines_master.o(i.Reclassify_All_Channels))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
</UL>

<P><STRONG><a name="[1fb]"></a>SDB_Add_Record</STRONG> (Thumb, 424 bytes, Stack size unknown bytes, sdb.o(i.SDB_Add_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SDB_Add_Record &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Delete
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SDBRecord
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SDBRecord
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecordValidity
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvaliDate_Record
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SecRec_Len_In_Words
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Add_To_Database
</UL>

<P><STRONG><a name="[117]"></a>SDB_Delete</STRONG> (Thumb, 362 bytes, Stack size unknown bytes, sdb.o(i.SDB_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SDB_Delete &rArr; Write_Client_Data &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SDBRecord
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Sector
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_SecurityDb_Start_Addr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SDBRecord
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecordValidity
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SecRec_Len_In_Words
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Client_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Client_Data
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
</UL>

<P><STRONG><a name="[1fe]"></a>SDB_Find_Matching_LTK</STRONG> (Thumb, 162 bytes, Stack size unknown bytes, rom_sdb.o(i.SDB_Find_Matching_LTK))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SDB_Find_Matching_LTK &rArr; SMA_GenEDIV_RecovDIV &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_GenEDIV_RecovDIV
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_SecurityDb_Start_Addr
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Data_From_Record
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Max_SecDb_Size
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SDBRecord
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecordValidity
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SecRec_Len_In_Words
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_Long_Term_Key
</UL>

<P><STRONG><a name="[202]"></a>SDB_Find_Record</STRONG> (Thumb, 200 bytes, Stack size unknown bytes, sdb.o(i.SDB_Find_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SDB_Find_Record &rArr; SM_Resolve_Private_Address &rArr; sm_Calculate_Hash &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Resolve_Private_Address
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SDBRecord
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecordValidity
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SecRec_Len_In_Words
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Check_Is_Device_Bonded
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record_By_ConnHandle
</UL>

<P><STRONG><a name="[203]"></a>SDB_Find_Record_By_ConnHandle</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, sdb.o(i.SDB_Find_Record_By_ConnHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SDB_Find_Record_By_ConnHandle &rArr; SDB_Find_Record &rArr; SM_Resolve_Private_Address &rArr; sm_Calculate_Hash &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Read_Peer_Bonded_Data
</UL>

<P><STRONG><a name="[200]"></a>SDB_Get_Data_From_Record</STRONG> (Thumb, 222 bytes, Stack size unknown bytes, sdb.o(i.SDB_Get_Data_From_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SDB_Get_Data_From_Record &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>

<P><STRONG><a name="[232]"></a>SDB_Get_GattDb_End_Addr</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, sdb.o(i.SDB_Get_GattDb_End_Addr))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
</UL>

<P><STRONG><a name="[10d]"></a>SDB_Get_GattDb_Start_Addr</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, sdb.o(i.SDB_Get_GattDb_Start_Addr))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Client_Data
</UL>

<P><STRONG><a name="[132]"></a>SDB_Get_Number_Of_Records</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, rom_sdb.o(i.SDB_Get_Number_Of_Records))
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_SecurityDb_Start_Addr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecordValidity
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SecRec_Len_In_Words
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Notify_Add_Charac
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[1fd]"></a>SDB_Get_SecurityDb_Start_Addr</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, sdb.o(i.SDB_Get_SecurityDb_Start_Addr))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Delete
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Number_Of_Records
</UL>

<P><STRONG><a name="[e8]"></a>SDB_Read_Peer_Bonded_Data</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, sdb.o(i.SDB_Read_Peer_Bonded_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SDB_Read_Peer_Bonded_Data &rArr; SDB_Find_Record_By_ConnHandle &rArr; SDB_Find_Record &rArr; SM_Resolve_Private_Address &rArr; sm_Calculate_Hash &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record_By_ConnHandle
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Client_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
</UL>

<P><STRONG><a name="[201]"></a>SMA_Diversify</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, ssm_algo.o(i.SMA_Diversify))
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_CSRK
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_Long_Term_Key
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_GenEDIV_RecovDIV
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_IRK
</UL>

<P><STRONG><a name="[1ff]"></a>SMA_GenEDIV_RecovDIV</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, ssm_algo.o(i.SMA_GenEDIV_RecovDIV))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SMA_GenEDIV_RecovDIV &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_Long_Term_Key
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>

<P><STRONG><a name="[204]"></a>SMA_Generate_CSRK</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, ssm_algo.o(i.SMA_Generate_CSRK))
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
</UL>

<P><STRONG><a name="[205]"></a>SMA_Generate_IRK</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, ssm_algo.o(i.SMA_Generate_IRK))
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Resolvable_Private_Address
</UL>

<P><STRONG><a name="[206]"></a>SMA_LP_s1_Generate_STK</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, ssm_algo.o(i.SMA_LP_s1_Generate_STK))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SMA_LP_s1_Generate_STK &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
</UL>

<P><STRONG><a name="[207]"></a>SMA_SC_Gen_f4_Confirm</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, ssm_algo.o(i.SMA_SC_Gen_f4_Confirm))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_swap_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Pairing_OOB_Confirm_Receive_and_Verify
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Send
</UL>

<P><STRONG><a name="[209]"></a>SMA_SC_Gen_f5_Keys</STRONG> (Thumb, 164 bytes, Stack size unknown bytes, ssm_algo.o(i.SMA_SC_Gen_f5_Keys))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_swap_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_Start
</UL>

<P><STRONG><a name="[20a]"></a>SMA_SC_Gen_f6_Check_Val</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, ssm_algo.o(i.SMA_SC_Gen_f6_Check_Val))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_swap_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_Generate_DHKeyCheck
</UL>

<P><STRONG><a name="[20b]"></a>SMA_SC_Gen_g2_NumComp_Val</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, ssm_algo.o(i.SMA_SC_Gen_g2_NumComp_Val))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_swap_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
</UL>

<P><STRONG><a name="[15e]"></a>SMP_Check_Is_Device_Bonded</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, sm_common.o(i.SMP_Check_Is_Device_Bonded))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SMP_Check_Is_Device_Bonded &rArr; SDB_Find_Record &rArr; SM_Resolve_Private_Address &rArr; sm_Calculate_Hash &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Server_Database_And_Reset_CCCD
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[15d]"></a>SMP_Forget_Device_by_ConnHandle</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, sm_common.o(i.SMP_Forget_Device_by_ConnHandle))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[cf]"></a>SMP_Init</STRONG> (Thumb, 106 bytes, Stack size unknown bytes, sm_common.o(i.SMP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SMP_Init &rArr; smp____SC_initialize &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[20d]"></a>SMP_MI_PairingRequest_Send</STRONG> (Thumb, 300 bytes, Stack size unknown bytes, securitymgr.o(i.SMP_MI_PairingRequest_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SMP_MI_PairingRequest_Send &rArr; smp_Send_Data &rArr; smp_Reset_Timer &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Start_Encryption
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_OOB_Check_Is_Remote_Data_Present
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Send_Data
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Search_BlackList
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Build_Pairing_ReqResp_Packet
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Build_AuthReq_Field
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_SecurityRequest_Receive
</UL>

<P><STRONG><a name="[bc]"></a>SMP_Process_Q</STRONG> (Thumb, 270 bytes, Stack size unknown bytes, securitymgr.o(i.SMP_Process_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SMP_Process_Q &rArr; hci_le_read_local_p256_public_key &rArr; hci_le_read_local_p256_public_key_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove_head
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_head
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Pckt
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_LTK
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____Pairing_Process_Abort
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_Exception_Cases
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Get_Long_Term_Key
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[21a]"></a>SMP_Repeated_Attacks_Timer_cb</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, sm_common.o(i.SMP_Repeated_Attacks_Timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMP_Repeated_Attacks_Timer_cb &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[21b]"></a>SMP_Timer_cb</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, sm_common.o(i.SMP_Timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMP_Timer_cb &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[ee]"></a>SM_Check_Encryption_KeySize</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, sm_common.o(i.SM_Check_Encryption_KeySize))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Permission
</UL>

<P><STRONG><a name="[139]"></a>SM_Generate_Resolvable_Private_Address</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, ssm_algo.o(i.SM_Generate_Resolvable_Private_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SM_Generate_Resolvable_Private_Address &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Calculate_Hash
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_IRK
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
</UL>

<P><STRONG><a name="[ed]"></a>SM_Get_Link_Status</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, sm_common.o(i.SM_Get_Link_Status))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Permission
</UL>

<P><STRONG><a name="[e2]"></a>SM_Get_Remote_Device_Info</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, sm_common.o(i.SM_Get_Remote_Device_Info))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_PairingRequest_Send
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Encryption_changed_Handler_ISR
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Forget_Device_by_ConnHandle
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Check_Is_Device_Bonded
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Client_Data
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Link_Status
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Validate_Signed_Packet
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecForSignedWrite
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Check_Encryption_KeySize
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record_By_ConnHandle
</UL>

<P><STRONG><a name="[1a1]"></a>SM_L2CAP_Encryption_changed_Handler_ISR</STRONG> (Thumb, 192 bytes, Stack size unknown bytes, sm_common.o(i.SM_L2CAP_Encryption_changed_Handler_ISR))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>

<P><STRONG><a name="[19e]"></a>SM_L2CAP_Handler</STRONG> (Thumb, 218 bytes, Stack size unknown bytes, sm_common.o(i.SM_L2CAP_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SM_L2CAP_Handler &rArr; smp_Keys_Distribution_Complete &rArr; smp_Pairing_Completed &rArr; smp_Add_To_Database &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Pckt
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler
</UL>

<P><STRONG><a name="[19a]"></a>SM_L2CAP_Handler_ISR</STRONG> (Thumb, 294 bytes, Stack size unknown bytes, sm_common.o(i.SM_L2CAP_Handler_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SM_L2CAP_Handler_ISR &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove_head
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_get_pckt_count
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Pckt
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Address_Initialized
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Connection_Complete_Handler
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Find_Remote_Device_Index
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Connection_Complete_Handler
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>

<P><STRONG><a name="[114]"></a>SM_Resolve_Private_Address</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, ssm_algo.o(i.SM_Resolve_Private_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SM_Resolve_Private_Address &rArr; sm_Calculate_Hash &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Calculate_Hash
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Client_Data
</UL>

<P><STRONG><a name="[223]"></a>SM_Validate_Signed_Packet</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, ssm_algo.o(i.SM_Validate_Signed_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SM_Validate_Signed_Packet &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CMAC_Generate_Tag
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_TO_NRG_32
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
</UL>

<P><STRONG><a name="[e]"></a>SPI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.SPI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[177]"></a>STORE_LE_16</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, utils.o(i.STORE_LE_16))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>

<P><STRONG><a name="[110]"></a>STORE_LE_32</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, utils.o(i.STORE_LE_32))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_Generate_DHKeyCheck
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_SR_Compute_c1_Confirm_Value
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_MI_Compute_c1_Confirm_Value
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_SDBRecord
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Client_Data
</UL>

<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg1_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[17e]"></a>SdkEvalGetVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdk_eval_config.o(i.SdkEvalGetVersion))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LedGpioPin
</UL>

<P><STRONG><a name="[297]"></a>SdkEvalIdentification</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdk_eval_config.o(i.SdkEvalIdentification))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14f]"></a>SdkEvalLedToggle</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sdk_eval_led.o(i.SdkEvalLedToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SdkEvalLedToggle &rArr; GPIO_ToggleBits
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LedGpioPin
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
</UL>

<P><STRONG><a name="[9a]"></a>Search_Handle</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, rom_gatt_server.o(i.Search_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Serv_Chng_Charac_Ind_Not
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_Handles_Requiring_Auth
</UL>

<P><STRONG><a name="[a2]"></a>Search_In_Stat</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, acl.o(i.Search_In_Stat))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Disconnected_Peer
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_tx_cmpl_event_int_cb
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_ind_event_int_cb
</UL>

<P><STRONG><a name="[f0]"></a>Search_Service_Handle</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, gatt_server.o(i.Search_Service_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Serv_Chng_Charac_Ind_Not
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Num_Charac_Present
</UL>

<P><STRONG><a name="[224]"></a>Select_Next_Notification_Client</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, gatt_server.o(i.Select_Next_Notification_Client))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Notif_Or_Ind
</UL>

<P><STRONG><a name="[100]"></a>Send_Error_Resp</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, rom_att.o(i.Send_Error_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Send_Error_Resp &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchg_Mtu_Resp
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[170]"></a>Send_Notif_Or_Ind</STRONG> (Thumb, 118 bytes, Stack size unknown bytes, gatt_server.o(i.Send_Notif_Or_Ind))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Next_Notification_Client
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_ConnHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>

<P><STRONG><a name="[16f]"></a>Start_Gatt_Timer</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, rom_gatt_server.o(i.Start_Gatt_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Start_Gatt_Timer &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Timed_Out_Connection_Index
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>

<P><STRONG><a name="[16e]"></a>Stop_Gatt_Timer</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, rom_gatt_server.o(i.Stop_Gatt_Timer))
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Timed_Out_Connection_Index
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>

<P><STRONG><a name="[14b]"></a>SysCtrl_PeripheralClockCmd</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bluenrg1_sysctrl.o(i.SysCtrl_PeripheralClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysCtrl_PeripheralClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg1_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[227]"></a>SystemInit</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, system_bluenrg1.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SystemInit &rArr; DeviceConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>SystemSleepCmd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, misc.o(i.SystemSleepCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemSleepCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_InternalSleep
</UL>

<P><STRONG><a name="[1e1]"></a>Timer_ExpiryCallback</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, host_timer.o(i.Timer_ExpiryCallback))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[cb]"></a>Timer_Init</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, host_timer.o(i.Timer_Init))
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[b3]"></a>Timer_ProcessQ</STRONG> (Thumb, 316 bytes, Stack size unknown bytes, host_timer.o(i.Timer_ProcessQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = Timer_ProcessQ &rArr; TimerCallback &rArr; HAL_VTimerTimeoutCallback &rArr; sleep_timer &rArr;  BTLE_StackTick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans_ext
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[13b]"></a>Timer_StartOneShot</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, host_timer.o(i.Timer_StartOneShot))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_sysTime32_convMachineTime
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot_sysTime32
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerAcc_sysT32_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Gatt_Timer
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Reset_Timer
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_RepeatedAttacks_Protection
</UL>

<P><STRONG><a name="[187]"></a>Timer_StartOneShot_sysTime32</STRONG> (Thumb, 106 bytes, Stack size unknown bytes, host_timer.o(i.Timer_StartOneShot_sysTime32))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Head
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerStart_sysT32
</UL>

<P><STRONG><a name="[13a]"></a>Timer_StopOneShot</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, host_timer.o(i.Timer_StopOneShot))
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimer_Stop
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Reset_To_Closed_State
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Gatt_Timer
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Process_Q
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Pairing_Completed
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____Pairing_Process_Abort
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Reset_Timer
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_RepeatedAttacks_Protection
</UL>

<P><STRONG><a name="[183]"></a>Timer_sysTime32_convMachineTime</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, host_timer.o(i.Timer_sysTime32_convMachineTime))
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerGetCurrentTime_sysT32
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_radio_activity_state
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
</UL>

<P><STRONG><a name="[22c]"></a>UART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bluenrg1_uart.o(i.UART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Handler
</UL>

<P><STRONG><a name="[191]"></a>UART_Cmd</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bluenrg1_uart.o(i.UART_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Config
</UL>

<P><STRONG><a name="[190]"></a>UART_Configuration</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hw_config.o(i.UART_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_Configuration &rArr; UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StructInit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_PeripheralClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Config
</UL>

<P><STRONG><a name="[22f]"></a>UART_GetFlagStatus</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bluenrg1_uart.o(i.UART_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transportSendData
</UL>

<P><STRONG><a name="[230]"></a>UART_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bluenrg1_uart.o(i.UART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Handler
</UL>

<P><STRONG><a name="[d]"></a>UART_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bluenrg1_it.o(i.UART_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Handler &rArr; UART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[22e]"></a>UART_Init</STRONG> (Thumb, 444 bytes, Stack size 16 bytes, bluenrg1_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[231]"></a>UART_SendData</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bluenrg1_uart.o(i.UART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transportSendData
</UL>

<P><STRONG><a name="[22d]"></a>UART_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bluenrg1_uart.o(i.UART_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[e1]"></a>ValidLinkPermRequest</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, att.o(i.ValidLinkPermRequest))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Get_Remote_Device_Info
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Permission
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecForSignedWrite
</UL>

<P><STRONG><a name="[10]"></a>WDG_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.WDG_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[26d]"></a>WindowWiden1</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.WindowWiden1))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[26f]"></a>WindowWiden2</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.WindowWiden2))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[116]"></a>Write_Client_Data</STRONG> (Thumb, 434 bytes, Stack size unknown bytes, sdb.o(i.Write_Client_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Write_Client_Data &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_GattDb_End_Addr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_32
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_GattDb_Start_Addr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_RecordValidity
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvaliDate_Record
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Flagged
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Client_Data
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Delete
</UL>

<P><STRONG><a name="[1e0]"></a>Write_Cmd</STRONG> (Thumb, 306 bytes, Stack size unknown bytes, att.o(i.Write_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Write_Cmd &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Clear_Flag
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Validate_Signed_Packet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecForSignedWrite
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_permit_req_event_push
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[1df]"></a>Write_Resp</STRONG> (Thumb, 330 bytes, Stack size unknown bytes, att.o(i.Write_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Write_Resp &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Error_Resp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Handle
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Set_Flag
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidLinkPermRequest
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_permit_req_event_push
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[c7]"></a>_BlueNRG_Stack_Initialization</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, bluenrg_main_func.o(i._BlueNRG_Stack_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _BlueNRG_Stack_Initialization &rArr; BlueNRG_Stack_Initialize_Layers &rArr; SMP_Init &rArr; smp____SC_initialize &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Reset
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_ConfigData
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Crystal_Check
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Set_TX_Power_Level
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_vInit_Struct
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[154]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, host_timer.o(i.__ARM_common_switch8))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Receive_Keys
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
</UL>

<P><STRONG><a name="[1f6]"></a>__low_level_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, system_bluenrg1.o(i.__low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __low_level_init
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_contextRestore
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
</UL>

<P><STRONG><a name="[141]"></a>_gap_set_discoverable_connectable</STRONG> (Thumb, 360 bytes, Stack size unknown bytes, gap.o(i._gap_set_discoverable_connectable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _gap_set_discoverable_connectable &rArr; GAP_Privacy1v2 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGapAdvData
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapClearAllModeFlags
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advParamsCheckAndSet
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event_push
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Params
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Non_Discoverable_Mode
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Discoverable_Mode
</UL>

<P><STRONG><a name="[7c]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[23b]"></a>aci_att_exchange_mtu_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_exchange_mtu_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_exchange_mtu_resp_event_cb
</UL>

<P><STRONG><a name="[40]"></a>aci_att_exchange_mtu_resp_event_cb</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_exchange_mtu_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_exchange_mtu_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[23c]"></a>aci_att_exec_write_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_exec_write_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_exec_write_resp_event_cb
</UL>

<P><STRONG><a name="[4a]"></a>aci_att_exec_write_resp_event_cb</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_exec_write_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_exec_write_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[23d]"></a>aci_att_find_by_type_value_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_find_by_type_value_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_find_by_type_value_resp_event_cb
</UL>

<P><STRONG><a name="[42]"></a>aci_att_find_by_type_value_resp_event_cb</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_find_by_type_value_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_find_by_type_value_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[23e]"></a>aci_att_find_info_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_find_info_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_find_info_resp_event_cb
</UL>

<P><STRONG><a name="[41]"></a>aci_att_find_info_resp_event_cb</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_find_info_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_find_info_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[23f]"></a>aci_att_prepare_write_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_prepare_write_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_prepare_write_resp_event_cb
</UL>

<P><STRONG><a name="[49]"></a>aci_att_prepare_write_resp_event_cb</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_prepare_write_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_prepare_write_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[240]"></a>aci_att_read_blob_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_read_blob_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_blob_resp_event_cb
</UL>

<P><STRONG><a name="[45]"></a>aci_att_read_blob_resp_event_cb</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_read_blob_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_blob_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[241]"></a>aci_att_read_by_group_type_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_read_by_group_type_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_by_group_type_resp_event_cb
</UL>

<P><STRONG><a name="[47]"></a>aci_att_read_by_group_type_resp_event_cb</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_read_by_group_type_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_by_group_type_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[242]"></a>aci_att_read_by_type_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_read_by_type_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_by_type_resp_event_cb
</UL>

<P><STRONG><a name="[43]"></a>aci_att_read_by_type_resp_event_cb</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_read_by_type_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_by_type_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[243]"></a>aci_att_read_multiple_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_read_multiple_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_multiple_resp_event_cb
</UL>

<P><STRONG><a name="[46]"></a>aci_att_read_multiple_resp_event_cb</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_read_multiple_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_multiple_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[244]"></a>aci_att_read_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_read_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_resp_event_cb
</UL>

<P><STRONG><a name="[44]"></a>aci_att_read_resp_event_cb</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_read_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[245]"></a>aci_att_write_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_write_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_write_resp_event_cb
</UL>

<P><STRONG><a name="[48]"></a>aci_att_write_resp_event_cb</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_write_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_write_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>aci_event_fifo_push</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, aci_events.o(i.aci_event_fifo_push))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Encryption_changed_Handler_ISR
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_req_event_push
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchg_Mtu_Resp
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_complete_event_push
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_error_resp_event_push
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_disc_read_char_by_uuid_resp_event_push
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_resp_event_push
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_multiple_resp_event_push
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_blob_resp_event_push
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_push
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event_push
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Tx_Cmpl_Pkt_Handler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Rcv_Pkt_Handler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_SigChan_Req_TimeOut_Handler
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_acl_data_done
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_complete_event_push
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_complete_event_push
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_permit_req_event_push
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_permit_req_event_push
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_multi_permit_req_event_push
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event_push
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_authorization_req_event_push
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____Pairing_Process_Abort
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Set_Key_Association_Method
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_Exception_Cases
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_event_push
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_push
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_direct_advertising_report_event_push
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_update_complete_event_push
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_push
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event_push
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_push
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_push
</UL>

<P><STRONG><a name="[a7]"></a>aci_event_fifo_push_header</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, aci_events.o(i.aci_event_fifo_push_header))
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifoBuf_getFreeHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Encryption_changed_Handler_ISR
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_req_event_push
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchg_Mtu_Resp
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_complete_event_push
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_error_resp_event_push
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_disc_read_char_by_uuid_resp_event_push
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_resp_event_push
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_multiple_resp_event_push
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_blob_resp_event_push
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_push
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event_push
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Tx_Cmpl_Pkt_Handler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Rcv_Pkt_Handler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_SigChan_Req_TimeOut_Handler
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_acl_data_done
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_complete_event_push
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_complete_event_push
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_permit_req_event_push
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_permit_req_event_push
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_multi_permit_req_event_push
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event_push
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_authorization_req_event_push
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____Pairing_Process_Abort
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Set_Key_Association_Method
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_Exception_Cases
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_event_push
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_push
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_direct_advertising_report_event_push
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_update_complete_event_push
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_push
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event_push
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_push
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_push
</UL>

<P><STRONG><a name="[247]"></a>aci_gap_addr_not_resolved_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_addr_not_resolved_event))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_addr_not_resolved_event_cb
</UL>

<P><STRONG><a name="[37]"></a>aci_gap_addr_not_resolved_event_cb</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_addr_not_resolved_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_addr_not_resolved_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[248]"></a>aci_gap_authorization_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_authorization_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_authorization_req_event_cb
</UL>

<P><STRONG><a name="[32]"></a>aci_gap_authorization_req_event_cb</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_authorization_req_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_authorization_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[24a]"></a>aci_gap_bond_lost_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_bond_lost_event))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_bond_lost_event_cb
</UL>

<P><STRONG><a name="[34]"></a>aci_gap_bond_lost_event_cb</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_bond_lost_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_bond_lost_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[24b]"></a>aci_gap_device_found_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_device_found_event))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_device_found_event_cb
</UL>

<P><STRONG><a name="[35]"></a>aci_gap_device_found_event_cb</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_device_found_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_device_found_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>aci_gap_init</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, bluenrg_gap_aci.o(i.aci_gap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = aci_gap_init &rArr; GAP_Init &rArr; Gatt_Update_Charac_Value &rArr; Gatt_Update_Charac_Value_Ext &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[24c]"></a>aci_gap_keypress_notification_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_keypress_notification_event))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_keypress_notification_event_cb
</UL>

<P><STRONG><a name="[39]"></a>aci_gap_keypress_notification_event_cb</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_keypress_notification_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_keypress_notification_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[24d]"></a>aci_gap_limited_discoverable_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_limited_discoverable_event))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event_cb
</UL>

<P><STRONG><a name="[2f]"></a>aci_gap_limited_discoverable_event_cb</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_limited_discoverable_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[24e]"></a>aci_gap_numeric_comparison_value_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_numeric_comparison_value_event))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_event_cb
</UL>

<P><STRONG><a name="[38]"></a>aci_gap_numeric_comparison_value_event_cb</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_numeric_comparison_value_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[250]"></a>aci_gap_pairing_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_pairing_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_cb
</UL>

<P><STRONG><a name="[30]"></a>aci_gap_pairing_complete_event_cb</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_pairing_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[251]"></a>aci_gap_pass_key_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_pass_key_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pass_key_req_event_cb
</UL>

<P><STRONG><a name="[31]"></a>aci_gap_pass_key_req_event_cb</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_pass_key_req_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pass_key_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[252]"></a>aci_gap_proc_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_proc_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_cb
</UL>

<P><STRONG><a name="[36]"></a>aci_gap_proc_complete_event_cb</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_proc_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[226]"></a>aci_gap_set_discoverable</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, bluenrg_gap_aci.o(i.aci_gap_set_discoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = aci_gap_set_discoverable &rArr; GAP_Set_Discoverable_Mode &rArr; _gap_set_discoverable_connectable &rArr; GAP_Privacy1v2 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Discoverable_Mode
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aci_gap_set_discoverable_param_check
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Beaconing
</UL>

<P><STRONG><a name="[18d]"></a>aci_gap_set_non_discoverable</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, bluenrg_gap_aci.o(i.aci_gap_set_non_discoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = aci_gap_set_non_discoverable &rArr; GAP_Set_Non_Discoverable_Mode &rArr; _gap_set_discoverable_connectable &rArr; GAP_Privacy1v2 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Non_Discoverable_Mode
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Delete_ADType
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerTimeoutCallback
</UL>

<P><STRONG><a name="[254]"></a>aci_gap_slave_security_initiated_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_slave_security_initiated_event))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_slave_security_initiated_event_cb
</UL>

<P><STRONG><a name="[33]"></a>aci_gap_slave_security_initiated_event_cb</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_slave_security_initiated_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_slave_security_initiated_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[255]"></a>aci_gatt_attribute_modified_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_attribute_modified_event))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event_cb
</UL>

<P><STRONG><a name="[3e]"></a>aci_gatt_attribute_modified_event_cb</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_attribute_modified_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[256]"></a>aci_gatt_disc_read_char_by_uuid_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_disc_read_char_by_uuid_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_disc_read_char_by_uuid_resp_event_cb
</UL>

<P><STRONG><a name="[4f]"></a>aci_gatt_disc_read_char_by_uuid_resp_event_cb</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_disc_read_char_by_uuid_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_disc_read_char_by_uuid_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[257]"></a>aci_gatt_error_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_error_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_error_resp_event_cb
</UL>

<P><STRONG><a name="[4e]"></a>aci_gatt_error_resp_event_cb</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_error_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_error_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[258]"></a>aci_gatt_indication_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_indication_event))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_indication_event_cb
</UL>

<P><STRONG><a name="[4b]"></a>aci_gatt_indication_event_cb</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_indication_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_indication_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>aci_gatt_init</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, bluenrg_gatt_aci.o(i.aci_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = aci_gatt_init &rArr; Gatt_Server_Init &rArr; Gatt_Update_Charac_Value &rArr; Gatt_Update_Charac_Value_Ext &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[259]"></a>aci_gatt_notification_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_notification_event))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_notification_event_cb
</UL>

<P><STRONG><a name="[4c]"></a>aci_gatt_notification_event_cb</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_notification_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_notification_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[25a]"></a>aci_gatt_prepare_write_permit_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_prepare_write_permit_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_prepare_write_permit_req_event_cb
</UL>

<P><STRONG><a name="[51]"></a>aci_gatt_prepare_write_permit_req_event_cb</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_prepare_write_permit_req_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_prepare_write_permit_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[25b]"></a>aci_gatt_proc_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_proc_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_complete_event_cb
</UL>

<P><STRONG><a name="[4d]"></a>aci_gatt_proc_complete_event_cb</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_proc_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[25c]"></a>aci_gatt_proc_timeout_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_proc_timeout_event))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_timeout_event_cb
</UL>

<P><STRONG><a name="[3f]"></a>aci_gatt_proc_timeout_event_cb</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_proc_timeout_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_timeout_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[25d]"></a>aci_gatt_read_multi_permit_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_read_multi_permit_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_multi_permit_req_event_cb
</UL>

<P><STRONG><a name="[53]"></a>aci_gatt_read_multi_permit_req_event_cb</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_read_multi_permit_req_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_multi_permit_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[25e]"></a>aci_gatt_read_permit_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_read_permit_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_permit_req_event_cb
</UL>

<P><STRONG><a name="[52]"></a>aci_gatt_read_permit_req_event_cb</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_read_permit_req_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_permit_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[25f]"></a>aci_gatt_server_confirmation_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_server_confirmation_event))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_server_confirmation_event_cb
</UL>

<P><STRONG><a name="[55]"></a>aci_gatt_server_confirmation_event_cb</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_server_confirmation_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_server_confirmation_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[260]"></a>aci_gatt_tx_pool_available_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_tx_pool_available_event))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_tx_pool_available_event_cb
</UL>

<P><STRONG><a name="[54]"></a>aci_gatt_tx_pool_available_event_cb</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_tx_pool_available_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_tx_pool_available_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[261]"></a>aci_gatt_write_permit_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_write_permit_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_permit_req_event_cb
</UL>

<P><STRONG><a name="[50]"></a>aci_gatt_write_permit_req_event_cb</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_write_permit_req_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_permit_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[27a]"></a>aci_hal_end_of_radio_activity_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, hal.o(i.aci_hal_end_of_radio_activity_event))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_radio_activity_state_callback_check
</UL>

<P><STRONG><a name="[262]"></a>aci_hal_scan_req_report_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_hal_scan_req_report_event))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_scan_req_report_event_cb
</UL>

<P><STRONG><a name="[2c]"></a>aci_hal_scan_req_report_event_cb</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.aci_hal_scan_req_report_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_scan_req_report_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>aci_hal_set_tx_power_level</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, bluenrg_hal_aci.o(i.aci_hal_set_tx_power_level))
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Set_TX_Power_Level
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[263]"></a>aci_l2cap_command_reject_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_l2cap_command_reject_event))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_command_reject_event_cb
</UL>

<P><STRONG><a name="[3d]"></a>aci_l2cap_command_reject_event_cb</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, aci_events.o(i.aci_l2cap_command_reject_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_command_reject_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[264]"></a>aci_l2cap_connection_update_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_l2cap_connection_update_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_req_event_cb
</UL>

<P><STRONG><a name="[3c]"></a>aci_l2cap_connection_update_req_event_cb</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, aci_events.o(i.aci_l2cap_connection_update_req_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[265]"></a>aci_l2cap_connection_update_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_l2cap_connection_update_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_resp_event_cb
</UL>

<P><STRONG><a name="[3a]"></a>aci_l2cap_connection_update_resp_event_cb</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, aci_events.o(i.aci_l2cap_connection_update_resp_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[266]"></a>aci_l2cap_proc_timeout_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_l2cap_proc_timeout_event))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_proc_timeout_event_cb
</UL>

<P><STRONG><a name="[3b]"></a>aci_l2cap_proc_timeout_event_cb</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, aci_events.o(i.aci_l2cap_proc_timeout_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_proc_timeout_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[1d9]"></a>acl_list_full_on_packt</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_full_on_packt))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Fragments_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
</UL>

<P><STRONG><a name="[102]"></a>acl_list_get_pckt_count</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_get_pckt_count))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Flush_Pending_AclPacket_Lists
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>

<P><STRONG><a name="[16c]"></a>acl_list_init</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
</UL>

<P><STRONG><a name="[219]"></a>acl_list_insert_head</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_insert_head))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Fragments_Count
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Head
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[165]"></a>acl_list_insert_tail</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_insert_tail))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Fragments_Count
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Read_Charac_By_Uuid
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Notif_Or_Ind
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Pckt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[161]"></a>acl_list_is_empty</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_Process_Q
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[104]"></a>acl_list_remove</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_remove))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Fragments_Count
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Flush_Pending_AclPacket_Lists
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_Process_Q
</UL>

<P><STRONG><a name="[163]"></a>acl_list_remove_head</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_remove_head))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Fragments_Count
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Head
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[239]"></a>advParamsCheckAndSet</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, gap.o(i.advParamsCheckAndSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = advParamsCheckAndSet &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
</UL>

<P><STRONG><a name="[1ed]"></a>advance_slave_timing_MultiSlave</STRONG> (Thumb, 1080 bytes, Stack size unknown bytes, multi_master_time.o(i.advance_slave_timing_MultiSlave))
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulo_37
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_offset2
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_offset1
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sca
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microseconds_to_machine_time
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowWiden2
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowWiden1
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_short_int
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_char
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>

<P><STRONG><a name="[299]"></a>advance_transmit</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, rom_ll_routines_support.o(i.advance_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_advance_transmit
</UL>

<P><STRONG><a name="[1b1]"></a>advance_wakeup_timer</STRONG> (Thumb, 1220 bytes, Stack size unknown bytes, advance_wakeup_time.o(i.advance_wakeup_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_slave
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_master
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Update_Scanning_Initiating_Buffers
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Update_Advertising_Buffers
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Sleep_Req
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect_master
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timebase
</UL>

<P><STRONG><a name="[1f2]"></a>anchor_replace</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, multi_master_time.o(i.anchor_replace))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_master
</UL>

<P><STRONG><a name="[106]"></a>assert_failed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, micro_sleep_test_main.o(i.assert_failed))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetITPendingBit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearITPendingBit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_SetData
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_GetData
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepCmd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_PeripheralClockCmd
</UL>

<P><STRONG><a name="[1af]"></a>cancel_current_master</STRONG> (Thumb, 408 bytes, Stack size unknown bytes, multi_master_time.o(i.cancel_current_master))
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_string
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_short_int
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_char
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_slave
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>

<P><STRONG><a name="[274]"></a>cancel_master</STRONG> (Thumb, 248 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.cancel_master))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = cancel_master &rArr; isr_event_handler_patched &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anchor_replace
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>

<P><STRONG><a name="[275]"></a>cancel_slave</STRONG> (Thumb, 142 bytes, Stack size unknown bytes, isr_routines.o(i.cancel_slave))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = cancel_slave &rArr; isr_event_handler_patched &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_update_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>

<P><STRONG><a name="[de]"></a>char_copy</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, hal.o(i.char_copy))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_slave
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Update_Scanning_Initiating_Buffers
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc1
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect_master
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Params
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Set_Radio_Config_Data
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_ScanAddress
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reclassify_All_Channels
</UL>

<P><STRONG><a name="[1b7]"></a>convert_power</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, rom_ll_routines_support.o(i.convert_power))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Adv_Tx_Power_Level
</UL>

<P><STRONG><a name="[208]"></a>copy_swap_buffer</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, utils.o(i.copy_swap_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_f6_Check_Val
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_f5_Keys
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_g2_NumComp_Val
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_f4_Confirm
</UL>

<P><STRONG><a name="[da]"></a>deepSleepTimers_check</STRONG> (Thumb, 174 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.deepSleepTimers_check))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Deep_Sleep_Check
</UL>

<P><STRONG><a name="[1b5]"></a>encrypt</STRONG> (Thumb, 136 bytes, Stack size unknown bytes, rom_ll_routines_support.o(i.encrypt))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc_encrypt_data
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data
</UL>

<P><STRONG><a name="[1b]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hw_config.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; transportSendData &rArr; UART_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transportSendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[238]"></a>gapClearAllModeFlags</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, gap.o(i.gapClearAllModeFlags))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
</UL>

<P><STRONG><a name="[1e4]"></a>get_adv_addr</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.get_adv_addr))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
</UL>

<P><STRONG><a name="[13d]"></a>get_advertiser</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, multi_master_time.o(i.get_advertiser))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Address_Resolution_Enable
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_AdvAddress
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Allow_Address_Setting
</UL>

<P><STRONG><a name="[1b9]"></a>get_connection_no</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, multi_master_time.o(i.get_connection_no))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Start_Encryption
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_LTK
</UL>

<P><STRONG><a name="[1ac]"></a>get_next_free_slot</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, multi_master_time.o(i.get_next_free_slot))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>

<P><STRONG><a name="[1e3]"></a>get_scan_addr</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.get_scan_addr))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
</UL>

<P><STRONG><a name="[13e]"></a>get_scan_connection</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, multi_master_time.o(i.get_scan_connection))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Set_Address_Resolution_Enable
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Params
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_ScanAddress
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Allow_Address_Setting
</UL>

<P><STRONG><a name="[1e6]"></a>go_to_connect</STRONG> (Thumb, 604 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.go_to_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = go_to_connect &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timebase_start_connect
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_string
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[1ef]"></a>go_to_connect_master</STRONG> (Thumb, 386 bytes, Stack size unknown bytes, isr_routines.o(i.go_to_connect_master))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = go_to_connect_master &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timebase_start_connect
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_string
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[c9]"></a>hal_get_hw_version</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, hal.o(i.hal_get_hw_version))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_ConfigData
</UL>

<P><STRONG><a name="[fc]"></a>hal_radio_activity_state_callback_check</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, hal.o(i.hal_radio_activity_state_callback_check))
<BR><BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_end_of_radio_activity_event
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_radio_activity_state
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_Q
</UL>

<P><STRONG><a name="[fd]"></a>hal_radio_activity_state_init</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, hal.o(i.hal_radio_activity_state_init))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_init
</UL>

<P><STRONG><a name="[279]"></a>hal_read_radio_activity_state</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, hal.o(i.hal_read_radio_activity_state))
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_sysTime32_convMachineTime
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_radio_activity_state_callback_check
</UL>

<P><STRONG><a name="[b4]"></a>hci_acl_Process_Q</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, hci.o(i.hci_acl_Process_Q))
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_is_empty
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[57]"></a>hci_acl_data_ind_event_int_cb</STRONG> (Thumb, 220 bytes, Stack size unknown bytes, acl.o(i.hci_acl_data_ind_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = hci_acl_data_ind_event_int_cb &rArr; L2C_Rcv_Event_Handler &rArr; SM_L2CAP_Handler &rArr; smp_Keys_Distribution_Complete &rArr; smp_Pairing_Completed &rArr; smp_Add_To_Database &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Append_Fragment
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Rcv_ACL_Data
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Clone_Fragment
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_In_Stat
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Stat
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Pckt
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>hci_acl_data_tx_cmpl_event_int_cb</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, acl.o(i.hci_acl_data_tx_cmpl_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = hci_acl_data_tx_cmpl_event_int_cb &rArr; L2C_Rcv_Event_Handler &rArr; SM_L2CAP_Handler &rArr; smp_Keys_Distribution_Complete &rArr; smp_Pairing_Completed &rArr; smp_Add_To_Database &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Append_Fragment
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_In_Stat
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Stat
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_acl_data_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[28]"></a>hci_data_buffer_overflow_event_cb</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_data_buffer_overflow_event_cb))
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[27d]"></a>hci_disconnection_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_disconnection_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event_cb
</UL>

<P><STRONG><a name="[1e]"></a>hci_disconnection_complete_event_cb</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, aci_events.o(i.hci_disconnection_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>hci_disconnection_complete_event_int_cb</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, aci_events.o(i.hci_disconnection_complete_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = hci_disconnection_complete_event_int_cb &rArr; L2C_Rcv_Event_Handler_ISR &rArr; SM_L2CAP_Handler_ISR &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[27e]"></a>hci_encryption_change_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_encryption_change_event))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_cb
</UL>

<P><STRONG><a name="[1f]"></a>hci_encryption_change_event_cb</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, aci_events.o(i.hci_encryption_change_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>hci_encryption_change_event_int_cb</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.hci_encryption_change_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = hci_encryption_change_event_int_cb &rArr; L2C_Rcv_Event_Handler_ISR &rArr; SM_L2CAP_Handler_ISR &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[280]"></a>hci_encryption_key_refresh_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_encryption_key_refresh_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_cb
</UL>

<P><STRONG><a name="[20]"></a>hci_encryption_key_refresh_complete_event_cb</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.hci_encryption_key_refresh_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>hci_encryption_key_refresh_complete_event_int_cb</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.hci_encryption_key_refresh_complete_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = hci_encryption_key_refresh_complete_event_int_cb &rArr; L2C_Rcv_Event_Handler_ISR &rArr; SM_L2CAP_Handler_ISR &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>hci_hardware_error_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_hardware_error_event))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_Q
</UL>

<P><STRONG><a name="[282]"></a>hci_le_advertising_report_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_advertising_report_event))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event_cb
</UL>

<P><STRONG><a name="[23]"></a>hci_le_advertising_report_event_cb</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_advertising_report_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>hci_le_advertising_report_event_int_cb</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_advertising_report_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = hci_le_advertising_report_event_int_cb &rArr; GAP_LL_Event_Handler_ISR &rArr; GAP_Connection_Complete_Handler &rArr; aci_gap_proc_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[284]"></a>hci_le_connection_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_connection_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_cb
</UL>

<P><STRONG><a name="[21]"></a>hci_le_connection_complete_event_cb</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_connection_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>hci_le_connection_complete_event_int_cb</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_connection_complete_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = hci_le_connection_complete_event_int_cb &rArr; L2C_Rcv_Event_Handler_ISR &rArr; SM_L2CAP_Handler_ISR &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[286]"></a>hci_le_connection_update_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_connection_update_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_update_complete_event_cb
</UL>

<P><STRONG><a name="[2a]"></a>hci_le_connection_update_complete_event_cb</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_connection_update_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_update_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[288]"></a>hci_le_direct_advertising_report_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_direct_advertising_report_event))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_direct_advertising_report_event_cb
</UL>

<P><STRONG><a name="[27]"></a>hci_le_direct_advertising_report_event_cb</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_direct_advertising_report_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_direct_advertising_report_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>hci_le_direct_advertising_report_event_int_cb</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_direct_advertising_report_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = hci_le_direct_advertising_report_event_int_cb &rArr; GAP_LL_Event_Handler_ISR &rArr; GAP_Connection_Complete_Handler &rArr; aci_gap_proc_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[28a]"></a>hci_le_enhanced_connection_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_enhanced_connection_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_cb
</UL>

<P><STRONG><a name="[26]"></a>hci_le_enhanced_connection_complete_event_cb</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_enhanced_connection_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>hci_le_enhanced_connection_complete_event_int_cb</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_enhanced_connection_complete_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = hci_le_enhanced_connection_complete_event_int_cb &rArr; L2C_Rcv_Event_Handler_ISR &rArr; SM_L2CAP_Handler_ISR &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[28c]"></a>hci_le_generate_dhkey</STRONG> (Thumb, 142 bytes, Stack size unknown bytes, hci.o(i.hci_le_generate_dhkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = hci_le_generate_dhkey &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Buffer_All_Set_To
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Start_Generate_DHKey
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_complete_event_push
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Verify_Peer_PK_and_Generate_DHKey
</UL>

<P><STRONG><a name="[28d]"></a>hci_le_generate_dhkey_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_generate_dhkey_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_complete_event_cb
</UL>

<P><STRONG><a name="[25]"></a>hci_le_generate_dhkey_complete_event_cb</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_generate_dhkey_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>hci_le_generate_dhkey_complete_event_int_cb</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_generate_dhkey_complete_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = hci_le_generate_dhkey_complete_event_int_cb &rArr; smp____SC_hci_le_generate_dhkey_complete_evt_hndl &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_hci_le_generate_dhkey_complete_evt_hndl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[28f]"></a>hci_le_long_term_key_request_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_long_term_key_request_event))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_event_cb
</UL>

<P><STRONG><a name="[22]"></a>hci_le_long_term_key_request_event_cb</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_long_term_key_request_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>hci_le_long_term_key_request_event_int_cb</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_long_term_key_request_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = hci_le_long_term_key_request_event_int_cb &rArr; L2C_Rcv_Event_Handler_ISR &rArr; SM_L2CAP_Handler_ISR &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[213]"></a>hci_le_read_local_p256_public_key</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, hci.o(i.hci_le_read_local_p256_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = hci_le_read_local_p256_public_key &rArr; hci_le_read_local_p256_public_key_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Generate_ECDH_Public_Key
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_complete_event_push
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[290]"></a>hci_le_read_local_p256_public_key_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_read_local_p256_public_key_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_complete_event_cb
</UL>

<P><STRONG><a name="[24]"></a>hci_le_read_local_p256_public_key_complete_event_cb</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_read_local_p256_public_key_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>hci_le_read_local_p256_public_key_complete_event_int_cb</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_read_local_p256_public_key_complete_event_int_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = hci_le_read_local_p256_public_key_complete_event_int_cb &rArr; smp____SC_hci_le_read_local_p256_public_key_complete_evt_hndl &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_hci_le_read_local_p256_public_key_complete_evt_hndl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[292]"></a>hci_le_read_remote_used_features_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_read_remote_used_features_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_remote_used_features_complete_event_cb
</UL>

<P><STRONG><a name="[2b]"></a>hci_le_read_remote_used_features_complete_event_cb</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_read_remote_used_features_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_remote_used_features_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>hci_le_set_advertising_data</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, hci.o(i.hci_le_set_advertising_data))
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerTimeoutCallback
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Beaconing
</UL>

<P><STRONG><a name="[125]"></a>hci_le_set_event_mask</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, hci.o(i.hci_le_set_event_mask))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[225]"></a>hci_le_set_scan_response_data</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, hci.o(i.hci_le_set_scan_response_data))
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Scan_Resp_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Beaconing
</UL>

<P><STRONG><a name="[294]"></a>hci_number_of_completed_packets_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_number_of_completed_packets_event))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_of_completed_packets_event_cb
</UL>

<P><STRONG><a name="[2d]"></a>hci_number_of_completed_packets_event_cb</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, aci_events.o(i.hci_number_of_completed_packets_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_of_completed_packets_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[295]"></a>hci_read_remote_version_information_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_read_remote_version_information_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_remote_version_information_complete_event_cb
</UL>

<P><STRONG><a name="[29]"></a>hci_read_remote_version_information_complete_event_cb</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.hci_read_remote_version_information_complete_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_remote_version_information_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[27b]"></a>hci_rx_acl_data</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, hci.o(i.hci_rx_acl_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = hci_rx_acl_data &rArr; PM_Copy_Pckt_Data &rArr; Acl_Copy_Data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_ind_event_int_cb
</UL>

<P><STRONG><a name="[296]"></a>hci_rx_acl_data_event</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, aci_events.o(i.hci_rx_acl_data_event))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data_event_cb
</UL>

<P><STRONG><a name="[2e]"></a>hci_rx_acl_data_event_cb</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, aci_events.o(i.hci_rx_acl_data_event_cb))
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[27c]"></a>hci_tx_acl_data_done</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, hci.o(i.hci_tx_acl_data_done))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_data_tx_cmpl_event_int_cb
</UL>

<P><STRONG><a name="[193]"></a>is_Buffer_All_Set_To</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, utils.o(i.is_Buffer_All_Set_To))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Verify_Peer_PK_and_Generate_DHKey
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[276]"></a>is_slave</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, multi_master_time.o(i.is_slave))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
</UL>

<P><STRONG><a name="[1f4]"></a>isr_event_handler_patched</STRONG> (Thumb, 2220 bytes, Stack size unknown bytes, ll_routines_master.o(i.isr_event_handler_patched))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = isr_event_handler_patched &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Tx_Cmpl_Pkt_Handler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Rcv_Pkt_Handler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_addr
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adv_addr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reclassify_All_Channels
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event_push
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_direct_advertising_report_event_push
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_update_complete_event_push
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_push
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event_push
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_push
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_slave
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_master
</UL>

<P><STRONG><a name="[1f5]"></a>isr_postproc</STRONG> (Thumb, 304 bytes, Stack size unknown bytes, isr_postproc.o(i.isr_postproc))
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number32
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[1ea]"></a>isr_postproc1</STRONG> (Thumb, 322 bytes, Stack size unknown bytes, rom_ll_isr_postproc.o(i.isr_postproc1))
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc_encrypt_data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[1f1]"></a>isr_postproc_encrypt_data</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, rom_ll_isr_postproc.o(i.isr_postproc_encrypt_data))
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc1
</UL>

<P><STRONG><a name="[b8]"></a>machine_time_trans</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.machine_time_trans))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deepSleepTimers_check
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Sleep_Req
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_advance
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_freq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timebase
</UL>

<P><STRONG><a name="[6f]"></a>main</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, micro_sleep_test_main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = main &rArr; BTLE_StackTick &rArr; Timer_ProcessQ &rArr; TimerCallback &rArr; HAL_VTimerTimeoutCallback &rArr; sleep_timer &rArr;  BTLE_StackTick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalIdentification
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Config
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialization
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_timer
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d7]"></a>mem_alloc_ctx_init</STRONG> (Thumb, 160 bytes, Stack size unknown bytes, mem_alloc.o(i.mem_alloc_ctx_init))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM
</UL>

<P><STRONG><a name="[271]"></a>microseconds_to_machine_time</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, routines_support.o(i.microseconds_to_machine_time))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[1ec]"></a>modulo_37</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, rom_ll_routines_support.o(i.modulo_37))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[1bc]"></a>nsar_init</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, multi_master_time.o(i.nsar_init))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[b9]"></a>patch_advance_transmit</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, routines_support.o(i.patch_advance_transmit))
<BR><BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[1f3]"></a>read_rssi</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, ll_routines.o(i.read_rssi))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[1b2]"></a>request_scan_slot</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, multi_master_time.o(i.request_scan_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = request_scan_slot &rArr; adapt_slot &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan
</UL>

<P><STRONG><a name="[1ae]"></a>schedule_advertise_slot</STRONG> (Thumb, 140 bytes, Stack size unknown bytes, multi_master_time.o(i.schedule_advertise_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = schedule_advertise_slot &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_slot
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timebase
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>

<P><STRONG><a name="[23a]"></a>setGapAdvData</STRONG> (Thumb, 250 bytes, Stack size unknown bytes, gap.o(i.setGapAdvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = setGapAdvData &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Data
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Adv_Tx_Power_Level
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
</UL>

<P><STRONG><a name="[d9]"></a>set_freq</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.set_freq))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Crystal_Check
</UL>

<P><STRONG><a name="[26c]"></a>set_sca</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.set_sca))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[1ee]"></a>set_string</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, hal.o(i.set_string))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect_master
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
</UL>

<P><STRONG><a name="[ac]"></a>slave_advance</STRONG> (Thumb, 240 bytes, Stack size unknown bytes, routines_support.o(i.slave_advance))
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Sleep_Req
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Packet
</UL>

<P><STRONG><a name="[18e]"></a>sleep_timer</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, micro_sleep_test_main.o(i.sleep_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = sleep_timer &rArr;  BTLE_StackTick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerStart_ms
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Sleep
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerTimeoutCallback
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20e]"></a>sm_Search_BlackList</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, securitymgr.o(i.sm_Search_BlackList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = sm_Search_BlackList &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_PairingRequest_Send
</UL>

<P><STRONG><a name="[29c]"></a>smp_Add_To_Database</STRONG> (Thumb, 326 bytes, Stack size unknown bytes, sm_common.o(i.smp_Add_To_Database))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp_Add_To_Database &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Pairing_Completed
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
</UL>

<P><STRONG><a name="[29d]"></a>smp_Determine_Key_Association_Method</STRONG> (Thumb, 172 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Determine_Key_Association_Method))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Set_Key_Association_Method
</UL>

<P><STRONG><a name="[222]"></a>smp_Find_Remote_Device_Index</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, sm_common.o(i.smp_Find_Remote_Device_Index))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Pairing_Completed
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Send_Data
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____Pairing_Process_Abort
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[2aa]"></a>smp_Get_Local_Identity_Address</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, sm_common.o(i.smp_Get_Local_Identity_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp_Get_Local_Identity_Address &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_StaticRandAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
</UL>

<P><STRONG><a name="[2a7]"></a>smp_Keys_Distribution_Start</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, sm_common.o(i.smp_Keys_Distribution_Start))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Receive_Keys
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[210]"></a>smp_OOB_Check_Is_Remote_Data_Present</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, sm_common.o(i.smp_OOB_Check_Is_Remote_Data_Present))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_OOB_Check_Is_Remote_Data_Present &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_PairingRequest_Send
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_Generate_DHKeyCheck
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_OOB_Get_Remote_Data_Reference
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Pairing_OOB_Confirm_Receive_and_Verify
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
</UL>

<P><STRONG><a name="[2ac]"></a>smp_OOB_Clear_Remote_Data_Entry_by_Index</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, sm_common.o(i.smp_OOB_Clear_Remote_Data_Entry_by_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_OOB_Clear_Remote_Data_Entry_by_Index &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Pairing_Completed
</UL>

<P><STRONG><a name="[2ad]"></a>smp_OOB_Get_Remote_Data_Reference</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, sm_common.o(i.smp_OOB_Get_Remote_Data_Reference))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_OOB_Get_Remote_Data_Reference &rArr; smp_OOB_Check_Is_Remote_Data_Present &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_OOB_Check_Is_Remote_Data_Present
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_Generate_DHKeyCheck
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Pairing_OOB_Confirm_Receive_and_Verify
</UL>

<P><STRONG><a name="[2a9]"></a>smp_Pairing_Completed</STRONG> (Thumb, 162 bytes, Stack size unknown bytes, sm_common.o(i.smp_Pairing_Completed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp_Pairing_Completed &rArr; smp_Add_To_Database &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_OOB_Clear_Remote_Data_Entry_by_Index
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_authorization_req_event_push
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_submit_ECC_PK_generation_request
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Find_Remote_Device_Index
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Add_To_Database
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Complete
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Receive_Keys
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[2b3]"></a>smp_Receive_Keys</STRONG> (Thumb, 210 bytes, Stack size unknown bytes, sm_common.o(i.smp_Receive_Keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp_Receive_Keys &rArr; PM_Copy_Pckt_Data &rArr; Acl_Copy_Data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Pckt_Cmp
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Pairing_Completed
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[212]"></a>smp_Send_Data</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp_Send_Data &rArr; smp_Reset_Timer &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_ConnHandle
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Find_Remote_Device_Index
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Reset_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_PairingRequest_Send
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_DHKeyCheck_Send
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_PairingPublicKey_Send
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Send
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Receive
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
</UL>

<P><STRONG><a name="[2a6]"></a>smp____PairingFailed_Send</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, securitymgr.o(i.smp____PairingFailed_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp____PairingFailed_Send &rArr; smp____Pairing_Process_Abort &rArr; sm_RepeatedAttacks_Protection &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____Pairing_2Octets_Packet_Send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____Pairing_Process_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_DHKeyCheck_Receive
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Pairing_OOB_Confirm_Receive_and_Verify
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_PairingPublicKey_Receive
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_SecurityRequest_Receive
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingResponse_Receive
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[2bc]"></a>smp____Pairing_2Octets_Packet_Send</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, sm_common.o(i.smp____Pairing_2Octets_Packet_Send))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_ConnHandle
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____PairingFailed_Send
</UL>

<P><STRONG><a name="[2ba]"></a>smp____SC_Continue_If_Exclusive_SC_Pairing</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, smp_scv42_isap.o(i.smp____SC_Continue_If_Exclusive_SC_Pairing))
<BR><BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_is_any_other_SC_Pairing_Ongoing
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingResponse_Receive
</UL>

<P><STRONG><a name="[2b1]"></a>smp____SC_PairingPublicKey_Receive</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, smp_scv42_isap.o(i.smp____SC_PairingPublicKey_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp____SC_PairingPublicKey_Receive &rArr; PM_Copy_Pckt_Data &rArr; Acl_Copy_Data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Verify_Peer_PK_and_Generate_DHKey
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____PairingFailed_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[2a1]"></a>smp____SC_PairingPublicKey_Send</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, smp_scv42_isap.o(i.smp____SC_PairingPublicKey_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp____SC_PairingPublicKey_Send &rArr; PM_Write_Pckt_Data &rArr; Acl_Copy_Data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Extend_Pckt_Pdu_Size
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_is_Debug_Key_Usage_Forced
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[2a3]"></a>smp____SC_Pairing_OOB_Confirm_Receive_and_Verify</STRONG> (Thumb, 140 bytes, Stack size unknown bytes, smp_scv42_isap.o(i.smp____SC_Pairing_OOB_Confirm_Receive_and_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp____SC_Pairing_OOB_Confirm_Receive_and_Verify &rArr; smp____PairingFailed_Send &rArr; smp____Pairing_Process_Abort &rArr; sm_RepeatedAttacks_Protection &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_OOB_Get_Remote_Data_Reference
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_OOB_Check_Is_Remote_Data_Present
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_f4_Confirm
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____PairingFailed_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[2b6]"></a>smp____SC_Phase_2AS2_DHKeyCheck_Receive</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, smp_scv42_isap.o(i.smp____SC_Phase_2AS2_DHKeyCheck_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp____SC_Phase_2AS2_DHKeyCheck_Receive &rArr; PM_Copy_Pckt_Data &rArr; Acl_Copy_Data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Start_Encryption
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_DHKeyCheck_Send
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_Generate_DHKeyCheck
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____PairingFailed_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[2c1]"></a>smp____SC_Phase_2AS2_DHKeyCheck_Send</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, smp_scv42_isap.o(i.smp____SC_Phase_2AS2_DHKeyCheck_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp____SC_Phase_2AS2_DHKeyCheck_Send &rArr; PM_Write_Pckt_Data &rArr; Acl_Copy_Data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_Start
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_DHKeyCheck_Receive
</UL>

<P><STRONG><a name="[2a5]"></a>smp____SC_Phase_2AS2_Start</STRONG> (Thumb, 174 bytes, Stack size unknown bytes, smp_scv42_isap.o(i.smp____SC_Phase_2AS2_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp____SC_Phase_2AS2_Start &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_f5_Keys
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_DHKeyCheck_Send
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2__Set_Addresses
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_Generate_DHKeyCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[2be]"></a>smp____SC_Verify_Peer_PK_and_Generate_DHKey</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, smp_scv42_isap.o(i.smp____SC_Verify_Peer_PK_and_Generate_DHKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp____SC_Verify_Peer_PK_and_Generate_DHKey &rArr; hci_le_generate_dhkey &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Buffer_All_Set_To
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_PairingPublicKey_Receive
</UL>

<P><STRONG><a name="[28e]"></a>smp____SC_hci_le_generate_dhkey_complete_evt_hndl</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, smp_scv42_isap.o(i.smp____SC_hci_le_generate_dhkey_complete_evt_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp____SC_hci_le_generate_dhkey_complete_evt_hndl &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_complete_event_int_cb
</UL>

<P><STRONG><a name="[291]"></a>smp____SC_hci_le_read_local_p256_public_key_complete_evt_hndl</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, smp_scv42_isap.o(i.smp____SC_hci_le_read_local_p256_public_key_complete_evt_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp____SC_hci_le_read_local_p256_public_key_complete_evt_hndl &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_is_Debug_Key_Usage_Forced
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_complete_event_int_cb
</UL>

<P><STRONG><a name="[20c]"></a>smp____SC_initialize</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, smp_scv42_isap.o(i.smp____SC_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp____SC_initialize &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Init
</UL>

<P><STRONG><a name="[2bf]"></a>smp____SC_is_Debug_Key_Usage_Forced</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, smp_scv42_isap.o(i.smp____SC_is_Debug_Key_Usage_Forced))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_hci_le_read_local_p256_public_key_complete_evt_hndl
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_PairingPublicKey_Send
</UL>

<P><STRONG><a name="[2bd]"></a>smp____SC_is_any_other_SC_Pairing_Ongoing</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, smp_scv42_isap.o(i.smp____SC_is_any_other_SC_Pairing_Ongoing))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Continue_If_Exclusive_SC_Pairing
</UL>

<P><STRONG><a name="[2a0]"></a>smp____SC_submit_ECC_PK_generation_request</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, smp_scv42_isap.o(i.smp____SC_submit_ECC_PK_generation_request))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Pairing_Completed
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____Pairing_Process_Abort
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[1b3]"></a>start_timebase</STRONG> (Thumb, 146 bytes, Stack size unknown bytes, multi_master_time.o(i.start_timebase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = start_timebase &rArr; advance_wakeup_timer &rArr; cancel_slave &rArr; isr_event_handler_patched &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Scan
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_advertise_slot
</UL>

<P><STRONG><a name="[172]"></a>store_data</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, gatt_server.o(i.store_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = store_data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Server_Database_And_Reset_CCCD
</UL>

<P><STRONG><a name="[1f0]"></a>system_time_trans</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.system_time_trans))
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_sysTime32_convMachineTime
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_SDBRecord
</UL>

<P><STRONG><a name="[22a]"></a>system_time_trans_ext</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.system_time_trans_ext))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
</UL>

<P><STRONG><a name="[26e]"></a>time_offset1</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.time_offset1))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[270]"></a>time_offset2</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.time_offset2))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[278]"></a>timebase_start_connect</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, multi_master_time.o(i.timebase_start_connect))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect_master
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
</UL>

<P><STRONG><a name="[277]"></a>transportSendData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hw_config.o(i.transportSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = transportSendData &rArr; UART_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1e8]"></a>unpack_channel_map</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.unpack_channel_map))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[1e7]"></a>unpack_update_request</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.unpack_update_request))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[17d]"></a>Get_LedGpioPin</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sdk_eval_led.o(i.Get_LedGpioPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_LedGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalGetVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalLedToggle
</UL>

<P><STRONG><a name="[228]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, system_bluenrg1.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[18a]"></a>Start_Beaconing</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, micro_sleep_test_main.o(i.Start_Beaconing))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Start_Beaconing &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_response_data
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_data
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerTimeoutCallback
</UL>

<P><STRONG><a name="[bd]"></a>BlueNRG_InternalSleep</STRONG> (Thumb, 1568 bytes, Stack size 576 bytes, sleep.o(i.BlueNRG_InternalSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = BlueNRG_InternalSleep &rArr; DeviceConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_contextSave
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Sleep
</UL>

<P><STRONG><a name="[253]"></a>_aci_gap_set_discoverable_param_check</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, bluenrg_gap_aci.o(i._aci_gap_set_discoverable_param_check))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
</UL>

<P><STRONG><a name="[b7]"></a>BlueNRG_Stack_Perform_Crystal_Check</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Perform_Crystal_Check))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Start_Crystal_Measurement
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[1cb]"></a>hci_le_generate_dhkey_complete_event_push</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, hci.o(i.hci_le_generate_dhkey_complete_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = hci_le_generate_dhkey_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Offline_Processing
</UL>

<P><STRONG><a name="[1ca]"></a>hci_le_read_local_p256_public_key_complete_event_push</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, hci.o(i.hci_le_read_local_p256_public_key_complete_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = hci_le_read_local_p256_public_key_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Offline_Processing
</UL>

<P><STRONG><a name="[229]"></a>TimerCallback</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, host_timer.o(i.TimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = TimerCallback &rArr; HAL_VTimerTimeoutCallback &rArr; sleep_timer &rArr;  BTLE_StackTick (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerTimeoutCallback
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Timer_cb
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Repeated_Attacks_Timer_cb
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_SigChan_Req_TimeOut_Handler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_TimeOut_Handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LimDiscTimeoutcb
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DiscProcTimeoutcb
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
</UL>

<P><STRONG><a name="[246]"></a>fifoBuf_getFreeHeader</STRONG> (Thumb, 106 bytes, Stack size unknown bytes, aci_events.o(i.fifoBuf_getFreeHeader))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>

<P><STRONG><a name="[fe]"></a>fifoCtrl_init</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, aci_events.o(i.fifoCtrl_init))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_init
</UL>

<P><STRONG><a name="[133]"></a>_GAP_Parse_Advertising_Report</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, gap.o(i._GAP_Parse_Advertising_Report))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Parse_Advertising_Report
</UL>

<P><STRONG><a name="[12f]"></a>aci_gap_limited_discoverable_event_push</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, gap.o(i.aci_gap_limited_discoverable_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LimDiscTimeoutcb
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Process_Q
</UL>

<P><STRONG><a name="[11a]"></a>aci_gap_proc_complete_event_push</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, gap.o(i.aci_gap_proc_complete_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = aci_gap_proc_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Internal_Evt_Handler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Connection_Complete_Handler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DiscProcTimeoutcb
</UL>

<P><STRONG><a name="[176]"></a>aci_att_read_blob_resp_event_push</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, gatt_client.o(i.aci_att_read_blob_resp_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = aci_att_read_blob_resp_event_push &rArr; PM_Copy_Pckt_Data &rArr; Acl_Copy_Data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>

<P><STRONG><a name="[175]"></a>aci_att_read_multiple_resp_event_push</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, gatt_client.o(i.aci_att_read_multiple_resp_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = aci_att_read_multiple_resp_event_push &rArr; PM_Copy_Pckt_Data &rArr; Acl_Copy_Data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>

<P><STRONG><a name="[174]"></a>aci_att_read_resp_event_push</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, gatt_client.o(i.aci_att_read_resp_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = aci_att_read_resp_event_push &rArr; PM_Copy_Pckt_Data &rArr; Acl_Copy_Data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Get_PDU_Len
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>

<P><STRONG><a name="[179]"></a>aci_gatt_disc_read_char_by_uuid_resp_event_push</STRONG> (Thumb, 110 bytes, Stack size unknown bytes, gatt_client.o(i.aci_gatt_disc_read_char_by_uuid_resp_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = aci_gatt_disc_read_char_by_uuid_resp_event_push &rArr; PM_Copy_Pckt_Data &rArr; Acl_Copy_Data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>

<P><STRONG><a name="[15a]"></a>aci_gatt_error_resp_event_push</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, gatt_client.o(i.aci_gatt_error_resp_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = aci_gatt_error_resp_event_push &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Check_Not_Error_Resp
</UL>

<P><STRONG><a name="[17a]"></a>aci_gatt_proc_complete_event_push</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, gatt_client.o(i.aci_gatt_proc_complete_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Super_Handler_Task7
</UL>

<P><STRONG><a name="[144]"></a>GATT_Server_Set_Flag</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, gatt_server.o(i.GATT_Server_Set_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Connection_Complete_Handler
</UL>

<P><STRONG><a name="[168]"></a>Gatt_Store_Server_Database_And_Reset_CCCD</STRONG> (Thumb, 328 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Store_Server_Database_And_Reset_CCCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Gatt_Store_Server_Database_And_Reset_CCCD &rArr; SMP_Check_Is_Device_Bonded &rArr; SDB_Find_Record &rArr; SM_Resolve_Private_Address &rArr; sm_Calculate_Hash &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Check_Is_Device_Bonded
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Client_Data
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_data
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[196]"></a>Find_L2cap_conn_index</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, l2cap.o(i.Find_L2cap_conn_index))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[1a3]"></a>aci_l2cap_connection_update_req_event_push</STRONG> (Thumb, 130 bytes, Stack size unknown bytes, l2cap.o(i.aci_l2cap_connection_update_req_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
</UL>

<P><STRONG><a name="[27f]"></a>hci_encryption_change_event_push</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, ll_routines_master.o(i.hci_encryption_change_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
</UL>

<P><STRONG><a name="[281]"></a>hci_encryption_key_refresh_complete_event_push</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, ll_routines_master.o(i.hci_encryption_key_refresh_complete_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
</UL>

<P><STRONG><a name="[283]"></a>hci_le_advertising_report_event_push</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, ll_routines_master.o(i.hci_le_advertising_report_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = hci_le_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
</UL>

<P><STRONG><a name="[285]"></a>hci_le_connection_complete_event_push</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, ll_routines_master.o(i.hci_le_connection_complete_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = hci_le_connection_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
</UL>

<P><STRONG><a name="[287]"></a>hci_le_connection_update_complete_event_push</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, ll_routines_master.o(i.hci_le_connection_update_complete_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
</UL>

<P><STRONG><a name="[289]"></a>hci_le_direct_advertising_report_event_push</STRONG> (Thumb, 110 bytes, Stack size unknown bytes, ll_routines_master.o(i.hci_le_direct_advertising_report_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = hci_le_direct_advertising_report_event_push &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
</UL>

<P><STRONG><a name="[28b]"></a>hci_le_enhanced_connection_complete_event_push</STRONG> (Thumb, 140 bytes, Stack size unknown bytes, ll_routines_master.o(i.hci_le_enhanced_connection_complete_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = hci_le_enhanced_connection_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_patched
</UL>

<P><STRONG><a name="[f8]"></a>Mem_assign</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, mem_alloc.o(i.Mem_assign))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator
</UL>

<P><STRONG><a name="[268]"></a>adapt_slot</STRONG> (Thumb, 592 bytes, Stack size unknown bytes, multi_master_time.o(i.adapt_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = adapt_slot &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_updateSlotListEntry
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_searchBestFreeSlot
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_insertSlotListEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_advertise_slot
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_scan_slot
</UL>

<P><STRONG><a name="[26a]"></a>nsar_insertSlotListEntry</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, multi_master_time.o(i.nsar_insertSlotListEntry))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_slot
</UL>

<P><STRONG><a name="[26b]"></a>nsar_searchBestFreeSlot</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, multi_master_time.o(i.nsar_searchBestFreeSlot))
<BR><BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_updateBestFreeSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_slot
</UL>

<P><STRONG><a name="[298]"></a>nsar_updateBestFreeSlot</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, multi_master_time.o(i.nsar_updateBestFreeSlot))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_searchBestFreeSlot
</UL>

<P><STRONG><a name="[269]"></a>nsar_updateSlotListEntry</STRONG> (Thumb, 102 bytes, Stack size unknown bytes, multi_master_time.o(i.nsar_updateSlotListEntry))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_slot
</UL>

<P><STRONG><a name="[272]"></a>swap_char</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, multi_master_time.o(i.swap_char))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[273]"></a>swap_short_int</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, multi_master_time.o(i.swap_short_int))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[9f]"></a>Acl_Copy_Data</STRONG> (Thumb, 130 bytes, Stack size unknown bytes, pm.o(i.Acl_Copy_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Acl_Copy_Data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Get_Pack_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>

<P><STRONG><a name="[f9]"></a>Erase_Sector</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, sdb.o(i.Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Erase_Sector &rArr; FLASH_ErasePage
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Delete
</UL>

<P><STRONG><a name="[1fc]"></a>Write_SDBRecord</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, sdb.o(i.Write_SDBRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Write_SDBRecord &rArr; Flash_Write_Flagged &rArr; FLASH_ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LE_TO_NRG_32
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_With_NOP_Cycles
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Flagged
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Delete
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
</UL>

<P><STRONG><a name="[24f]"></a>aci_gap_numeric_comparison_value_event_push</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, securitymgr.o(i.aci_gap_numeric_comparison_value_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
</UL>

<P><STRONG><a name="[214]"></a>sm_Get_Long_Term_Key</STRONG> (Thumb, 138 bytes, Stack size unknown bytes, securitymgr.o(i.sm_Get_Long_Term_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = sm_Get_Long_Term_Key &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_GenEDIV_RecovDIV
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[29b]"></a>sm_RepeatedAttacks_Protection</STRONG> (Thumb, 258 bytes, Stack size unknown bytes, securitymgr.o(i.sm_RepeatedAttacks_Protection))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = sm_RepeatedAttacks_Protection &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____Pairing_Process_Abort
</UL>

<P><STRONG><a name="[20f]"></a>smp_Build_AuthReq_Field</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Build_AuthReq_Field))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_PairingRequest_Send
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
</UL>

<P><STRONG><a name="[211]"></a>smp_Build_Pairing_ReqResp_Packet</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Build_Pairing_ReqResp_Packet))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_PairingRequest_Send
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
</UL>

<P><STRONG><a name="[2b9]"></a>smp_Check_Incoming_Pairing_Parameters</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Check_Incoming_Pairing_Parameters))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingResponse_Receive
</UL>

<P><STRONG><a name="[215]"></a>smp_Execute_Actions_wrt_Current_State</STRONG> (Thumb, 614 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Execute_Actions_wrt_Current_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp_Execute_Actions_wrt_Current_State &rArr; SDB_Find_Record &rArr; SM_Resolve_Private_Address &rArr; sm_Calculate_Hash &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapIsPrivacySupported
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Buffer_All_Set_To
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_submit_ECC_PK_generation_request
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_Start
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Pairing_OOB_Confirm_Receive_and_Verify
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_PairingPublicKey_Send
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Pairing_Completed
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Start
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____PairingFailed_Send
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Send
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Receive
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Data_From_Record
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Number_Of_Records
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[2bb]"></a>smp_Get_Pairing_Parameters_From_Peer_Packet</STRONG> (Thumb, 130 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Get_Pairing_Parameters_From_Peer_Packet))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingResponse_Receive
</UL>

<P><STRONG><a name="[2a8]"></a>smp_Keys_Distribution_Send</STRONG> (Thumb, 294 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Keys_Distribution_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp_Keys_Distribution_Send &rArr; PM_Write_Pckt_Data &rArr; Acl_Copy_Data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Local_Identity_Address
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_CSRK
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Send_Data
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_GenEDIV_RecovDIV
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_IRK
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[2ab]"></a>smp_LP_MI_Compute_c1_Confirm_Value</STRONG> (Thumb, 342 bytes, Stack size unknown bytes, securitymgr.o(i.smp_LP_MI_Compute_c1_Confirm_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp_LP_MI_Compute_c1_Confirm_Value &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_32
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Send
</UL>

<P><STRONG><a name="[218]"></a>smp_Process_Rx_Packet_Exception_Cases</STRONG> (Thumb, 174 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Process_Rx_Packet_Exception_Cases))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[216]"></a>smp_Process_Rx_Packet_wrt_Current_State</STRONG> (Thumb, 372 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Process_Rx_Packet_wrt_Current_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp_Process_Rx_Packet_wrt_Current_State &rArr; smp____SC_Phase_2AS2_DHKeyCheck_Receive &rArr; PM_Copy_Pckt_Data &rArr; Acl_Copy_Data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Buffer_All_Set_To
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_DHKeyCheck_Receive
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_PairingPublicKey_Receive
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Receive_Keys
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Find_Remote_Device_Index
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____PairingFailed_Send
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_SecurityRequest_Receive
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingResponse_Receive
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingRandom_Receive
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingConfirm_Receive
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Reset_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[2ae]"></a>smp_Reset_Timer</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Reset_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp_Reset_Timer &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Send_Data
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[2b7]"></a>smp_SR_Compute_c1_Confirm_Value</STRONG> (Thumb, 362 bytes, Stack size unknown bytes, securitymgr.o(i.smp_SR_Compute_c1_Confirm_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp_SR_Compute_c1_Confirm_Value &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_32
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
</UL>

<P><STRONG><a name="[2b8]"></a>smp_Set_Key_Association_Method</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Set_Key_Association_Method))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Determine_Key_Association_Method
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____MI_PairingResponse_Receive
</UL>

<P><STRONG><a name="[29e]"></a>smp____MI_PairingConfirm_Receive</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, securitymgr.o(i.smp____MI_PairingConfirm_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp____MI_PairingConfirm_Receive &rArr; PM_Write_Pckt_Data &rArr; Acl_Copy_Data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[2a2]"></a>smp____MI_PairingConfirm_Send</STRONG> (Thumb, 146 bytes, Stack size unknown bytes, securitymgr.o(i.smp____MI_PairingConfirm_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp____MI_PairingConfirm_Send &rArr; PM_Write_Pckt_Data &rArr; Acl_Copy_Data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_f4_Confirm
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Send_Data
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_MI_Compute_c1_Confirm_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[2b5]"></a>smp____MI_PairingRandom_Receive</STRONG> (Thumb, 418 bytes, Stack size unknown bytes, securitymgr.o(i.smp____MI_PairingRandom_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp____MI_PairingRandom_Receive &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Start_Encryption
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_g2_NumComp_Val
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_f4_Confirm
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_LP_s1_Generate_STK
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____PairingFailed_Send
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_MI_Compute_c1_Confirm_Value
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_event_push
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_32
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[2b4]"></a>smp____MI_PairingResponse_Receive</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, securitymgr.o(i.smp____MI_PairingResponse_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp____MI_PairingResponse_Receive &rArr; smp____PairingFailed_Send &rArr; smp____Pairing_Process_Abort &rArr; sm_RepeatedAttacks_Protection &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Continue_If_Exclusive_SC_Pairing
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____PairingFailed_Send
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Set_Key_Association_Method
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Pairing_Parameters_From_Peer_Packet
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Check_Incoming_Pairing_Parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[2b0]"></a>smp____MI_SecurityRequest_Receive</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, securitymgr.o(i.smp____MI_SecurityRequest_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp____MI_SecurityRequest_Receive &rArr; SMP_MI_PairingRequest_Send &rArr; smp_Send_Data &rArr; smp_Reset_Timer &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_MI_PairingRequest_Send
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____PairingFailed_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[217]"></a>smp____Pairing_Process_Abort</STRONG> (Thumb, 182 bytes, Stack size unknown bytes, securitymgr.o(i.smp____Pairing_Process_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp____Pairing_Process_Abort &rArr; sm_RepeatedAttacks_Protection &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_submit_ECC_PK_generation_request
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Find_Remote_Device_Index
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_RepeatedAttacks_Protection
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____PairingFailed_Send
</UL>

<P><STRONG><a name="[2a4]"></a>smp____SR_PairingConfirm_Receive</STRONG> (Thumb, 172 bytes, Stack size unknown bytes, securitymgr.o(i.smp____SR_PairingConfirm_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp____SR_PairingConfirm_Receive &rArr; PM_Write_Pckt_Data &rArr; Acl_Copy_Data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_f4_Confirm
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Send_Data
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_SR_Compute_c1_Confirm_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[2b2]"></a>smp____SR_PairingRandom_Receive</STRONG> (Thumb, 410 bytes, Stack size unknown bytes, securitymgr.o(i.smp____SR_PairingRandom_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp____SR_PairingRandom_Receive &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Set_Att_Pdu_Length
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_g2_NumComp_Val
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_f4_Confirm
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_LP_s1_Generate_STK
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____PairingFailed_Send
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Send_Data
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_SR_Compute_c1_Confirm_Value
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_event_push
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_32
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[2af]"></a>smp____SR_PairingRequest_Receive</STRONG> (Thumb, 398 bytes, Stack size unknown bytes, securitymgr.o(i.smp____SR_PairingRequest_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp____SR_PairingRequest_Receive &rArr; smp_Add_To_Database &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Continue_If_Exclusive_SC_Pairing
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_OOB_Check_Is_Remote_Data_Present
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Add_To_Database
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____PairingFailed_Send
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Send_Data
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Set_Key_Association_Method
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Pairing_Parameters_From_Peer_Packet
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Check_Incoming_Pairing_Parameters
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Build_Pairing_ReqResp_Packet
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Build_AuthReq_Field
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[21f]"></a>SM_Connection_Complete_Handler</STRONG> (Thumb, 118 bytes, Stack size unknown bytes, sm_common.o(i.SM_Connection_Complete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SM_Connection_Complete_Handler &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler_ISR
</UL>

<P><STRONG><a name="[249]"></a>aci_gap_authorization_req_event_push</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, sm_common.o(i.aci_gap_authorization_req_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Pairing_Completed
</UL>

<P><STRONG><a name="[21c]"></a>aci_gap_pairing_complete_event_push</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, sm_common.o(i.aci_gap_pairing_complete_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Encryption_changed_Handler_ISR
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Timer_cb
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Pairing_Completed
</UL>

<P><STRONG><a name="[221]"></a>smp_Keys_Distribution_Complete</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, sm_common.o(i.smp_Keys_Distribution_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp_Keys_Distribution_Complete &rArr; smp_Pairing_Completed &rArr; smp_Add_To_Database &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Start_Encryption
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Pairing_Completed
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_L2CAP_Handler
</UL>

<P><STRONG><a name="[105]"></a>aci_gatt_attribute_modified_event_push</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, att.o(i.aci_gatt_attribute_modified_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = aci_gatt_attribute_modified_event_push &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
</UL>

<P><STRONG><a name="[1f9]"></a>aci_gatt_read_multi_permit_req_event_push</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, att.o(i.aci_gatt_read_multi_permit_req_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = aci_gatt_read_multi_permit_req_event_push &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
</UL>

<P><STRONG><a name="[1f7]"></a>aci_gatt_read_permit_req_event_push</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, att.o(i.aci_gatt_read_permit_req_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
</UL>

<P><STRONG><a name="[233]"></a>aci_gatt_write_permit_req_event_push</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, att.o(i.aci_gatt_write_permit_req_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = aci_gatt_write_permit_req_event_push &rArr; PM_Copy_Pckt_Data &rArr; Acl_Copy_Data &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
</UL>

<P><STRONG><a name="[2c0]"></a>smp____SC_Phase_2AS2_Generate_DHKeyCheck</STRONG> (Thumb, 298 bytes, Stack size unknown bytes, smp_scv42_isap.o(i.smp____SC_Phase_2AS2_Generate_DHKeyCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp____SC_Phase_2AS2_Generate_DHKeyCheck &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_SC_Gen_f6_Check_Val
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2__Set_Addresses
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_OOB_Get_Remote_Data_Reference
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_OOB_Check_Is_Remote_Data_Present
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STORE_LE_32
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_Start
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_DHKeyCheck_Receive
</UL>

<P><STRONG><a name="[2c2]"></a>smp____SC_Phase_2AS2__Set_Addresses</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, smp_scv42_isap.o(i.smp____SC_Phase_2AS2__Set_Addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = smp____SC_Phase_2AS2__Set_Addresses &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_Generate_DHKeyCheck
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SC_Phase_2AS2_Start
</UL>

<P><STRONG><a name="[29a]"></a>LeftShift</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, ssm_algo.o(i.LeftShift))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Generate_SubKeys
</UL>

<P><STRONG><a name="[21d]"></a>SM_CMAC_Generate_Tag</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, ssm_algo.o(i.SM_CMAC_Generate_Tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SM_CMAC_Generate_Tag &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_Generate_SubKeys
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Validate_Signed_Packet
</UL>

<P><STRONG><a name="[220]"></a>sm_Calculate_Hash</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, ssm_algo.o(i.sm_Calculate_Hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = sm_Calculate_Hash &rArr; Osal_MemCpy &rArr; memcpy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Resolve_Private_Address
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Resolvable_Private_Address
</UL>

<P><STRONG><a name="[21e]"></a>sm_Generate_SubKeys</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, ssm_algo.o(i.sm_Generate_SubKeys))
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftShift
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_CMAC_Generate_Tag
</UL>

<P><STRONG><a name="[94]"></a>AES_general_enc</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, crypto.o(i.AES_general_enc))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_general_SW_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Append
</UL>

<P><STRONG><a name="[96]"></a>AES_keyschedule_enc_LL</STRONG> (Thumb, 344 bytes, Stack size unknown bytes, crypto.o(i.AES_keyschedule_enc_LL))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_keyschedule_enc
</UL>

<P><STRONG><a name="[95]"></a>AESstdInit</STRONG> (Thumb, 178 bytes, Stack size unknown bytes, crypto.o(i.AESstdInit))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_keyschedule_enc
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Encrypt_Init
</UL>

<P><STRONG><a name="[1c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[8a]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[77]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[78]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
