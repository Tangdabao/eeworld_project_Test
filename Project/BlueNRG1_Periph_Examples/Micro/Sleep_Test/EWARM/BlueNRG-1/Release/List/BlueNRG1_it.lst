###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       29/Nov/2017  10:11:19
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\BlueNRG1_it.c
#    Command line =  
#        "D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\BlueNRG1_it.c"
#        -D HS_SPEED_XTAL=HS_SPEED_XTAL_16MHZ -D
#        LS_SOURCE=LS_SOURCE_EXTERNAL_32KHZ -D SMPS_INDUCTOR=SMPS_INDUCTOR_10uH
#        --preprocess=cl "D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2
#        DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\Release\List"
#        -lCN "D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\Release\List"
#        -lb "D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\Release\List"
#        --diag_suppress Pe1665 -o "D:\Program Files
#        (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\Release\Obj"
#        --debug --endian=little --cpu=Cortex-M0 --diag_warning Pe1665
#        --diag_suppress Pe1665 -e --fpu=None --dlib_config
#        D:\Software\IAR_BlueNRG\arm\INC\c\DLib_Config_Normal.h -I "D:\Program
#        Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\..\..\"
#        -I "D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\..\..\..\..\..\..\Library\BlueNRG1_Periph_Driver\inc\"
#        -I "D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\..\..\..\..\..\..\Library\CMSIS\Device\ST\BlueNRG1\Include\"
#        -I "D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\..\..\..\..\..\..\Library\SDK_Eval_BlueNRG1\inc\"
#        -I "D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\..\..\..\..\..\..\Library\CMSIS\Include\"
#        -I "D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\..\..\..\..\..\..\Library\hal\inc\"
#        -I "D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\..\..\..\..\..\..\Library\Bluetooth_LE\inc\"
#        -Ohz
#    Locale       =  Chinese (Simplified)_China.936
#    List file    =  
#        D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\Release\List\BlueNRG1_it.lst
#    Object file  =  
#        D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK
#        2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\EWARM\BlueNRG-1\Release\Obj\BlueNRG1_it.o
#
###############################################################################

D:\Program Files (x86)\STMicroelectronics\BlueNRG-1_2 DK 2.5.0\Project\BlueNRG1_Periph_Examples\Micro\Sleep_Test\BlueNRG1_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    BlueNRG1_it.c 
      4            * @author  VMA RF Application Team
      5            * @version V1.0.0
      6            * @date    September-2015
      7            * @brief   Main Interrupt Service Routines.
      8            *          This file provides template for all exceptions handler and
      9            *          peripherals interrupt service routine.
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     15            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     16            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     17            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     18            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19            *
     20            * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
     21            ******************************************************************************
     22            */
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include <stdio.h>
     26          #include "BlueNRG1_it.h"
     27          #include "BlueNRG1_conf.h"
     28          #include "sleep.h"
     29          #include "bluenrg1_stack.h"
     30          #include "SDK_EVAL_Led.h"
     31          
     32          /** @addtogroup BlueNRG1_StdPeriph_Examples
     33            * @{
     34            */
     35          
     36          /** @addtogroup GPIO_Examples
     37            * @{
     38            */ 
     39          
     40          /** @addtogroup GPIO_IOToggle
     41            * @{
     42            */ 
     43          
     44          /* Private typedef -----------------------------------------------------------*/
     45          /* Private define ------------------------------------------------------------*/
     46          /* Private macro -------------------------------------------------------------*/
     47          /* Private variables ---------------------------------------------------------*/
     48          /* Private function prototypes -----------------------------------------------*/
     49          /* Private functions ---------------------------------------------------------*/
     50          
     51          /******************************************************************************/
     52          /*            Cortex-M0 Processor Exceptions Handlers                         */
     53          /******************************************************************************/
     54          
     55          /**
     56            * @brief  This function handles NMI exception.
     57            */

   \                                 In section .text, align 2, keep-with-next
     58          void NMI_Handler(void)
     59          {
     60          }
   \                     NMI_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     61          
     62          /**
     63            * @brief  This function handles Hard Fault exception.
     64            */

   \                                 In section .text, align 2, keep-with-next
     65          void HardFault_Handler(void)
     66          {
     67            /* Go to infinite loop when Hard Fault exception occurs */
     68            while (1)
   \                     HardFault_Handler: (+1)
   \                     ??HardFault_Handler_0: (+1)
   \   00000000   0xE7FE             B        ??HardFault_Handler_0
     69            {}
     70          }
     71          
     72          /**
     73            * @brief  This function handles SVCall exception.
     74            */

   \                                 In section .text, align 2, keep-with-next
     75          void SVC_Handler(void)
     76          {
     77          }
   \                     SVC_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     78          
     79          /**
     80            * @brief  This function handles PendSV_Handler exception.
     81            */
     82          //void PendSV_Handler(void)
     83          //{
     84          //}
     85          
     86          /**
     87            * @brief  This function handles SysTick Handler.
     88            */

   \                                 In section .text, align 2, keep-with-next
     89          void SysTick_Handler(void)
     90          {
     91          }
   \                     SysTick_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     92          

   \                                 In section .text, align 2, keep-with-next
     93          void GPIO_Handler(void)
     94          {
   \                     GPIO_Handler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     95            if (GPIO_GetITPendingBit(GPIO_Pin_13)) {// || 
   \   00000002   0x2480             MOVS     R4,#+128
   \   00000004   0x01A4             LSLS     R4,R4,#+6        ;; #+8192
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       GPIO_GetITPendingBit
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD005             BEQ      ??GPIO_Handler_0
     96              //   ((GPIO->MIS == 0) && (BlueNRG_wakeupSource()== WAKEUP_IO13))) {
     97              GPIO_ClearITPendingBit(GPIO_Pin_13);
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       GPIO_ClearITPendingBit
     98              SdkEvalLedToggle(LED1);
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       SdkEvalLedToggle
     99            }
    100          }
   \                     ??GPIO_Handler_0: (+1)
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    101          
    102          /******************************************************************************/
    103          /*                 BlueNRG-1 Peripherals Interrupt Handlers                   */
    104          /*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
    105          /*  available peripheral interrupt handler's name please refer to the startup */
    106          /*  file (system_bluenrg1.c).                                               */
    107          /******************************************************************************/
    108          /**
    109          * @brief  This function handles UART interrupt request.
    110          * @param  None
    111          * @retval None
    112          */

   \                                 In section .text, align 2, keep-with-next
    113          void UART_Handler(void)
    114          {  
   \                     UART_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    115            if (UART_GetITStatus(UART_IT_RX) != RESET)
   \   00000002   0x2010             MOVS     R0,#+16
   \   00000004   0x.... 0x....      BL       UART_GetITStatus
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD002             BEQ      ??UART_Handler_0
    116            {
    117              /* Clear the interrupt */
    118              UART_ClearITPendingBit(UART_IT_RX);
   \   0000000C   0x2010             MOVS     R0,#+16
   \   0000000E   0x.... 0x....      BL       UART_ClearITPendingBit
    119            }
    120          }
   \                     ??UART_Handler_0: (+1)
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    121          

   \                                 In section .text, align 2, keep-with-next
    122          void Blue_Handler(void)
    123          {
   \                     Blue_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    124             RAL_Isr();
   \   00000002   0x.... 0x....      BL       RAL_Isr
    125          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    126          
    127          
    128          /**
    129            * @}
    130            */ 
    131          
    132          /**
    133            * @}
    134            */ 
    135          
    136          /**
    137            * @}
    138            */ 
    139          
    140          /******************* (C) COPYRIGHT 2015 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Blue_Handler
         8   -> RAL_Isr
       8   GPIO_Handler
         8   -> GPIO_ClearITPendingBit
         8   -> GPIO_GetITPendingBit
         8   -> SdkEvalLedToggle
       0   HardFault_Handler
       0   NMI_Handler
       0   SVC_Handler
       0   SysTick_Handler
       8   UART_Handler
         8   -> UART_ClearITPendingBit
         8   -> UART_GetITStatus


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  Blue_Handler
      30  GPIO_Handler
       2  HardFault_Handler
       2  NMI_Handler
       2  SVC_Handler
       2  SysTick_Handler
      20  UART_Handler

 
 66 bytes in section .text
 
 66 bytes of CODE memory

Errors: none
Warnings: none
