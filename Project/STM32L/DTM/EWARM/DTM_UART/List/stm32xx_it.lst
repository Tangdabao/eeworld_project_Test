###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       29/Jan/2018  14:45:28
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\src\stm32xx_it.c
#    Command line =  
#        "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\src\stm32xx_it.c"
#        -D STM32L151xB -D STM32L1XX_XL -D USE_STM32L1XX_STEVAL_IDB00xV1 -D
#        USE_HAL_DRIVER -D HCLK_32MHZ=1 -D SYSCLK_MSI=1 -D ENABLE_USART -D
#        USER_DEFINED_PLATFORM=USER_EVAL_PLATFORM -D IRQ_RESET_PIN -D DTM_UART
#        -lC "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\List"
#        -o "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\Software\IAR_BlueNRG\arm\INC\c\DLib_Config_Normal.h -I
#        "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\HAL\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\BSP\STM32L1xx_BlueNRG1\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\BSP\STM32L1xx_Nucleo\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\CMSIS\Device\ST\STM32L1xx\Include\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\STM32L1xx_HAL_Driver\Inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\STM32L1xx_HAL_BlueNRG1_Drivers\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\SimpleBlueNRG1_HCI\includes\"
#        -On --use_c++_inline -I D:\Software\IAR_BlueNRG\arm\CMSIS\Include\
#    Locale       =  Chinese (Simplified)_China.936
#    List file    =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\List\stm32xx_it.lst
#    Object file  =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\Obj\stm32xx_it.o
#
###############################################################################

C:\Users\Administrator\Desktop\Temporary Files\eeworld_project\Project_Test\Project\STM32L\DTM\src\stm32xx_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32xx_it.c 
      4            * @author  RF Application Team - AMG
      5            * @version V1.0.0
      6            * @date    August, 2016
      7            * @brief   Main Interrupt Service Routines.
      8            *          This file provides template for all exceptions handler and 
      9            *          peripherals interrupt service routine.
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
     19            */
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "stm32xx_it.h" 
     23          
     24          /** @addtogroup STM32L1XX_BlueNRG_Applications
     25           *  @{
     26           */
     27          
     28          /** @addtogroup SampleApp
     29           *  @{
     30           */
     31           
     32          /** @defgroup INTERRUPT_HANDLER 
     33           * @{
     34           */
     35           
     36          /* Private typedef -----------------------------------------------------------*/
     37          /* Private define ------------------------------------------------------------*/
     38          /* Private macro -------------------------------------------------------------*/
     39          /* Private variables ---------------------------------------------------------*/
     40          extern SPI_HandleTypeDef SpiHandle;
     41          
     42          /* Private function prototypes -----------------------------------------------*/
     43          /* Private functions ---------------------------------------------------------*/
     44          
     45          /******************************************************************************/
     46          /*            Cortex-M0 Processor Exceptions Handlers                         */
     47          /******************************************************************************/
     48          
     49          /**
     50            * @brief  NMI_Handler This function handles NMI exception.
     51            * @param  None
     52            * @retval None
     53            */

   \                                 In section .text, align 2, keep-with-next
     54          void NMI_Handler(void)
     55          {
     56          }
   \                     NMI_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     57          
     58          /**
     59            * @brief  HardFault_Handler This function handles Hard Fault exception.
     60            * @param  None
     61            * @retval None
     62            */

   \                                 In section .text, align 2, keep-with-next
     63          void HardFault_Handler(void)
     64          {
     65            /* Go to infinite loop when Hard Fault exception occurs */
     66            while (1)
   \                     HardFault_Handler: (+1)
   \                     ??HardFault_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??HardFault_Handler_0
     67            {
     68            }
     69          }
     70          
     71          /**
     72            * @brief  SVC_Handler This function handles SVCall exception.
     73            * @param  None
     74            * @retval None
     75            */

   \                                 In section .text, align 2, keep-with-next
     76          void SVC_Handler(void)
     77          {
     78          }
   \                     SVC_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     79          
     80          /**
     81            * @brief  DebugMon_Handler This function handles Debug Monitor exception.
     82            * @param  None
     83            * @retval None
     84            */

   \                                 In section .text, align 2, keep-with-next
     85          void DebugMon_Handler(void)
     86          {
     87          }
   \                     DebugMon_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     88          
     89          /**
     90            * @brief  PendSV_Handler This function handles PendSVC exception.
     91            * @param  None
     92            * @retval None
     93            */

   \                                 In section .text, align 2, keep-with-next
     94          void PendSV_Handler(void)
     95          {
     96          }
   \                     PendSV_Handler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     97          
     98          /**
     99            * @brief  SysTick_Handler This function handles SysTick Handler.
    100            * @param  None
    101            * @retval None
    102            */

   \                                 In section .text, align 2, keep-with-next
    103          void SysTick_Handler(void)
    104          {
   \                     SysTick_Handler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    105            HAL_IncTick();
   \   00000002   0x.... 0x....      BL       HAL_IncTick
    106          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    107          
    108          /******************************************************************************/
    109          /*                 STM32L1xx Peripherals Interrupt Handlers                   */
    110          /*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
    111          /*  available peripheral interrupt handler's name please refer to the startup */
    112          /*  file (startup_stm32l1xx.s).                                               */
    113          /******************************************************************************/
    114          
    115          #ifdef DTM_SPI
    116          /**
    117            * @brief  This function handles DMA Rx interrupt request.
    118            * @param  None
    119            * @retval None
    120            */
    121          void DMA1_Channel2_IRQHandler(void)
    122          {
    123            HAL_DMA_IRQHandler(SpiHandle.hdmarx);
    124          }
    125          
    126          /**
    127            * @brief  This function handles DMA Tx interrupt request.
    128            * @param  None
    129            * @retval None
    130            */
    131          void DMA1_Channel3_IRQHandler(void)
    132          {
    133            HAL_DMA_IRQHandler(SpiHandle.hdmatx);
    134          }
    135          #endif
    136          
    137          /**
    138            * @brief  This function handles USART2 interrupt request.
    139            * @param  None
    140            * @retval None
    141            */

   \                                 In section .text, align 2, keep-with-next
    142          void USART2_IRQHandler(void)
    143          {
   \                     USART2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    144            SdkEval_IO_Uart_Irq_Handler();
   \   00000002   0x.... 0x....      BL       SdkEval_IO_Uart_Irq_Handler
    145          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    146          
    147          #ifdef DTM_UART
    148          extern UART_HandleTypeDef DTM_UartHandle;

   \                                 In section .text, align 2, keep-with-next
    149          void USART1_IRQHandler(void)
    150          {
   \                     USART1_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    151            HAL_UART_IRQHandler(&DTM_UartHandle);
   \   00000002   0x....             LDR.N    R0,??DataTable0
   \   00000004   0x.... 0x....      BL       HAL_UART_IRQHandler
    152          }
   \   00000008   0xBD01             POP      {R0,PC}          ;; return
    153          
    154          //uint8_t CTS_FLAG_UART = RESET;

   \                                 In section .text, align 2, keep-with-next
    155          void EXTI15_10_IRQHandler(void)
    156          {
   \                     EXTI15_10_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    157          //  CTS_FLAG_UART = SET;
    158            HAL_GPIO_EXTI_IRQHandler(DTM_USART_CTS_PIN);
   \   00000002   0xF44F 0x6000      MOV      R0,#+2048
   \   00000006   0x.... 0x....      BL       HAL_GPIO_EXTI_IRQHandler
    159          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     DTM_UartHandle
    160          #endif
    161          
    162          /**
    163           * @}
    164           */ 
    165          
    166          /**
    167           * @}
    168           */ 
    169          
    170          /**
    171           * @}
    172           */
    173          
    174          /******************* (C) COPYRIGHT 2016 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DebugMon_Handler
       8   EXTI15_10_IRQHandler
         8   -> HAL_GPIO_EXTI_IRQHandler
       0   HardFault_Handler
       0   NMI_Handler
       0   PendSV_Handler
       0   SVC_Handler
       8   SysTick_Handler
         8   -> HAL_IncTick
       8   USART1_IRQHandler
         8   -> HAL_UART_IRQHandler
       8   USART2_IRQHandler
         8   -> SdkEval_IO_Uart_Irq_Handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       2  DebugMon_Handler
      12  EXTI15_10_IRQHandler
       2  HardFault_Handler
       2  NMI_Handler
       2  PendSV_Handler
       2  SVC_Handler
       8  SysTick_Handler
      10  USART1_IRQHandler
       8  USART2_IRQHandler

 
 52 bytes in section .text
 
 52 bytes of CODE memory

Errors: none
Warnings: none
