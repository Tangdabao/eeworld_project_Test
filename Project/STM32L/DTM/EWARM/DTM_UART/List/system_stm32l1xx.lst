###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       29/Jan/2018  14:45:29
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\src\system_stm32l1xx.c
#    Command line =  
#        "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\src\system_stm32l1xx.c"
#        -D STM32L151xB -D STM32L1XX_XL -D USE_STM32L1XX_STEVAL_IDB00xV1 -D
#        USE_HAL_DRIVER -D HCLK_32MHZ=1 -D SYSCLK_MSI=1 -D ENABLE_USART -D
#        USER_DEFINED_PLATFORM=USER_EVAL_PLATFORM -D IRQ_RESET_PIN -D DTM_UART
#        -lC "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\List"
#        -o "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\Software\IAR_BlueNRG\arm\INC\c\DLib_Config_Normal.h -I
#        "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\HAL\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\BSP\STM32L1xx_BlueNRG1\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\BSP\STM32L1xx_Nucleo\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\CMSIS\Device\ST\STM32L1xx\Include\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\STM32L1xx_HAL_Driver\Inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\STM32L1xx_HAL_BlueNRG1_Drivers\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\SimpleBlueNRG1_HCI\includes\"
#        -On --use_c++_inline -I D:\Software\IAR_BlueNRG\arm\CMSIS\Include\
#    Locale       =  Chinese (Simplified)_China.936
#    List file    =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\List\system_stm32l1xx.lst
#    Object file  =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\Obj\system_stm32l1xx.o
#
###############################################################################

C:\Users\Administrator\Desktop\Temporary Files\eeworld_project\Project_Test\Project\STM32L\DTM\src\system_stm32l1xx.c
      1          /**
      2            ******************************************************************************
      3            * @file    system_stm32l1xx.c
      4            * @author  MCD Application Team
      5            * @version V2.1.1
      6            * @date    31-March-2015
      7            * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
      8            *             
      9            *   This file provides two functions and one global variable to be called from 
     10            *   user application:
     11            *      - SystemInit(): This function is called at startup just after reset and 
     12            *                      before branch to main program. This call is made inside
     13            *                      the "startup_stm32l1xx.s" file.
     14            *                        
     15            *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
     16            *                                  by the user application to setup the SysTick 
     17            *                                  timer or configure other parameters.
     18            *                                     
     19            *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
     20            *                                 be called whenever the core clock is changed
     21            *                                 during program execution.   
     22            *      
     23            ******************************************************************************
     24            * @attention
     25            *
     26            * <h2><center>&copy; COPYRIGHT(c) 2015 STMicroelectronics</center></h2>
     27            *
     28            * Redistribution and use in source and binary forms, with or without modification,
     29            * are permitted provided that the following conditions are met:
     30            *   1. Redistributions of source code must retain the above copyright notice,
     31            *      this list of conditions and the following disclaimer.
     32            *   2. Redistributions in binary form must reproduce the above copyright notice,
     33            *      this list of conditions and the following disclaimer in the documentation
     34            *      and/or other materials provided with the distribution.
     35            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     36            *      may be used to endorse or promote products derived from this software
     37            *      without specific prior written permission.
     38            *
     39            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     40            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     41            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     42            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     43            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     44            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     45            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     46            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     47            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     48            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     49            *
     50            ******************************************************************************
     51            */
     52          
     53          /** @addtogroup CMSIS
     54            * @{
     55            */
     56          
     57          /** @addtogroup stm32l1xx_system
     58            * @{
     59            */  
     60            
     61          /** @addtogroup STM32L1xx_System_Private_Includes
     62            * @{
     63            */
     64          
     65          #include "stm32l1xx.h"
     66          #include "SDK_EVAL_Config.h"
     67          
     68          /**
     69            * @}
     70            */
     71          
     72          /** @addtogroup STM32L1xx_System_Private_TypesDefinitions
     73            * @{
     74            */
     75          
     76          /**
     77            * @}
     78            */
     79          
     80          /** @addtogroup STM32L1xx_System_Private_Defines
     81            * @{
     82            */
     83          
     84          #if !defined  (HSE_VALUE) 
     85            #define HSE_VALUE    ((uint32_t)8000000) /*!< Default value of the External oscillator in Hz.
     86                                                          This value can be provided and adapted by the user application. */
     87          #endif /* HSE_VALUE */
     88          
     89          #if !defined  (HSI_VALUE)
     90            #define HSI_VALUE    ((uint32_t)8000000) /*!< Default value of the Internal oscillator in Hz.
     91                                                          This value can be provided and adapted by the user application. */
     92          #endif /* HSI_VALUE */
     93          
     94          /*!< Uncomment the following line if you need to use external SRAM mounted
     95               on STM32L152D_EVAL board as data memory  */
     96          /* #define DATA_IN_ExtSRAM */
     97            
     98          /*!< Uncomment the following line if you need to relocate your vector Table in
     99               Internal SRAM. */ 
    100          /* #define VECT_TAB_SRAM */
    101          #ifndef VECT_TAB_OFFSET 
    102          #define VECT_TAB_OFFSET  0//0x3000 
    103                                          /*!< Vector Table base offset field. 
    104                                            This value must be a multiple of 0x200. */
    105          #endif 
    106          /**
    107            * @}
    108            */
    109          
    110          /** @addtogroup STM32L1xx_System_Private_Macros
    111            * @{
    112            */
    113          
    114          /**
    115            * @}
    116            */
    117          
    118          /** @addtogroup STM32L1xx_System_Private_Variables
    119            * @{
    120            */
    121            /* This variable is updated in three ways:
    122                1) by calling CMSIS function SystemCoreClockUpdate()
    123                2) by calling HAL API function HAL_RCC_GetHCLKFreq()
    124                3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
    125                   Note: If you use this function to configure the system clock; then there
    126                         is no need to call the 2 first functions listed above, since SystemCoreClock
    127                         variable is updated automatically.
    128            */

   \                                 In section .data, align 4
    129          uint32_t SystemCoreClock    = 32000000;
   \                     SystemCoreClock:
   \   00000000   0x01E84800         DC32 32000000

   \                                 In section .data, align 4
    130          __IO const uint8_t PLLMulTable[9] = {3, 4, 6, 8, 12, 16, 24, 32, 48};
   \                     PLLMulTable:
   \   00000000   0x03 0x04          DC8 3, 4, 6, 8, 12, 16, 24, 32, 48, 0, 0, 0
   \              0x06 0x08    
   \              0x0C 0x10    
   \              0x18 0x20    
   \              0x30 0x00    
   \              0x00 0x00    

   \                                 In section .data, align 4
    131          __IO const uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
   \                     AHBPrescTable:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x01 0x02    
   \              0x03 0x04    
   \              0x06 0x07    
   \              0x08 0x09    
    132          
    133          /**
    134            * @}
    135            */
    136          
    137          /** @addtogroup STM32L1xx_System_Private_FunctionPrototypes
    138            * @{
    139            */
    140          
    141          #if defined (STM32L151xD) || defined (STM32L152xD) || defined (STM32L162xD)
    142          #ifdef DATA_IN_ExtSRAM
    143            static void SystemInit_ExtMemCtl(void); 
    144          #endif /* DATA_IN_ExtSRAM */
    145          #endif /* STM32L151xD || STM32L152xD || STM32L162xD */
    146          
    147          /**
    148            * @}
    149            */
    150          
    151          /** @addtogroup STM32L1xx_System_Private_Functions
    152            * @{
    153            */
    154          
    155          /**
    156            * @brief  Setup the microcontroller system.
    157            *         Initialize the Embedded Flash Interface, the PLL and update the 
    158            *         SystemCoreClock variable.
    159            * @param  None
    160            * @retval None
    161            */

   \                                 In section .text, align 2, keep-with-next
    162          void SystemInit (void)
    163          {
    164            /*!< Set MSION bit */
    165            RCC->CR |= (uint32_t)0x00000100;
   \                     SystemInit: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable1  ;; 0x40023800
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   00000008   0x....             LDR.N    R1,??DataTable1  ;; 0x40023800
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    166          
    167            /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
    168            RCC->CFGR &= (uint32_t)0x88FFC00C;
   \   0000000C   0x....             LDR.N    R0,??DataTable1_1  ;; 0x40023808
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x....             LDR.N    R1,??DataTable1_2  ;; 0x88ffc00c
   \   00000012   0x4008             ANDS     R0,R1,R0
   \   00000014   0x....             LDR.N    R1,??DataTable1_1  ;; 0x40023808
   \   00000016   0x6008             STR      R0,[R1, #+0]
    169            
    170            /*!< Reset HSION, HSEON, CSSON and PLLON bits */
    171            RCC->CR &= (uint32_t)0xEEFEFFFE;
   \   00000018   0x....             LDR.N    R0,??DataTable1  ;; 0x40023800
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x....             LDR.N    R1,??DataTable1_3  ;; 0xeefefffe
   \   0000001E   0x4008             ANDS     R0,R1,R0
   \   00000020   0x....             LDR.N    R1,??DataTable1  ;; 0x40023800
   \   00000022   0x6008             STR      R0,[R1, #+0]
    172          
    173            /*!< Reset HSEBYP bit */
    174            RCC->CR &= (uint32_t)0xFFFBFFFF;
   \   00000024   0x....             LDR.N    R0,??DataTable1  ;; 0x40023800
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xF430 0x2080      BICS     R0,R0,#0x40000
   \   0000002C   0x....             LDR.N    R1,??DataTable1  ;; 0x40023800
   \   0000002E   0x6008             STR      R0,[R1, #+0]
    175          
    176            /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
    177            RCC->CFGR &= (uint32_t)0xFF02FFFF;
   \   00000030   0x....             LDR.N    R0,??DataTable1_1  ;; 0x40023808
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0xF430 0x007D      BICS     R0,R0,#0xFD0000
   \   00000038   0x....             LDR.N    R1,??DataTable1_1  ;; 0x40023808
   \   0000003A   0x6008             STR      R0,[R1, #+0]
    178          
    179            /*!< Disable all interrupts */
    180            RCC->CIR = 0x00000000;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x....             LDR.N    R1,??DataTable1_4  ;; 0x4002380c
   \   00000040   0x6008             STR      R0,[R1, #+0]
    181          
    182          #ifdef DATA_IN_ExtSRAM
    183            SystemInit_ExtMemCtl(); 
    184          #endif /* DATA_IN_ExtSRAM */
    185              
    186          #ifdef VECT_TAB_SRAM
    187            SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
    188          #else
    189            SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
   \   00000042   0xF05F 0x6000      MOVS     R0,#+134217728
   \   00000046   0x....             LDR.N    R1,??DataTable1_5  ;; 0xe000ed08
   \   00000048   0x6008             STR      R0,[R1, #+0]
    190          #endif
    191          }
   \   0000004A   0x4770             BX       LR               ;; return
    192          
    193          /**
    194            * @brief  Update SystemCoreClock according to Clock Register Values
    195            *         The SystemCoreClock variable contains the core clock (HCLK), it can
    196            *         be used by the user application to setup the SysTick timer or configure
    197            *         other parameters.
    198            *           
    199            * @note   Each time the core clock (HCLK) changes, this function must be called
    200            *         to update SystemCoreClock variable value. Otherwise, any configuration
    201            *         based on this variable will be incorrect.         
    202            *     
    203            * @note   - The system frequency computed by this function is not the real 
    204            *           frequency in the chip. It is calculated based on the predefined 
    205            *           constant and the selected clock source:
    206            *             
    207            *           - If SYSCLK source is MSI, SystemCoreClock will contain the MSI 
    208            *             value as defined by the MSI range.
    209            *                                   
    210            *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
    211            *                                              
    212            *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
    213            *                          
    214            *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
    215            *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
    216            *         
    217            *         (*) HSI_VALUE is a constant defined in stm32l1xx.h file (default value
    218            *             16 MHz) but the real value may vary depending on the variations
    219            *             in voltage and temperature.   
    220            *    
    221            *         (**) HSE_VALUE is a constant defined in stm32l1xx.h file (default value
    222            *              8 MHz), user has to ensure that HSE_VALUE is same as the real
    223            *              frequency of the crystal used. Otherwise, this function may
    224            *              have wrong result.
    225            *                
    226            *         - The result of this function could be not correct when using fractional
    227            *           value for HSE crystal.
    228            * @param  None
    229            * @retval None
    230            */

   \                                 In section .text, align 2, keep-with-next
    231          void SystemCoreClockUpdate (void)
    232          {
   \                     SystemCoreClockUpdate: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    233            uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x2400             MOVS     R4,#+0
    234          
    235            /* Get SYSCLK source -------------------------------------------------------*/
    236            tmp = RCC->CFGR & RCC_CFGR_SWS;
   \   0000000C   0x....             LDR.N    R5,??DataTable1_1  ;; 0x40023808
   \   0000000E   0x682D             LDR      R5,[R5, #+0]
   \   00000010   0xF015 0x050C      ANDS     R5,R5,#0xC
   \   00000014   0x0028             MOVS     R0,R5
    237            
    238            switch (tmp)
   \   00000016   0x0005             MOVS     R5,R0
   \   00000018   0x2D00             CMP      R5,#+0
   \   0000001A   0xD006             BEQ.N    ??SystemCoreClockUpdate_0
   \   0000001C   0x2D04             CMP      R5,#+4
   \   0000001E   0xD012             BEQ.N    ??SystemCoreClockUpdate_1
   \   00000020   0x2D08             CMP      R5,#+8
   \   00000022   0xD014             BEQ.N    ??SystemCoreClockUpdate_2
   \   00000024   0x2D0C             CMP      R5,#+12
   \   00000026   0xD016             BEQ.N    ??SystemCoreClockUpdate_3
   \   00000028   0xE03B             B.N      ??SystemCoreClockUpdate_4
    239            {
    240              case 0x00:  /* MSI used as system clock */
    241                msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
   \                     ??SystemCoreClockUpdate_0: (+1)
   \   0000002A   0x....             LDR.N    R5,??DataTable1_6  ;; 0x40023804
   \   0000002C   0x682D             LDR      R5,[R5, #+0]
   \   0000002E   0xF3C5 0x3542      UBFX     R5,R5,#+13,#+3
   \   00000032   0x002C             MOVS     R4,R5
    242                SystemCoreClock = (32768 * (1 << (msirange + 1)));
   \   00000034   0x2501             MOVS     R5,#+1
   \   00000036   0x1C66             ADDS     R6,R4,#+1
   \   00000038   0x40B5             LSLS     R5,R5,R6
   \   0000003A   0xF44F 0x4600      MOV      R6,#+32768
   \   0000003E   0x4375             MULS     R5,R6,R5
   \   00000040   0x....             LDR.N    R6,??DataTable1_7
   \   00000042   0x6035             STR      R5,[R6, #+0]
    243                break;
   \   00000044   0xE03A             B.N      ??SystemCoreClockUpdate_5
    244              case 0x04:  /* HSI used as system clock */
    245                SystemCoreClock = HSI_VALUE;
   \                     ??SystemCoreClockUpdate_1: (+1)
   \   00000046   0x....             LDR.N    R5,??DataTable1_8  ;; 0xf42400
   \   00000048   0x....             LDR.N    R6,??DataTable1_7
   \   0000004A   0x6035             STR      R5,[R6, #+0]
    246                break;
   \   0000004C   0xE036             B.N      ??SystemCoreClockUpdate_5
    247              case 0x08:  /* HSE used as system clock */
    248                SystemCoreClock = HSE_VALUE;
   \                     ??SystemCoreClockUpdate_2: (+1)
   \   0000004E   0x....             LDR.N    R5,??DataTable1_9  ;; 0x7a1200
   \   00000050   0x....             LDR.N    R6,??DataTable1_7
   \   00000052   0x6035             STR      R5,[R6, #+0]
    249                break;
   \   00000054   0xE032             B.N      ??SystemCoreClockUpdate_5
    250              case 0x0C:  /* PLL used as system clock */
    251                /* Get PLL clock source and multiplication factor ----------------------*/
    252                pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
   \                     ??SystemCoreClockUpdate_3: (+1)
   \   00000056   0x....             LDR.N    R5,??DataTable1_1  ;; 0x40023808
   \   00000058   0x682D             LDR      R5,[R5, #+0]
   \   0000005A   0xF415 0x1570      ANDS     R5,R5,#0x3C0000
   \   0000005E   0x0029             MOVS     R1,R5
    253                plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
   \   00000060   0x....             LDR.N    R5,??DataTable1_1  ;; 0x40023808
   \   00000062   0x682D             LDR      R5,[R5, #+0]
   \   00000064   0xF415 0x0540      ANDS     R5,R5,#0xC00000
   \   00000068   0x002A             MOVS     R2,R5
    254                pllmul = PLLMulTable[(pllmul >> 18)];
   \   0000006A   0x....             LDR.N    R5,??DataTable1_10
   \   0000006C   0x0C89             LSRS     R1,R1,#+18
   \   0000006E   0x5C69             LDRB     R1,[R5, R1]
    255                plldiv = (plldiv >> 22) + 1;
   \   00000070   0x0D92             LSRS     R2,R2,#+22
   \   00000072   0x1C52             ADDS     R2,R2,#+1
    256                
    257                pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
   \   00000074   0x....             LDR.N    R5,??DataTable1_1  ;; 0x40023808
   \   00000076   0x682D             LDR      R5,[R5, #+0]
   \   00000078   0xF415 0x3580      ANDS     R5,R5,#0x10000
   \   0000007C   0x002B             MOVS     R3,R5
    258          
    259                if (pllsource == 0x00)
   \   0000007E   0x2B00             CMP      R3,#+0
   \   00000080   0xD107             BNE.N    ??SystemCoreClockUpdate_6
    260                {
    261                  /* HSI oscillator clock selected as PLL clock entry */
    262                  SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
   \   00000082   0x....             LDR.N    R5,??DataTable1_8  ;; 0xf42400
   \   00000084   0xFB05 0xF501      MUL      R5,R5,R1
   \   00000088   0xFBB5 0xF5F2      UDIV     R5,R5,R2
   \   0000008C   0x....             LDR.N    R6,??DataTable1_7
   \   0000008E   0x6035             STR      R5,[R6, #+0]
   \   00000090   0xE006             B.N      ??SystemCoreClockUpdate_7
    263                }
    264                else
    265                {
    266                  /* HSE selected as PLL clock entry */
    267                  SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
   \                     ??SystemCoreClockUpdate_6: (+1)
   \   00000092   0x....             LDR.N    R5,??DataTable1_9  ;; 0x7a1200
   \   00000094   0xFB05 0xF501      MUL      R5,R5,R1
   \   00000098   0xFBB5 0xF5F2      UDIV     R5,R5,R2
   \   0000009C   0x....             LDR.N    R6,??DataTable1_7
   \   0000009E   0x6035             STR      R5,[R6, #+0]
    268                }
    269                break;
   \                     ??SystemCoreClockUpdate_7: (+1)
   \   000000A0   0xE00C             B.N      ??SystemCoreClockUpdate_5
    270              default: /* MSI used as system clock */
    271                msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
   \                     ??SystemCoreClockUpdate_4: (+1)
   \   000000A2   0x....             LDR.N    R5,??DataTable1_6  ;; 0x40023804
   \   000000A4   0x682D             LDR      R5,[R5, #+0]
   \   000000A6   0xF3C5 0x3542      UBFX     R5,R5,#+13,#+3
   \   000000AA   0x002C             MOVS     R4,R5
    272                SystemCoreClock = (32768 * (1 << (msirange + 1)));
   \   000000AC   0x2501             MOVS     R5,#+1
   \   000000AE   0x1C66             ADDS     R6,R4,#+1
   \   000000B0   0x40B5             LSLS     R5,R5,R6
   \   000000B2   0xF44F 0x4600      MOV      R6,#+32768
   \   000000B6   0x4375             MULS     R5,R6,R5
   \   000000B8   0x....             LDR.N    R6,??DataTable1_7
   \   000000BA   0x6035             STR      R5,[R6, #+0]
    273                break;
    274            }
    275            /* Compute HCLK clock frequency --------------------------------------------*/
    276            /* Get HCLK prescaler */
    277            tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
   \                     ??SystemCoreClockUpdate_5: (+1)
   \   000000BC   0x....             LDR.N    R5,??DataTable1_1  ;; 0x40023808
   \   000000BE   0x682D             LDR      R5,[R5, #+0]
   \   000000C0   0x....             LDR.N    R6,??DataTable1_11
   \   000000C2   0xF3C5 0x1503      UBFX     R5,R5,#+4,#+4
   \   000000C6   0x5D75             LDRB     R5,[R6, R5]
   \   000000C8   0x0028             MOVS     R0,R5
    278            /* HCLK clock frequency */
    279            SystemCoreClock >>= tmp;
   \   000000CA   0x....             LDR.N    R5,??DataTable1_7
   \   000000CC   0x682D             LDR      R5,[R5, #+0]
   \   000000CE   0x40C5             LSRS     R5,R5,R0
   \   000000D0   0x....             LDR.N    R6,??DataTable1_7
   \   000000D2   0x6035             STR      R5,[R6, #+0]
    280          }
   \   000000D4   0xBC70             POP      {R4-R6}
   \   000000D6   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x40023800         DC32     0x40023800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x40023808         DC32     0x40023808

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x88FFC00C         DC32     0x88ffc00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0xEEFEFFFE         DC32     0xeefefffe

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x4002380C         DC32     0x4002380c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0xE000ED08         DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x40023804         DC32     0x40023804

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x........         DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x00F42400         DC32     0xf42400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x007A1200         DC32     0x7a1200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x........         DC32     PLLMulTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0x........         DC32     AHBPrescTable
    281          
    282          #if defined (STM32L151xD) || defined (STM32L152xD) || defined (STM32L162xD)
    283          #ifdef DATA_IN_ExtSRAM
    284          /**
    285            * @brief  Setup the external memory controller.
    286            *         Called in SystemInit() function before jump to main.
    287            *         This function configures the external SRAM mounted on STM32L152D_EVAL board
    288            *         This SRAM will be used as program data memory (including heap and stack).
    289            * @param  None
    290            * @retval None
    291            */
    292          void SystemInit_ExtMemCtl(void)
    293          {
    294            __IO uint32_t tmpreg = 0;
    295          
    296            /* Flash 1 wait state */
    297            FLASH->ACR |= FLASH_ACR_LATENCY;
    298            
    299            /* Power enable */
    300            RCC->APB1ENR |= RCC_APB1ENR_PWREN;
    301            
    302            /* Delay after an RCC peripheral clock enabling */
    303            tmpreg = READ_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
    304          
    305            /* Select the Voltage Range 1 (1.8 V) */
    306            PWR->CR = PWR_CR_VOS_0;
    307            
    308            /* Wait Until the Voltage Regulator is ready */
    309            while((PWR->CSR & PWR_CSR_VOSF) != RESET)
    310            {
    311            }
    312            
    313          /*-- GPIOs Configuration -----------------------------------------------------*/
    314          /*
    315           +-------------------+--------------------+------------------+------------------+
    316           +                       SRAM pins assignment                                   +
    317           +-------------------+--------------------+------------------+------------------+
    318           | PD0  <-> FSMC_D2  | PE0  <-> FSMC_NBL0 | PF0  <-> FSMC_A0 | PG0 <-> FSMC_A10 |
    319           | PD1  <-> FSMC_D3  | PE1  <-> FSMC_NBL1 | PF1  <-> FSMC_A1 | PG1 <-> FSMC_A11 |
    320           | PD4  <-> FSMC_NOE | PE7  <-> FSMC_D4   | PF2  <-> FSMC_A2 | PG2 <-> FSMC_A12 |
    321           | PD5  <-> FSMC_NWE | PE8  <-> FSMC_D5   | PF3  <-> FSMC_A3 | PG3 <-> FSMC_A13 |
    322           | PD8  <-> FSMC_D13 | PE9  <-> FSMC_D6   | PF4  <-> FSMC_A4 | PG4 <-> FSMC_A14 |
    323           | PD9  <-> FSMC_D14 | PE10 <-> FSMC_D7   | PF5  <-> FSMC_A5 | PG5 <-> FSMC_A15 |
    324           | PD10 <-> FSMC_D15 | PE11 <-> FSMC_D8   | PF12 <-> FSMC_A6 | PG10<-> FSMC_NE2 |
    325           | PD11 <-> FSMC_A16 | PE12 <-> FSMC_D9   | PF13 <-> FSMC_A7 |------------------+
    326           | PD12 <-> FSMC_A17 | PE13 <-> FSMC_D10  | PF14 <-> FSMC_A8 | 
    327           | PD13 <-> FSMC_A18 | PE14 <-> FSMC_D11  | PF15 <-> FSMC_A9 | 
    328           | PD14 <-> FSMC_D0  | PE15 <-> FSMC_D12  |------------------+
    329           | PD15 <-> FSMC_D1  |--------------------+ 
    330           +-------------------+
    331          */
    332          
    333            /* Enable GPIOD, GPIOE, GPIOF and GPIOG interface clock */
    334            RCC->AHBENR   = 0x000080D8;
    335            
    336            /* Delay after an RCC peripheral clock enabling */
    337            tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_GPIODEN);
    338            
    339            /* Connect PDx pins to FSMC Alternate function */
    340            GPIOD->AFR[0]  = 0x00CC00CC;
    341            GPIOD->AFR[1]  = 0xCCCCCCCC;
    342            /* Configure PDx pins in Alternate function mode */  
    343            GPIOD->MODER   = 0xAAAA0A0A;
    344            /* Configure PDx pins speed to 40 MHz */  
    345            GPIOD->OSPEEDR = 0xFFFF0F0F;
    346            /* Configure PDx pins Output type to push-pull */  
    347            GPIOD->OTYPER  = 0x00000000;
    348            /* No pull-up, pull-down for PDx pins */ 
    349            GPIOD->PUPDR   = 0x00000000;
    350          
    351            /* Connect PEx pins to FSMC Alternate function */
    352            GPIOE->AFR[0]  = 0xC00000CC;
    353            GPIOE->AFR[1]  = 0xCCCCCCCC;
    354            /* Configure PEx pins in Alternate function mode */ 
    355            GPIOE->MODER   = 0xAAAA800A;
    356            /* Configure PEx pins speed to 40 MHz */ 
    357            GPIOE->OSPEEDR = 0xFFFFC00F;
    358            /* Configure PEx pins Output type to push-pull */  
    359            GPIOE->OTYPER  = 0x00000000;
    360            /* No pull-up, pull-down for PEx pins */ 
    361            GPIOE->PUPDR   = 0x00000000;
    362          
    363            /* Connect PFx pins to FSMC Alternate function */
    364            GPIOF->AFR[0]  = 0x00CCCCCC;
    365            GPIOF->AFR[1]  = 0xCCCC0000;
    366            /* Configure PFx pins in Alternate function mode */   
    367            GPIOF->MODER   = 0xAA000AAA;
    368            /* Configure PFx pins speed to 40 MHz */ 
    369            GPIOF->OSPEEDR = 0xFF000FFF;
    370            /* Configure PFx pins Output type to push-pull */  
    371            GPIOF->OTYPER  = 0x00000000;
    372            /* No pull-up, pull-down for PFx pins */ 
    373            GPIOF->PUPDR   = 0x00000000;
    374          
    375            /* Connect PGx pins to FSMC Alternate function */
    376            GPIOG->AFR[0]  = 0x00CCCCCC;
    377            GPIOG->AFR[1]  = 0x00000C00;
    378            /* Configure PGx pins in Alternate function mode */ 
    379            GPIOG->MODER   = 0x00200AAA;
    380            /* Configure PGx pins speed to 40 MHz */ 
    381            GPIOG->OSPEEDR = 0x00300FFF;
    382            /* Configure PGx pins Output type to push-pull */  
    383            GPIOG->OTYPER  = 0x00000000;
    384            /* No pull-up, pull-down for PGx pins */ 
    385            GPIOG->PUPDR   = 0x00000000;
    386            
    387          /*-- FSMC Configuration ------------------------------------------------------*/
    388            /* Enable the FSMC interface clock */
    389            RCC->AHBENR    = 0x400080D8;
    390          
    391            /* Delay after an RCC peripheral clock enabling */
    392            tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_FSMCEN);
    393            
    394            (void)(tmpreg);
    395            
    396            /* Configure and enable Bank1_SRAM3 */
    397            FSMC_Bank1->BTCR[4]  = 0x00001011;
    398            FSMC_Bank1->BTCR[5]  = 0x00000300;
    399            FSMC_Bank1E->BWTR[4] = 0x0FFFFFFF;
    400          /*
    401            Bank1_SRAM3 is configured as follow:
    402          
    403            p.FSMC_AddressSetupTime = 0;
    404            p.FSMC_AddressHoldTime = 0;
    405            p.FSMC_DataSetupTime = 3;
    406            p.FSMC_BusTurnAroundDuration = 0;
    407            p.FSMC_CLKDivision = 0;
    408            p.FSMC_DataLatency = 0;
    409            p.FSMC_AccessMode = FSMC_AccessMode_A;
    410          
    411            FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM3;
    412            FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
    413            FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
    414            FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
    415            FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
    416            FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
    417            FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
    418            FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
    419            FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
    420            FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
    421            FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
    422            FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
    423            FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
    424            FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
    425            FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
    426          
    427            FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure); 
    428          
    429            FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM3, ENABLE);
    430          */
    431            
    432          }
    433          #endif /* DATA_IN_ExtSRAM */
    434          #endif /* STM32L151xD || STM32L152xD || STM32L162xD */
    435          
    436          /**
    437            * @}
    438            */
    439          
    440          /**
    441            * @}
    442            */
    443          
    444          /**
    445            * @}
    446            */
    447          
    448          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   SystemCoreClockUpdate
       0   SystemInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      16  AHBPrescTable
      12  PLLMulTable
       4  SystemCoreClock
     216  SystemCoreClockUpdate
      76  SystemInit

 
  32 bytes in section .data
 340 bytes in section .text
 
 340 bytes of CODE memory
  32 bytes of DATA memory

Errors: none
Warnings: none
