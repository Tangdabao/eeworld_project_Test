###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       29/Jan/2018  14:45:27
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Library\STM32L\Drivers\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_spi_ex.c
#    Command line =  
#        "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Library\STM32L\Drivers\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_spi_ex.c"
#        -D STM32L151xB -D STM32L1XX_XL -D USE_STM32L1XX_STEVAL_IDB00xV1 -D
#        USE_HAL_DRIVER -D HCLK_32MHZ=1 -D SYSCLK_MSI=1 -D ENABLE_USART -D
#        USER_DEFINED_PLATFORM=USER_EVAL_PLATFORM -D IRQ_RESET_PIN -D DTM_UART
#        -lC "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\List"
#        -o "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\Software\IAR_BlueNRG\arm\INC\c\DLib_Config_Normal.h -I
#        "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\HAL\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\BSP\STM32L1xx_BlueNRG1\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\BSP\STM32L1xx_Nucleo\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\CMSIS\Device\ST\STM32L1xx\Include\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\STM32L1xx_HAL_Driver\Inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\STM32L1xx_HAL_BlueNRG1_Drivers\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\SimpleBlueNRG1_HCI\includes\"
#        -On --use_c++_inline -I D:\Software\IAR_BlueNRG\arm\CMSIS\Include\
#    Locale       =  Chinese (Simplified)_China.936
#    List file    =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\List\stm32l1xx_hal_spi_ex.lst
#    Object file  =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\Obj\stm32l1xx_hal_spi_ex.o
#
###############################################################################

C:\Users\Administrator\Desktop\Temporary Files\eeworld_project\Project_Test\Library\STM32L\Drivers\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_spi_ex.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32l1xx_hal_spi_ex.c
      4            * @author  MCD Application Team
      5            * @version V1.1.1
      6            * @date    31-March-2015
      7            * @brief   Extended SPI HAL module driver.
      8            *    
      9            *          This file provides firmware functions to manage the following 
     10            *          functionalities SPI extension peripheral:
     11            *           + Extended Peripheral Control functions
     12            *  
     13            ******************************************************************************
     14            * @attention
     15            *
     16            * <h2><center>&copy; COPYRIGHT(c) 2015 STMicroelectronics</center></h2>
     17            *
     18            * Redistribution and use in source and binary forms, with or without modification,
     19            * are permitted provided that the following conditions are met:
     20            *   1. Redistributions of source code must retain the above copyright notice,
     21            *      this list of conditions and the following disclaimer.
     22            *   2. Redistributions in binary form must reproduce the above copyright notice,
     23            *      this list of conditions and the following disclaimer in the documentation
     24            *      and/or other materials provided with the distribution.
     25            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     26            *      may be used to endorse or promote products derived from this software
     27            *      without specific prior written permission.
     28            *
     29            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     30            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     31            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     32            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     33            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     34            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     35            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     36            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     37            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     38            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     39            *
     40            ******************************************************************************
     41            */
     42          
     43          /* Includes ------------------------------------------------------------------*/
     44          #include "stm32l1xx_hal.h"
     45          
     46          /** @addtogroup STM32L1xx_HAL_Driver
     47            * @{
     48            */
     49          
     50          /** @addtogroup SPI
     51            * @{
     52            */
     53          #ifdef HAL_SPI_MODULE_ENABLED
     54          
     55          /* Private typedef -----------------------------------------------------------*/
     56          /* Private define ------------------------------------------------------------*/
     57          /* Private macro -------------------------------------------------------------*/
     58          /* Private variables ---------------------------------------------------------*/
     59          /* Private function prototypes -----------------------------------------------*/
     60          /* Private functions ---------------------------------------------------------*/
     61          
     62          /** @addtogroup SPI_Exported_Functions
     63            * @{
     64            */
     65          
     66          /** @addtogroup SPI_Exported_Functions_Group1
     67           *
     68            * @{
     69            */
     70          
     71          /**
     72            * @brief  Initializes the SPI according to the specified parameters 
     73            *         in the SPI_InitTypeDef and create the associated handle.
     74            * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
     75            *                the configuration information for SPI module.
     76            * @retval HAL status
     77            */

   \                                 In section .text, align 2, keep-with-next
     78          HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
     79          {
   \                     HAL_SPI_Init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     80            /* Check the SPI handle allocation */
     81            if(hspi == NULL)
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD101             BNE.N    ??HAL_SPI_Init_0
     82            {
     83              return HAL_ERROR;
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xE038             B.N      ??HAL_SPI_Init_1
     84            }
     85          
     86            /* Check the parameters */
     87            assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
     88            assert_param(IS_SPI_MODE(hspi->Init.Mode));
     89            assert_param(IS_SPI_DIRECTION_MODE(hspi->Init.Direction));
     90            assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
     91            assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
     92            assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
     93            assert_param(IS_SPI_NSS(hspi->Init.NSS));
     94            assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
     95            assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
     96            assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
     97            assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
     98            assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
     99          
    100            if(hspi->State == HAL_SPI_STATE_RESET)
   \                     ??HAL_SPI_Init_0: (+1)
   \   0000000C   0xF894 0x0051      LDRB     R0,[R4, #+81]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD105             BNE.N    ??HAL_SPI_Init_2
    101            {
    102              /* Allocate lock resource and initialize it */
    103              hspi->Lock = HAL_UNLOCKED;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xF884 0x0050      STRB     R0,[R4, #+80]
    104          
    105              /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    106              HAL_SPI_MspInit(hspi);
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       HAL_SPI_MspInit
    107            }
    108            
    109            hspi->State = HAL_SPI_STATE_BUSY;
   \                     ??HAL_SPI_Init_2: (+1)
   \   00000020   0x2002             MOVS     R0,#+2
   \   00000022   0xF884 0x0051      STRB     R0,[R4, #+81]
    110          
    111            /* Disble the selected SPI peripheral */
    112            __HAL_SPI_DISABLE(hspi);
   \   00000026   0x6820             LDR      R0,[R4, #+0]
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0xF030 0x0040      BICS     R0,R0,#0x40
   \   0000002E   0x6821             LDR      R1,[R4, #+0]
   \   00000030   0x6008             STR      R0,[R1, #+0]
    113          
    114            /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
    115            /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
    116            Communication speed, First bit and CRC calculation state */
    117            hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
    118                                   hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
    119                                   hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
   \   00000032   0x6860             LDR      R0,[R4, #+4]
   \   00000034   0x68A1             LDR      R1,[R4, #+8]
   \   00000036   0x4308             ORRS     R0,R1,R0
   \   00000038   0x68E1             LDR      R1,[R4, #+12]
   \   0000003A   0x4308             ORRS     R0,R1,R0
   \   0000003C   0x6921             LDR      R1,[R4, #+16]
   \   0000003E   0x4308             ORRS     R0,R1,R0
   \   00000040   0x6961             LDR      R1,[R4, #+20]
   \   00000042   0x4308             ORRS     R0,R1,R0
   \   00000044   0x69A1             LDR      R1,[R4, #+24]
   \   00000046   0xF411 0x7100      ANDS     R1,R1,#0x200
   \   0000004A   0x4308             ORRS     R0,R1,R0
   \   0000004C   0x69E1             LDR      R1,[R4, #+28]
   \   0000004E   0x4308             ORRS     R0,R1,R0
   \   00000050   0x6A21             LDR      R1,[R4, #+32]
   \   00000052   0x4308             ORRS     R0,R1,R0
   \   00000054   0x6AA1             LDR      R1,[R4, #+40]
   \   00000056   0x4308             ORRS     R0,R1,R0
   \   00000058   0x6821             LDR      R1,[R4, #+0]
   \   0000005A   0x6008             STR      R0,[R1, #+0]
    120          
    121            /* Configure : NSS management */
    122            hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode);
   \   0000005C   0x69A0             LDR      R0,[R4, #+24]
   \   0000005E   0x0C00             LSRS     R0,R0,#+16
   \   00000060   0xF010 0x0004      ANDS     R0,R0,#0x4
   \   00000064   0x6A61             LDR      R1,[R4, #+36]
   \   00000066   0x4308             ORRS     R0,R1,R0
   \   00000068   0x6821             LDR      R1,[R4, #+0]
   \   0000006A   0x6048             STR      R0,[R1, #+4]
    123          
    124            /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
    125            /* Configure : CRC Polynomial */
    126            hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
   \   0000006C   0x6AE0             LDR      R0,[R4, #+44]
   \   0000006E   0x6821             LDR      R1,[R4, #+0]
   \   00000070   0x6108             STR      R0,[R1, #+16]
    127          
    128          #if defined (STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined (STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined (STM32L151xE) || defined (STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    129            /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
    130            CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
    131          #endif
    132          
    133            hspi->ErrorCode = HAL_SPI_ERROR_NONE;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x6560             STR      R0,[R4, #+84]
    134            hspi->State = HAL_SPI_STATE_READY;
   \   00000076   0x2001             MOVS     R0,#+1
   \   00000078   0xF884 0x0051      STRB     R0,[R4, #+81]
    135            
    136            return HAL_OK;
   \   0000007C   0x2000             MOVS     R0,#+0
   \                     ??HAL_SPI_Init_1: (+1)
   \   0000007E   0xBD10             POP      {R4,PC}          ;; return
    137          }
    138          
    139          /**
    140            * @}
    141            */
    142          
    143          /**
    144            * @}
    145            */
    146          
    147          #endif /* HAL_SPI_MODULE_ENABLED */
    148          /**
    149            * @}
    150            */
    151          
    152          /**
    153            * @}
    154            */
    155          
    156          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   HAL_SPI_Init
         8   -> HAL_SPI_MspInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     128  HAL_SPI_Init

 
 128 bytes in section .text
 
 128 bytes of CODE memory

Errors: none
Warnings: none
