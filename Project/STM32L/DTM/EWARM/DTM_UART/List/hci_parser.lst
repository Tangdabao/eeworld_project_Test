###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       29/Jan/2018  14:45:21
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\src\hci_parser.c
#    Command line =  
#        "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\src\hci_parser.c"
#        -D STM32L151xB -D STM32L1XX_XL -D USE_STM32L1XX_STEVAL_IDB00xV1 -D
#        USE_HAL_DRIVER -D HCLK_32MHZ=1 -D SYSCLK_MSI=1 -D ENABLE_USART -D
#        USER_DEFINED_PLATFORM=USER_EVAL_PLATFORM -D IRQ_RESET_PIN -D DTM_UART
#        -lC "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\List"
#        -o "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\Software\IAR_BlueNRG\arm\INC\c\DLib_Config_Normal.h -I
#        "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\HAL\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\BSP\STM32L1xx_BlueNRG1\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\BSP\STM32L1xx_Nucleo\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\CMSIS\Device\ST\STM32L1xx\Include\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\STM32L1xx_HAL_Driver\Inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\STM32L1xx_HAL_BlueNRG1_Drivers\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\SimpleBlueNRG1_HCI\includes\"
#        -On --use_c++_inline -I D:\Software\IAR_BlueNRG\arm\CMSIS\Include\
#    Locale       =  Chinese (Simplified)_China.936
#    List file    =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\List\hci_parser.lst
#    Object file  =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\Obj\hci_parser.o
#
###############################################################################

C:\Users\Administrator\Desktop\Temporary Files\eeworld_project\Project_Test\Project\STM32L\DTM\src\hci_parser.c
      1          /**
      2          ******************************************************************************
      3          * @file    hci_parser.c 
      4          * @author  RF Application Team - AMG
      5          * @version V1.0.0
      6          * @date    August, 2016
      7          * @brief   HCI parser file
      8          ******************************************************************************
      9          * @attention
     10          *
     11          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13          * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14          * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15          * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16          * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17          *
     18          * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
     19          ******************************************************************************
     20          */ 
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "hci_parser.h"
     24          #include "SDK_EVAL_Config.h"
     25          
     26          /* Private macro -------------------------------------------------------------*/
     27          /* Private define ------------------------------------------------------------*/
     28          #define HCI_PACKET_SIZE         512
     29          
     30          /* Commands */
     31          #define READ_VERSION            0x01
     32          #define BLUENRG_RESET           0x04
     33          #define HW_BOOTLOADER           0x05
     34          
     35          /* Types of response index */
     36          #define RESP_VENDOR_CODE_OFFSET     1
     37          #define RESP_LEN_OFFSET_LSB         2
     38          #define RESP_LEN_OFFSET_MSB         3
     39          #define RESP_CMDCODE_OFFSET         4
     40          #define RESP_STATUS_OFFSET          5
     41          #define RESP_PARAM_OFFSET           6
     42          
     43          /* Types of vendor codes */
     44          #define ERROR                   0
     45          #define RESPONSE                1
     46          
     47          /* Error codes */
     48          #define UNKNOWN_COMMAND	        0x01
     49          #define INVALID_PARAMETERS	0x12
     50          
     51          /* Private typedef -----------------------------------------------------------*/
     52          typedef __packed struct _hci_acl_hdr{
     53          	uint16_t	handle;		/* Handle & Flags(PB, BC) */
     54          	uint16_t	dlen;
     55          } hci_acl_hdr;
     56          
     57          /* Private variables ---------------------------------------------------------*/
     58          extern volatile uint8_t command_fifo[1024];
     59          extern volatile uint16_t command_fifo_size;
     60          

   \                                 In section .bss, align 4
     61          static uint8_t hci_buffer[HCI_PACKET_SIZE];
   \                     hci_buffer:
   \   00000000                      DS8 512

   \                                 In section .bss, align 4
     62          uint8_t buffer_out[HCI_PACKET_SIZE];
   \                     buffer_out:
   \   00000000                      DS8 512

   \                                 In section .bss, align 2
     63          static volatile uint16_t hci_pckt_len = 0;
   \                     hci_pckt_len:
   \   00000000                      DS8 2
     64          
     65          
     66          /* Private function prototypes -----------------------------------------------*/
     67          static void packet_received(void);
     68          static uint16_t parse_cmd(uint8_t *hci_buffer, uint16_t hci_pckt_len, uint8_t *buffer_out);
     69          

   \                                 In section .text, align 2, keep-with-next
     70          void hci_input(uint8_t *buff, uint16_t len)
     71          {
   \                     hci_input: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     72            static hci_state state = WAITING_TYPE;
     73              
     74            static uint16_t collected_payload_len = 0;
     75            static uint16_t payload_len;
     76            hci_acl_hdr *acl_hdr;
     77            uint8_t byte;
     78            uint8_t i = 0;
   \   00000008   0xF05F 0x0800      MOVS     R8,#+0
     79                  
     80            if(state == WAITING_TYPE)
   \   0000000C   0x....             LDR.N    R0,??DataTable1
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD102             BNE.N    ??hci_input_0
     81              hci_pckt_len = 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x....             LDR.N    R1,??DataTable1_1
   \   00000018   0x8008             STRH     R0,[R1, #+0]
     82              
     83            while(hci_pckt_len < HCI_PACKET_SIZE && i++ < len){
   \                     ??hci_input_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable1_1
   \   0000001C   0x8800             LDRH     R0,[R0, #+0]
   \   0000001E   0xF5B0 0x7F00      CMP      R0,#+512
   \   00000022   0xF280 0x80D2      BGE.W    ??hci_input_1
   \   00000026   0x4640             MOV      R0,R8
   \   00000028   0xF110 0x0801      ADDS     R8,R0,#+1
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x0029             MOVS     R1,R5
   \   00000030   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000032   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000034   0x4288             CMP      R0,R1
   \   00000036   0xF080 0x80C8      BCS.W    ??hci_input_1
     84                  
     85              byte = *buff++;
   \   0000003A   0x7820             LDRB     R0,[R4, #+0]
   \   0000003C   0x0007             MOVS     R7,R0
   \   0000003E   0x1C64             ADDS     R4,R4,#+1
     86              hci_buffer[hci_pckt_len++] = byte;        
   \   00000040   0x....             LDR.N    R0,??DataTable1_1
   \   00000042   0x8800             LDRH     R0,[R0, #+0]
   \   00000044   0x1C41             ADDS     R1,R0,#+1
   \   00000046   0x....             LDR.N    R2,??DataTable1_1
   \   00000048   0x8011             STRH     R1,[R2, #+0]
   \   0000004A   0x....             LDR.N    R1,??DataTable1_2
   \   0000004C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004E   0x540F             STRB     R7,[R1, R0]
     87                  
     88              if(state == WAITING_TYPE){
   \   00000050   0x....             LDR.N    R0,??DataTable1
   \   00000052   0x7800             LDRB     R0,[R0, #+0]
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD118             BNE.N    ??hci_input_2
     89                /* Only command or vendor packets are accepted. */
     90                if(byte == HCI_COMMAND_PKT){
   \   00000058   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000005A   0x2F01             CMP      R7,#+1
   \   0000005C   0xD103             BNE.N    ??hci_input_3
     91                  state = WAITING_OPCODE_1;
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0x....             LDR.N    R1,??DataTable1
   \   00000062   0x7008             STRB     R0,[R1, #+0]
   \   00000064   0xE7D9             B.N      ??hci_input_0
     92                }
     93                else if(byte == HCI_ACLDATA_PKT){
   \                     ??hci_input_3: (+1)
   \   00000066   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000068   0x2F02             CMP      R7,#+2
   \   0000006A   0xD103             BNE.N    ??hci_input_4
     94                  state = WAITING_HANDLE;
   \   0000006C   0x2007             MOVS     R0,#+7
   \   0000006E   0x....             LDR.N    R1,??DataTable1
   \   00000070   0x7008             STRB     R0,[R1, #+0]
   \   00000072   0xE7D2             B.N      ??hci_input_0
     95                }
     96                else if(byte == HCI_VENDOR_PKT){
   \                     ??hci_input_4: (+1)
   \   00000074   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000076   0x2FFF             CMP      R7,#+255
   \   00000078   0xD103             BNE.N    ??hci_input_5
     97                  state = WAITING_CMDCODE;
   \   0000007A   0x2003             MOVS     R0,#+3
   \   0000007C   0x....             LDR.N    R1,??DataTable1
   \   0000007E   0x7008             STRB     R0,[R1, #+0]
   \   00000080   0xE7CB             B.N      ??hci_input_0
     98                }
     99                else{
    100                  /* Incorrect type. Reset state machine. */
    101                  state = WAITING_TYPE;
   \                     ??hci_input_5: (+1)
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x....             LDR.N    R1,??DataTable1
   \   00000086   0x7008             STRB     R0,[R1, #+0]
   \   00000088   0xE7C7             B.N      ??hci_input_0
    102                }
    103              }
    104              else if(state == WAITING_OPCODE_1){
   \                     ??hci_input_2: (+1)
   \   0000008A   0x....             LDR.N    R0,??DataTable1
   \   0000008C   0x7800             LDRB     R0,[R0, #+0]
   \   0000008E   0x2801             CMP      R0,#+1
   \   00000090   0xD103             BNE.N    ??hci_input_6
    105                state = WAITING_OPCODE_2;
   \   00000092   0x2002             MOVS     R0,#+2
   \   00000094   0x....             LDR.N    R1,??DataTable1
   \   00000096   0x7008             STRB     R0,[R1, #+0]
   \   00000098   0xE7BF             B.N      ??hci_input_0
    106              }
    107              else if(state == WAITING_OPCODE_2){
   \                     ??hci_input_6: (+1)
   \   0000009A   0x....             LDR.N    R0,??DataTable1
   \   0000009C   0x7800             LDRB     R0,[R0, #+0]
   \   0000009E   0x2802             CMP      R0,#+2
   \   000000A0   0xD103             BNE.N    ??hci_input_7
    108                state = WAITING_PARAM_LEN;
   \   000000A2   0x2006             MOVS     R0,#+6
   \   000000A4   0x....             LDR.N    R1,??DataTable1
   \   000000A6   0x7008             STRB     R0,[R1, #+0]
   \   000000A8   0xE7B7             B.N      ??hci_input_0
    109              }
    110              else if(state == WAITING_CMDCODE){
   \                     ??hci_input_7: (+1)
   \   000000AA   0x....             LDR.N    R0,??DataTable1
   \   000000AC   0x7800             LDRB     R0,[R0, #+0]
   \   000000AE   0x2803             CMP      R0,#+3
   \   000000B0   0xD103             BNE.N    ??hci_input_8
    111                state = WAITING_CMD_LEN1;
   \   000000B2   0x2004             MOVS     R0,#+4
   \   000000B4   0x....             LDR.N    R1,??DataTable1
   \   000000B6   0x7008             STRB     R0,[R1, #+0]
   \   000000B8   0xE7AF             B.N      ??hci_input_0
    112              }
    113              else if(state == WAITING_CMD_LEN1){
   \                     ??hci_input_8: (+1)
   \   000000BA   0x....             LDR.N    R0,??DataTable1
   \   000000BC   0x7800             LDRB     R0,[R0, #+0]
   \   000000BE   0x2804             CMP      R0,#+4
   \   000000C0   0xD106             BNE.N    ??hci_input_9
    114                payload_len = byte;
   \   000000C2   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000C4   0x....             LDR.N    R0,??DataTable1_3
   \   000000C6   0x8007             STRH     R7,[R0, #+0]
    115                state = WAITING_CMD_LEN2;
   \   000000C8   0x2005             MOVS     R0,#+5
   \   000000CA   0x....             LDR.N    R1,??DataTable1
   \   000000CC   0x7008             STRB     R0,[R1, #+0]
   \   000000CE   0xE7A4             B.N      ??hci_input_0
    116              }
    117              else if(state == WAITING_CMD_LEN2){
   \                     ??hci_input_9: (+1)
   \   000000D0   0x....             LDR.N    R0,??DataTable1
   \   000000D2   0x7800             LDRB     R0,[R0, #+0]
   \   000000D4   0x2805             CMP      R0,#+5
   \   000000D6   0xD117             BNE.N    ??hci_input_10
    118                payload_len += byte << 8;
   \   000000D8   0x....             LDR.N    R0,??DataTable1_3
   \   000000DA   0x8800             LDRH     R0,[R0, #+0]
   \   000000DC   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000DE   0xEB10 0x2007      ADDS     R0,R0,R7, LSL #+8
   \   000000E2   0x....             LDR.N    R1,??DataTable1_3
   \   000000E4   0x8008             STRH     R0,[R1, #+0]
    119                collected_payload_len = 0;
   \   000000E6   0x2000             MOVS     R0,#+0
   \   000000E8   0x....             LDR.N    R1,??DataTable1_4
   \   000000EA   0x8008             STRH     R0,[R1, #+0]
    120                if(payload_len == 0){
   \   000000EC   0x....             LDR.N    R0,??DataTable1_3
   \   000000EE   0x8800             LDRH     R0,[R0, #+0]
   \   000000F0   0x2800             CMP      R0,#+0
   \   000000F2   0xD105             BNE.N    ??hci_input_11
    121                  state = WAITING_TYPE;
   \   000000F4   0x2000             MOVS     R0,#+0
   \   000000F6   0x....             LDR.N    R1,??DataTable1
   \   000000F8   0x7008             STRB     R0,[R1, #+0]
    122                  packet_received();                
   \   000000FA   0x.... 0x....      BL       packet_received
   \   000000FE   0xE78C             B.N      ??hci_input_0
    123                }
    124                else {
    125                  state = WAITING_PAYLOAD;
   \                     ??hci_input_11: (+1)
   \   00000100   0x200B             MOVS     R0,#+11
   \   00000102   0x....             LDR.N    R1,??DataTable1
   \   00000104   0x7008             STRB     R0,[R1, #+0]
   \   00000106   0xE788             B.N      ??hci_input_0
    126                }
    127              }
    128              else if(state == WAITING_PARAM_LEN){
   \                     ??hci_input_10: (+1)
   \   00000108   0x....             LDR.N    R0,??DataTable1
   \   0000010A   0x7800             LDRB     R0,[R0, #+0]
   \   0000010C   0x2806             CMP      R0,#+6
   \   0000010E   0xD113             BNE.N    ??hci_input_12
    129                payload_len = byte;
   \   00000110   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000112   0x....             LDR.N    R0,??DataTable1_3
   \   00000114   0x8007             STRH     R7,[R0, #+0]
    130                collected_payload_len = 0;
   \   00000116   0x2000             MOVS     R0,#+0
   \   00000118   0x....             LDR.N    R1,??DataTable1_4
   \   0000011A   0x8008             STRH     R0,[R1, #+0]
    131                if(payload_len == 0){
   \   0000011C   0x....             LDR.N    R0,??DataTable1_3
   \   0000011E   0x8800             LDRH     R0,[R0, #+0]
   \   00000120   0x2800             CMP      R0,#+0
   \   00000122   0xD105             BNE.N    ??hci_input_13
    132                  state = WAITING_TYPE;
   \   00000124   0x2000             MOVS     R0,#+0
   \   00000126   0x....             LDR.N    R1,??DataTable1
   \   00000128   0x7008             STRB     R0,[R1, #+0]
    133                  packet_received();
   \   0000012A   0x.... 0x....      BL       packet_received
   \   0000012E   0xE774             B.N      ??hci_input_0
    134                }
    135                else {
    136                  state = WAITING_PAYLOAD;
   \                     ??hci_input_13: (+1)
   \   00000130   0x200B             MOVS     R0,#+11
   \   00000132   0x....             LDR.N    R1,??DataTable1
   \   00000134   0x7008             STRB     R0,[R1, #+0]
   \   00000136   0xE770             B.N      ??hci_input_0
    137                }            
    138              }
    139              /*** State transitions for ACL packets ***/
    140              else if(state == WAITING_HANDLE){
   \                     ??hci_input_12: (+1)
   \   00000138   0x....             LDR.N    R0,??DataTable1
   \   0000013A   0x7800             LDRB     R0,[R0, #+0]
   \   0000013C   0x2807             CMP      R0,#+7
   \   0000013E   0xD103             BNE.N    ??hci_input_14
    141                state = WAITING_HANDLE_FLAG;
   \   00000140   0x2008             MOVS     R0,#+8
   \   00000142   0x....             LDR.N    R1,??DataTable1
   \   00000144   0x7008             STRB     R0,[R1, #+0]
   \   00000146   0xE768             B.N      ??hci_input_0
    142              }
    143              else if(state == WAITING_HANDLE_FLAG){
   \                     ??hci_input_14: (+1)
   \   00000148   0x....             LDR.N    R0,??DataTable1
   \   0000014A   0x7800             LDRB     R0,[R0, #+0]
   \   0000014C   0x2808             CMP      R0,#+8
   \   0000014E   0xD103             BNE.N    ??hci_input_15
    144                state = WAITING_DATA_LEN1;
   \   00000150   0x2009             MOVS     R0,#+9
   \   00000152   0x....             LDR.N    R1,??DataTable1
   \   00000154   0x7008             STRB     R0,[R1, #+0]
   \   00000156   0xE760             B.N      ??hci_input_0
    145              }
    146              else if(state == WAITING_DATA_LEN1){
   \                     ??hci_input_15: (+1)
   \   00000158   0x....             LDR.N    R0,??DataTable1
   \   0000015A   0x7800             LDRB     R0,[R0, #+0]
   \   0000015C   0x2809             CMP      R0,#+9
   \   0000015E   0xD103             BNE.N    ??hci_input_16
    147                state = WAITING_DATA_LEN2;
   \   00000160   0x200A             MOVS     R0,#+10
   \   00000162   0x....             LDR.N    R1,??DataTable1
   \   00000164   0x7008             STRB     R0,[R1, #+0]
   \   00000166   0xE758             B.N      ??hci_input_0
    148              }
    149              else if(state == WAITING_DATA_LEN2){
   \                     ??hci_input_16: (+1)
   \   00000168   0x....             LDR.N    R0,??DataTable1
   \   0000016A   0x7800             LDRB     R0,[R0, #+0]
   \   0000016C   0x280A             CMP      R0,#+10
   \   0000016E   0xD115             BNE.N    ??hci_input_17
    150                acl_hdr = (void *)&hci_buffer[1];
   \   00000170   0x....             LDR.N    R0,??DataTable1_5
   \   00000172   0x0006             MOVS     R6,R0
    151                payload_len = acl_hdr->dlen;
   \   00000174   0x8870             LDRH     R0,[R6, #+2]
   \   00000176   0x....             LDR.N    R1,??DataTable1_3
   \   00000178   0x8008             STRH     R0,[R1, #+0]
    152                collected_payload_len = 0;
   \   0000017A   0x2000             MOVS     R0,#+0
   \   0000017C   0x....             LDR.N    R1,??DataTable1_4
   \   0000017E   0x8008             STRH     R0,[R1, #+0]
    153                if(payload_len == 0){
   \   00000180   0x....             LDR.N    R0,??DataTable1_3
   \   00000182   0x8800             LDRH     R0,[R0, #+0]
   \   00000184   0x2800             CMP      R0,#+0
   \   00000186   0xD105             BNE.N    ??hci_input_18
    154                  state = WAITING_TYPE;
   \   00000188   0x2000             MOVS     R0,#+0
   \   0000018A   0x....             LDR.N    R1,??DataTable1
   \   0000018C   0x7008             STRB     R0,[R1, #+0]
    155                  packet_received();
   \   0000018E   0x.... 0x....      BL       packet_received
   \   00000192   0xE742             B.N      ??hci_input_0
    156                }
    157                else{
    158                  state = WAITING_PAYLOAD;
   \                     ??hci_input_18: (+1)
   \   00000194   0x200B             MOVS     R0,#+11
   \   00000196   0x....             LDR.N    R1,??DataTable1
   \   00000198   0x7008             STRB     R0,[R1, #+0]
   \   0000019A   0xE73E             B.N      ??hci_input_0
    159                }
    160              }
    161              /*****************************************/
    162              else if(state == WAITING_PAYLOAD){
   \                     ??hci_input_17: (+1)
   \   0000019C   0x....             LDR.N    R0,??DataTable1
   \   0000019E   0x7800             LDRB     R0,[R0, #+0]
   \   000001A0   0x280B             CMP      R0,#+11
   \   000001A2   0xF47F 0xAF3A      BNE.W    ??hci_input_0
    163                collected_payload_len += 1;
   \   000001A6   0x....             LDR.N    R0,??DataTable1_4
   \   000001A8   0x8800             LDRH     R0,[R0, #+0]
   \   000001AA   0x1C40             ADDS     R0,R0,#+1
   \   000001AC   0x....             LDR.N    R1,??DataTable1_4
   \   000001AE   0x8008             STRH     R0,[R1, #+0]
    164                if(collected_payload_len >= payload_len){
   \   000001B0   0x....             LDR.N    R0,??DataTable1_4
   \   000001B2   0x8800             LDRH     R0,[R0, #+0]
   \   000001B4   0x....             LDR.N    R1,??DataTable1_3
   \   000001B6   0x8809             LDRH     R1,[R1, #+0]
   \   000001B8   0x4288             CMP      R0,R1
   \   000001BA   0xF4FF 0xAF2E      BCC.W    ??hci_input_0
    165                  /* Reset state machine. */
    166                  state = WAITING_TYPE;                
   \   000001BE   0x2000             MOVS     R0,#+0
   \   000001C0   0x....             LDR.N    R1,??DataTable1
   \   000001C2   0x7008             STRB     R0,[R1, #+0]
    167                  packet_received();
   \   000001C4   0x.... 0x....      BL       packet_received
   \   000001C8   0xE727             B.N      ??hci_input_0
    168                }
    169              }
    170            }
    171          }
   \                     ??hci_input_1: (+1)
   \   000001CA   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .bss, align 1
   \                     `hci_input::state`:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
   \                     `hci_input::collected_payload_len`:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     `hci_input::payload_len`:
   \   00000000                      DS8 2
    172          
    173          

   \                                 In section .text, align 2, keep-with-next
    174          void packet_received(void)
    175          { 
   \                     packet_received: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    176            uint16_t buffer_out_len=0;
   \   00000004   0x2400             MOVS     R4,#+0
    177          
    178            switch(hci_buffer[HCI_TYPE_OFFSET]) {
   \   00000006   0x....             LDR.N    R0,??DataTable1_2
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x28FF             CMP      R0,#+255
   \   0000000C   0xD11D             BNE.N    ??packet_received_0
    179            case HCI_VENDOR_PKT:
    180              buffer_out_len = parse_cmd(hci_buffer, hci_pckt_len, buffer_out);
   \   0000000E   0x....             LDR.N    R2,??DataTable1_6
   \   00000010   0x....             LDR.N    R0,??DataTable1_1
   \   00000012   0x8801             LDRH     R1,[R0, #+0]
   \   00000014   0x....             LDR.N    R0,??DataTable1_2
   \   00000016   0x.... 0x....      BL       parse_cmd
   \   0000001A   0x0004             MOVS     R4,R0
    181              
    182              for(volatile uint8_t i = 0; i< buffer_out_len;i++)
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \                     ??packet_received_1: (+1)
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0x0021             MOVS     R1,R4
   \   00000028   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000002A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000002C   0x4288             CMP      R0,R1
   \   0000002E   0xD20B             BCS.N    ??packet_received_2
    183                putchar(buffer_out[i]);
   \   00000030   0x....             LDR.N    R0,??DataTable1_6
   \   00000032   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000036   0x5C40             LDRB     R0,[R0, R1]
   \   00000038   0x.... 0x....      BL       putchar
   \   0000003C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000040   0x1C40             ADDS     R0,R0,#+1
   \   00000042   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000046   0xE7EC             B.N      ??packet_received_1
    184              break;
   \                     ??packet_received_2: (+1)
   \   00000048   0xE012             B.N      ??packet_received_3
    185              
    186            default:
    187              for(uint16_t i=0;i<hci_pckt_len;i++) {
   \                     ??packet_received_0: (+1)
   \   0000004A   0x2000             MOVS     R0,#+0
   \                     ??packet_received_4: (+1)
   \   0000004C   0x0001             MOVS     R1,R0
   \   0000004E   0x....             LDR.N    R2,??DataTable1_1
   \   00000050   0x8812             LDRH     R2,[R2, #+0]
   \   00000052   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000054   0x4291             CMP      R1,R2
   \   00000056   0xD207             BCS.N    ??packet_received_5
    188                command_fifo[i] = hci_buffer[i];
   \   00000058   0x....             LDR.N    R1,??DataTable1_2
   \   0000005A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000005C   0x5C09             LDRB     R1,[R1, R0]
   \   0000005E   0x....             LDR.N    R2,??DataTable1_7
   \   00000060   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000062   0x5411             STRB     R1,[R2, R0]
    189              }
   \   00000064   0x1C40             ADDS     R0,R0,#+1
   \   00000066   0xE7F1             B.N      ??packet_received_4
    190              command_fifo_size = hci_pckt_len;
   \                     ??packet_received_5: (+1)
   \   00000068   0x....             LDR.N    R0,??DataTable1_1
   \   0000006A   0x8800             LDRH     R0,[R0, #+0]
   \   0000006C   0x....             LDR.N    R1,??DataTable1_8
   \   0000006E   0x8008             STRH     R0,[R1, #+0]
    191              break;
    192            }
    193          }
   \                     ??packet_received_3: (+1)
   \   00000070   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    194          
    195          
    196          /* Command parser
    197           * bytes
    198           * 1         Type of packet (FF for special command)
    199           * 1         cmdcode
    200           * 2         cmd length (length of arguments)
    201           * variable  payload
    202           */

   \                                 In section .text, align 2, keep-with-next
    203          uint16_t parse_cmd(uint8_t *hci_buffer, uint16_t hci_pckt_len, uint8_t *buffer_out)
    204          {
   \                     parse_cmd: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    205              uint16_t len = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    206              
    207              buffer_out[0] = HCI_VENDOR_PKT;
   \   0000000A   0x20FF             MOVS     R0,#+255
   \   0000000C   0x7030             STRB     R0,[R6, #+0]
    208              buffer_out[RESP_VENDOR_CODE_OFFSET] = RESPONSE;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x7070             STRB     R0,[R6, #+1]
    209              buffer_out[RESP_CMDCODE_OFFSET] = hci_buffer[HCI_VENDOR_CMDCODE_OFFSET];
   \   00000012   0x7860             LDRB     R0,[R4, #+1]
   \   00000014   0x7130             STRB     R0,[R6, #+4]
    210              buffer_out[RESP_STATUS_OFFSET] = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x7170             STRB     R0,[R6, #+5]
    211              
    212              switch(hci_buffer[HCI_VENDOR_CMDCODE_OFFSET]) {
   \   0000001A   0x7860             LDRB     R0,[R4, #+1]
   \   0000001C   0x2801             CMP      R0,#+1
   \   0000001E   0xD004             BEQ.N    ??parse_cmd_0
   \   00000020   0x2804             CMP      R0,#+4
   \   00000022   0xD009             BEQ.N    ??parse_cmd_1
   \   00000024   0x2805             CMP      R0,#+5
   \   00000026   0xD00A             BEQ.N    ??parse_cmd_2
   \   00000028   0xE00C             B.N      ??parse_cmd_3
    213              case READ_VERSION:
    214                buffer_out[RESP_PARAM_OFFSET] = FW_VERSION_MAJOR;
   \                     ??parse_cmd_0: (+1)
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x71B0             STRB     R0,[R6, #+6]
    215                buffer_out[RESP_PARAM_OFFSET+1] = FW_VERSION_MINOR;
   \   0000002E   0x2006             MOVS     R0,#+6
   \   00000030   0x71F0             STRB     R0,[R6, #+7]
    216                len = 2;
   \   00000032   0x2002             MOVS     R0,#+2
   \   00000034   0x0007             MOVS     R7,R0
    217                break;
   \   00000036   0xE007             B.N      ??parse_cmd_4
    218          
    219              case BLUENRG_RESET:
    220                BlueNRG_RST();
   \                     ??parse_cmd_1: (+1)
   \   00000038   0x.... 0x....      BL       BlueNRG_RST
    221                break;
   \   0000003C   0xE004             B.N      ??parse_cmd_4
    222          
    223              case HW_BOOTLOADER:
    224                BlueNRG_HW_Bootloader();
   \                     ??parse_cmd_2: (+1)
   \   0000003E   0x.... 0x....      BL       BlueNRG_HW_Bootloader
    225          //        SdkEvalSpiDtmInit(); // configure the SPI mode
    226                break;
   \   00000042   0xE001             B.N      ??parse_cmd_4
    227          
    228              default:
    229                buffer_out[RESP_STATUS_OFFSET] = UNKNOWN_COMMAND;
   \                     ??parse_cmd_3: (+1)
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x7170             STRB     R0,[R6, #+5]
    230              }
    231              
    232              len += 2; // Status and Command code
   \                     ??parse_cmd_4: (+1)
   \   00000048   0x1CBF             ADDS     R7,R7,#+2
    233              PACK_2_BYTE_PARAMETER(buffer_out+RESP_LEN_OFFSET_LSB,len);
   \   0000004A   0x70B7             STRB     R7,[R6, #+2]
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x70F0             STRB     R0,[R6, #+3]
    234              len += RESP_CMDCODE_OFFSET;     
   \   00000050   0x1D3F             ADDS     R7,R7,#+4
    235              
    236              return len;
   \   00000052   0x0038             MOVS     R0,R7
   \   00000054   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000056   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    237          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     `hci_input::state`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     hci_pckt_len

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     hci_buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     `hci_input::payload_len`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     `hci_input::collected_payload_len`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x........         DC32     hci_buffer+0x1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     buffer_out

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x........         DC32     command_fifo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x........         DC32     command_fifo_size
    238          
    239          /******************* (C) COPYRIGHT 2016 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   hci_input
        24   -> packet_received
      16   packet_received
        16   -> parse_cmd
        16   -> putchar
      24   parse_cmd
        24   -> BlueNRG_HW_Bootloader
        24   -> BlueNRG_RST


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
     512  buffer_out
       2  collected_payload_len
     512  hci_buffer
     462  hci_input
       2  hci_pckt_len
     114  packet_received
      88  parse_cmd
       2  payload_len
       1  state

 
 1 031 bytes in section .bss
   700 bytes in section .text
 
   700 bytes of CODE memory
 1 031 bytes of DATA memory

Errors: none
Warnings: none
