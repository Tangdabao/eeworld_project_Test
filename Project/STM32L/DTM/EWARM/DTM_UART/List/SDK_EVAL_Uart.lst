###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       29/Jan/2018  14:45:23
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Library\STM32L\Drivers\BSP\STM32L1xx_BlueNRG1\src\SDK_EVAL_Uart.c
#    Command line =  
#        "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Library\STM32L\Drivers\BSP\STM32L1xx_BlueNRG1\src\SDK_EVAL_Uart.c"
#        -D STM32L151xB -D STM32L1XX_XL -D USE_STM32L1XX_STEVAL_IDB00xV1 -D
#        USE_HAL_DRIVER -D HCLK_32MHZ=1 -D SYSCLK_MSI=1 -D ENABLE_USART -D
#        USER_DEFINED_PLATFORM=USER_EVAL_PLATFORM -D IRQ_RESET_PIN -D DTM_UART
#        -lC "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\List"
#        -o "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\Software\IAR_BlueNRG\arm\INC\c\DLib_Config_Normal.h -I
#        "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\HAL\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\BSP\STM32L1xx_BlueNRG1\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\BSP\STM32L1xx_Nucleo\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\CMSIS\Device\ST\STM32L1xx\Include\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\STM32L1xx_HAL_Driver\Inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\STM32L1xx_HAL_BlueNRG1_Drivers\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\SimpleBlueNRG1_HCI\includes\"
#        -On --use_c++_inline -I D:\Software\IAR_BlueNRG\arm\CMSIS\Include\
#    Locale       =  Chinese (Simplified)_China.936
#    List file    =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\List\SDK_EVAL_Uart.lst
#    Object file  =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\Obj\SDK_EVAL_Uart.o
#
###############################################################################

C:\Users\Administrator\Desktop\Temporary Files\eeworld_project\Project_Test\Library\STM32L\Drivers\BSP\STM32L1xx_BlueNRG1\src\SDK_EVAL_Uart.c
      1          /**
      2          * @file    SDK_EVAL_UART_Driver.c
      3          * @author  AMS VMA RF application team
      4          * @version V1.0.0
      5          * @date    February 28, 2017
      6          * @brief   This file provides all the low level UART API to access to BlueNRG module
      7          * @details It uses STM32L1 Cube APIs + Optimized APIs for UART Transmit, Receive, 
      8          *          Transmit & Receive (these APIs are needed for BLE communication
      9          *          throughput) 
     10          *
     11          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13          * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14          * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15          * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16          * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17          *
     18          * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     19          * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     20          * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     21          *
     22          * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     23          *
     24          */
     25          
     26          /* Includes ------------------------------------------------------------------*/
     27          #include "SDK_EVAL_Config.h"
     28          
     29          /** @addtogroup SDK_EVAL_UART_STM32L
     30          * @{
     31          */
     32          
     33          /** @addtogroup SDK_EVAL_Uart                    SDK EVAL Uart
     34          * @brief SPI functions implementation.
     35          * @details This file implements the BlueNRG Library UART interface functions. 
     36          * @{
     37          */
     38          
     39          /** @defgroup STM32_BLUENRG_BLE_Private_Defines 
     40          * @{
     41          */ 
     42          
     43          
     44          /**
     45          * @}
     46          */
     47          
     48          /** @defgroup UART_Private_Variables
     49          * @{
     50          */

   \                                 In section .bss, align 4
     51          UART_HandleTypeDef DTM_UartHandle;
   \                     DTM_UartHandle:
   \   00000000                      DS8 64

   \                                 In section .bss, align 4
     52          uint8_t DTM_read_data[250];
   \                     DTM_read_data:
   \   00000000                      DS8 252
     53          
     54          /**
     55          * @}
     56          */
     57          
     58          /** @defgroup UART_Functions
     59          * @{
     60          */
     61          
     62          
     63          /**
     64           * @brief  Configure the selected I/O communication channel
     65           * @param  None.
     66           * @retval None.
     67           */

   \                                 In section .text, align 2, keep-with-next
     68          void DTM_IO_Config(void)
     69          {  
   \                     DTM_IO_Config: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     70            /* Init USART2 port */
     71            DTM_USART_CLK_ENABLE();   
   \   00000002   0x....             LDR.N    R0,??DataTable5  ;; 0x40023820
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x4080      ORRS     R0,R0,#0x4000
   \   0000000A   0x....             LDR.N    R1,??DataTable5  ;; 0x40023820
   \   0000000C   0x6008             STR      R0,[R1, #+0]
   \   0000000E   0x....             LDR.N    R0,??DataTable5  ;; 0x40023820
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF410 0x4080      ANDS     R0,R0,#0x4000
   \   00000016   0x9000             STR      R0,[SP, #+0]
   \   00000018   0x9800             LDR      R0,[SP, #+0]
     72            DTM_UartHandle.Instance        = DTM_USART;
   \   0000001A   0x....             LDR.N    R0,??DataTable5_1  ;; 0x40013800
   \   0000001C   0x....             LDR.N    R1,??DataTable5_2
   \   0000001E   0x6008             STR      R0,[R1, #+0]
     73            DTM_UartHandle.Init.BaudRate   = 115200;
   \   00000020   0xF45F 0x30E1      MOVS     R0,#+115200
   \   00000024   0x....             LDR.N    R1,??DataTable5_2
   \   00000026   0x6048             STR      R0,[R1, #+4]
     74            DTM_UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x....             LDR.N    R1,??DataTable5_2
   \   0000002C   0x6088             STR      R0,[R1, #+8]
     75            DTM_UartHandle.Init.StopBits   = UART_STOPBITS_1;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x....             LDR.N    R1,??DataTable5_2
   \   00000032   0x60C8             STR      R0,[R1, #+12]
     76            DTM_UartHandle.Init.Parity     = UART_PARITY_NONE;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x....             LDR.N    R1,??DataTable5_2
   \   00000038   0x6108             STR      R0,[R1, #+16]
     77            DTM_UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_RTS_CTS;
   \   0000003A   0xF44F 0x7040      MOV      R0,#+768
   \   0000003E   0x....             LDR.N    R1,??DataTable5_2
   \   00000040   0x6188             STR      R0,[R1, #+24]
     78            DTM_UartHandle.Init.Mode       = UART_MODE_TX_RX;
   \   00000042   0x200C             MOVS     R0,#+12
   \   00000044   0x....             LDR.N    R1,??DataTable5_2
   \   00000046   0x6148             STR      R0,[R1, #+20]
     79            if(HAL_UART_DeInit(&DTM_UartHandle) != HAL_OK) {
   \   00000048   0x....             LDR.N    R0,??DataTable5_2
   \   0000004A   0x.... 0x....      BL       HAL_UART_DeInit
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD000             BEQ.N    ??DTM_IO_Config_0
     80              while(1);
   \                     ??DTM_IO_Config_1: (+1)
   \   00000052   0xE7FE             B.N      ??DTM_IO_Config_1
     81            }  
     82          
     83            /* Small delay to avoid issue during reset of the BlueNRG-1 
     84             * because the UART lines during reset can generates UART Error */
     85            for(volatile uint32_t i=0; i<0xFFFFF; i++);
   \                     ??DTM_IO_Config_0: (+1)
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x9000             STR      R0,[SP, #+0]
   \                     ??DTM_IO_Config_2: (+1)
   \   00000058   0x9800             LDR      R0,[SP, #+0]
   \   0000005A   0x....             LDR.N    R1,??DataTable5_3  ;; 0xfffff
   \   0000005C   0x4288             CMP      R0,R1
   \   0000005E   0xD203             BCS.N    ??DTM_IO_Config_3
   \   00000060   0x9800             LDR      R0,[SP, #+0]
   \   00000062   0x1C40             ADDS     R0,R0,#+1
   \   00000064   0x9000             STR      R0,[SP, #+0]
   \   00000066   0xE7F7             B.N      ??DTM_IO_Config_2
     86            if(HAL_UART_Init(&DTM_UartHandle) != HAL_OK) {
   \                     ??DTM_IO_Config_3: (+1)
   \   00000068   0x....             LDR.N    R0,??DataTable5_2
   \   0000006A   0x.... 0x....      BL       HAL_UART_Init
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD000             BEQ.N    ??DTM_IO_Config_4
     87              while(1);
   \                     ??DTM_IO_Config_5: (+1)
   \   00000072   0xE7FE             B.N      ??DTM_IO_Config_5
     88            }
     89            
     90            /* Prepare for next reception - this can be handle as header frame as SPI protocol... */
     91            HAL_UART_Receive_IT(&DTM_UartHandle, DTM_read_data, 1);
   \                     ??DTM_IO_Config_4: (+1)
   \   00000074   0x2201             MOVS     R2,#+1
   \   00000076   0x....             LDR.N    R1,??DataTable5_4
   \   00000078   0x....             LDR.N    R0,??DataTable5_2
   \   0000007A   0x.... 0x....      BL       HAL_UART_Receive_IT
     92            
     93            /* Configure the RTS pin as OUTPUT high level */
     94            DTM_UART_RTS_OUTPUT_HIGH();
   \   0000007E   0x2201             MOVS     R2,#+1
   \   00000080   0xF44F 0x5180      MOV      R1,#+4096
   \   00000084   0x....             LDR.N    R0,??DataTable5_5  ;; 0x40020000
   \   00000086   0x.... 0x....      BL       HAL_GPIO_WritePin
     95            DTM_Config_GPIO_Output_RTS();
   \   0000008A   0x.... 0x....      BL       DTM_Config_GPIO_Output_RTS
     96            
     97            /* Configure the CTS as INPUT IRQ */
     98            DTM_Config_GPIO_InputIrq_CTS();
   \   0000008E   0x.... 0x....      BL       DTM_Config_GPIO_InputIrq_CTS
     99            
    100          }/* end SdkEval_IO_Config() */
   \   00000092   0xBD01             POP      {R0,PC}          ;; return
    101          
    102          
    103          /**
    104            * @brief UART MSP De-Initialization 
    105            *        This function frees the hardware resources used in this example:
    106            *          - Disable the Peripheral's clock
    107            *          - Revert GPIO configuration to their default state
    108            * @param huart: UART handle pointer
    109            * @retval None
    110            */

   \                                 In section .text, align 2, keep-with-next
    111          void DTM_Config_GPIO_Output_RTS(void)
    112          {
   \                     DTM_Config_GPIO_Output_RTS: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    113            GPIO_InitTypeDef  GPIO_InitStruct;
    114            
    115            GPIO_InitStruct.Pin       = DTM_USART_RTS_PIN;
   \   00000004   0xF44F 0x5080      MOV      R0,#+4096
   \   00000008   0x9000             STR      R0,[SP, #+0]
    116            GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x9001             STR      R0,[SP, #+4]
    117            GPIO_InitStruct.Pull      = GPIO_PULLUP;      //GPIO_PULLDOWN; GPIO_PULLUP;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x9002             STR      R0,[SP, #+8]
    118            GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
   \   00000012   0x2003             MOVS     R0,#+3
   \   00000014   0x9003             STR      R0,[SP, #+12]
    119            GPIO_InitStruct.Alternate = DTM_USART_TX_AF;  
   \   00000016   0x2007             MOVS     R0,#+7
   \   00000018   0x9004             STR      R0,[SP, #+16]
    120            HAL_GPIO_Init(DTM_USART_RTS_GPIO_PORT, &GPIO_InitStruct);
   \   0000001A   0x4669             MOV      R1,SP
   \   0000001C   0x....             LDR.N    R0,??DataTable5_5  ;; 0x40020000
   \   0000001E   0x.... 0x....      BL       HAL_GPIO_Init
    121            
    122          }
   \   00000022   0xB005             ADD      SP,SP,#+20
   \   00000024   0xBD00             POP      {PC}             ;; return
    123          
    124          
    125          

   \                                 In section .text, align 2, keep-with-next
    126          void DTM_Config_UART_RTS(void)
    127          {
   \                     DTM_Config_UART_RTS: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    128            GPIO_InitTypeDef  GPIO_InitStruct;  
    129            
    130            GPIO_InitStruct.Pin       = DTM_USART_RTS_PIN;
   \   00000004   0xF44F 0x5080      MOV      R0,#+4096
   \   00000008   0x9000             STR      R0,[SP, #+0]
    131            GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x9001             STR      R0,[SP, #+4]
    132            GPIO_InitStruct.Pull      = GPIO_PULLUP;      //GPIO_PULLDOWN; GPIO_PULLUP;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x9002             STR      R0,[SP, #+8]
    133            GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
   \   00000012   0x2003             MOVS     R0,#+3
   \   00000014   0x9003             STR      R0,[SP, #+12]
    134            GPIO_InitStruct.Alternate = DTM_USART_TX_AF;
   \   00000016   0x2007             MOVS     R0,#+7
   \   00000018   0x9004             STR      R0,[SP, #+16]
    135            
    136            HAL_GPIO_Init(DTM_USART_RTS_GPIO_PORT, &GPIO_InitStruct);
   \   0000001A   0x4669             MOV      R1,SP
   \   0000001C   0x....             LDR.N    R0,??DataTable5_5  ;; 0x40020000
   \   0000001E   0x.... 0x....      BL       HAL_GPIO_Init
    137            
    138          }
   \   00000022   0xB005             ADD      SP,SP,#+20
   \   00000024   0xBD00             POP      {PC}             ;; return
    139          
    140          
    141          /**
    142            * @brief UART MSP De-Initialization 
    143            *        This function frees the hardware resources used in this example:
    144            *          - Disable the Peripheral's clock
    145            *          - Revert GPIO configuration to their default state
    146            * @param huart: UART handle pointer
    147            * @retval None
    148            */

   \                                 In section .text, align 2, keep-with-next
    149          void DTM_Config_GPIO_InputIrq_CTS(void)
    150          {
   \                     DTM_Config_GPIO_InputIrq_CTS: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    151            GPIO_InitTypeDef  GPIO_InitStruct;
    152            
    153            GPIO_InitStruct.Pin       = DTM_USART_CTS_PIN;
   \   00000004   0xF44F 0x6000      MOV      R0,#+2048
   \   00000008   0x9000             STR      R0,[SP, #+0]
    154            GPIO_InitStruct.Mode      = GPIO_MODE_IT_RISING_FALLING;
   \   0000000A   0x....             LDR.N    R0,??DataTable5_6  ;; 0x10310000
   \   0000000C   0x9001             STR      R0,[SP, #+4]
    155            GPIO_InitStruct.Pull      = GPIO_PULLUP;      //GPIO_PULLDOWN; GPIO_PULLUP;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x9002             STR      R0,[SP, #+8]
    156            GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
   \   00000012   0x2003             MOVS     R0,#+3
   \   00000014   0x9003             STR      R0,[SP, #+12]
    157            GPIO_InitStruct.Alternate = DTM_USART_TX_AF;  
   \   00000016   0x2007             MOVS     R0,#+7
   \   00000018   0x9004             STR      R0,[SP, #+16]
    158            HAL_GPIO_Init(DTM_USART_CTS_GPIO_PORT, &GPIO_InitStruct);
   \   0000001A   0x4669             MOV      R1,SP
   \   0000001C   0x....             LDR.N    R0,??DataTable5_5  ;; 0x40020000
   \   0000001E   0x.... 0x....      BL       HAL_GPIO_Init
    159            
    160            HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
   \   00000022   0x2200             MOVS     R2,#+0
   \   00000024   0x2103             MOVS     R1,#+3
   \   00000026   0x2028             MOVS     R0,#+40
   \   00000028   0x.... 0x....      BL       HAL_NVIC_SetPriority
    161            HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
   \   0000002C   0x2028             MOVS     R0,#+40
   \   0000002E   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    162          }
   \   00000032   0xB005             ADD      SP,SP,#+20
   \   00000034   0xBD00             POP      {PC}             ;; return
    163          
    164          

   \                                 In section .text, align 2, keep-with-next
    165          void DTM_Config_UART_CTS(void)
    166          {
   \                     DTM_Config_UART_CTS: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    167            GPIO_InitTypeDef  GPIO_InitStruct;
    168            
    169            HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
   \   00000004   0x2028             MOVS     R0,#+40
   \   00000006   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
    170                
    171            GPIO_InitStruct.Pin       = DTM_USART_CTS_PIN;
   \   0000000A   0xF44F 0x6000      MOV      R0,#+2048
   \   0000000E   0x9000             STR      R0,[SP, #+0]
    172            GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0x9001             STR      R0,[SP, #+4]
    173            GPIO_InitStruct.Pull      = GPIO_PULLUP;      //GPIO_PULLDOWN; GPIO_PULLUP;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x9002             STR      R0,[SP, #+8]
    174            GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
   \   00000018   0x2003             MOVS     R0,#+3
   \   0000001A   0x9003             STR      R0,[SP, #+12]
    175            GPIO_InitStruct.Alternate = DTM_USART_TX_AF;  
   \   0000001C   0x2007             MOVS     R0,#+7
   \   0000001E   0x9004             STR      R0,[SP, #+16]
    176            HAL_GPIO_Init(DTM_USART_CTS_GPIO_PORT, &GPIO_InitStruct);
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x....             LDR.N    R0,??DataTable5_5  ;; 0x40020000
   \   00000024   0x.... 0x....      BL       HAL_GPIO_Init
    177          
    178          }
   \   00000028   0xB005             ADD      SP,SP,#+20
   \   0000002A   0xBD00             POP      {PC}             ;; return
    179          
    180          

   \                                 In section .text, align 2, keep-with-next
    181          void DTM_UART_CTS_Input(void)
    182          {
   \                     DTM_UART_CTS_Input: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    183            GPIO_InitTypeDef  GPIO_InitStruct;
    184            
    185            HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
   \   00000004   0x2028             MOVS     R0,#+40
   \   00000006   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
    186            
    187            GPIO_InitStruct.Pin       = DTM_USART_CTS_PIN;
   \   0000000A   0xF44F 0x6000      MOV      R0,#+2048
   \   0000000E   0x9000             STR      R0,[SP, #+0]
    188            GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x9001             STR      R0,[SP, #+4]
    189            GPIO_InitStruct.Pull      = GPIO_PULLUP;      //GPIO_PULLDOWN; GPIO_PULLUP;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x9002             STR      R0,[SP, #+8]
    190            GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
   \   00000018   0x2003             MOVS     R0,#+3
   \   0000001A   0x9003             STR      R0,[SP, #+12]
    191            GPIO_InitStruct.Alternate = DTM_USART_TX_AF;  
   \   0000001C   0x2007             MOVS     R0,#+7
   \   0000001E   0x9004             STR      R0,[SP, #+16]
    192            HAL_GPIO_Init(DTM_USART_CTS_GPIO_PORT, &GPIO_InitStruct);
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x....             LDR.N    R0,??DataTable5_5  ;; 0x40020000
   \   00000024   0x.... 0x....      BL       HAL_GPIO_Init
    193          }
   \   00000028   0xB005             ADD      SP,SP,#+20
   \   0000002A   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x40023820         DC32     0x40023820

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x40013800         DC32     0x40013800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     DTM_UartHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x000FFFFF         DC32     0xfffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     DTM_read_data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x10310000         DC32     0x10310000
    194          
    195          /**
    196          * @}
    197          */
    198          
    199          
    200          /**
    201          * @}
    202          */
    203          
    204          
    205          /**
    206          * @}
    207          */
    208          
    209          
    210          
    211          /******************* (C) COPYRIGHT 2014 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   DTM_Config_GPIO_InputIrq_CTS
        24   -> HAL_GPIO_Init
        24   -> HAL_NVIC_EnableIRQ
        24   -> HAL_NVIC_SetPriority
      24   DTM_Config_GPIO_Output_RTS
        24   -> HAL_GPIO_Init
      24   DTM_Config_UART_CTS
        24   -> HAL_GPIO_Init
        24   -> HAL_NVIC_DisableIRQ
      24   DTM_Config_UART_RTS
        24   -> HAL_GPIO_Init
       8   DTM_IO_Config
         8   -> DTM_Config_GPIO_InputIrq_CTS
         8   -> DTM_Config_GPIO_Output_RTS
         8   -> HAL_GPIO_WritePin
         8   -> HAL_UART_DeInit
         8   -> HAL_UART_Init
         8   -> HAL_UART_Receive_IT
      24   DTM_UART_CTS_Input
        24   -> HAL_GPIO_Init
        24   -> HAL_NVIC_DisableIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
      54  DTM_Config_GPIO_InputIrq_CTS
      38  DTM_Config_GPIO_Output_RTS
      44  DTM_Config_UART_CTS
      38  DTM_Config_UART_RTS
     148  DTM_IO_Config
      44  DTM_UART_CTS_Input
      64  DTM_UartHandle
     252  DTM_read_data

 
 316 bytes in section .bss
 394 bytes in section .text
 
 394 bytes of CODE memory
 316 bytes of DATA memory

Errors: none
Warnings: none
