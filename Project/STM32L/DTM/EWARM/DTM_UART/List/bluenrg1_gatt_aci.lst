###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       29/Jan/2018  14:45:19
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\SimpleBlueNRG1_HCI\hci\controller\bluenrg1_gatt_aci.c
#    Command line =  
#        "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\SimpleBlueNRG1_HCI\hci\controller\bluenrg1_gatt_aci.c"
#        -D STM32L151xB -D STM32L1XX_XL -D USE_STM32L1XX_STEVAL_IDB00xV1 -D
#        USE_HAL_DRIVER -D HCLK_32MHZ=1 -D SYSCLK_MSI=1 -D ENABLE_USART -D
#        USER_DEFINED_PLATFORM=USER_EVAL_PLATFORM -D IRQ_RESET_PIN -D DTM_UART
#        -lC "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\List"
#        -o "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\Obj"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        D:\Software\IAR_BlueNRG\arm\INC\c\DLib_Config_Normal.h -I
#        "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\HAL\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\BSP\STM32L1xx_BlueNRG1\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\BSP\STM32L1xx_Nucleo\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\CMSIS\Device\ST\STM32L1xx\Include\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Drivers\STM32L1xx_HAL_Driver\Inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\STM32L1xx_HAL_BlueNRG1_Drivers\inc\"
#        -I "C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\..\..\..\..\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\SimpleBlueNRG1_HCI\includes\"
#        -On --use_c++_inline -I D:\Software\IAR_BlueNRG\arm\CMSIS\Include\
#    Locale       =  Chinese (Simplified)_China.936
#    List file    =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\List\bluenrg1_gatt_aci.lst
#    Object file  =  
#        C:\Users\Administrator\Desktop\Temporary
#        Files\eeworld_project\Project_Test\Project\STM32L\DTM\EWARM\DTM_UART\Obj\bluenrg1_gatt_aci.o
#
###############################################################################

C:\Users\Administrator\Desktop\Temporary Files\eeworld_project\Project_Test\Library\STM32L\Middlewares\ST\STM32_BlueNRG1\SimpleBlueNRG1_HCI\hci\controller\bluenrg1_gatt_aci.c
      1          
      2          
      3          /**
      4            ******************************************************************************
      5            * @file    bluenrg1_gatt_aci.c
      6            * @author  AMG - RF Application team
      7            * @version V1.0.0
      8            * @date    22 June 2017
      9            * @brief   Source file for external uC - BlueNRG-x in network coprocessor mode (gatt_aci)
     10            *          Autogenerated files, do not edit!!
     11            ******************************************************************************
     12            * @attention
     13            *
     14            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     15            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     16            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     17            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     18            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     19            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     20            *
     21            * <h2><center>&copy; COPYRIGHT STMicroelectronics</center></h2>
     22            ******************************************************************************
     23            */
     24          #include "bluenrg1_gatt_aci.h"
     25          #include "osal.h"

   \                                 In section .text, align 2, keep-with-next
     26          tBleStatus aci_gatt_init(void)
     27          {
   \                     aci_gatt_init: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     28            struct hci_request rq;
     29            tBleStatus status = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
     30            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000000A   0x2218             MOVS     R2,#+24
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0xA801             ADD      R0,SP,#+4
   \   00000010   0x.... 0x....      BL       Osal_MemSet
     31            rq.ogf = 0x3f;
   \   00000014   0x203F             MOVS     R0,#+63
   \   00000016   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     32            rq.ocf = 0x101;
   \   0000001A   0xF240 0x1001      MOVW     R0,#+257
   \   0000001E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     33            rq.rparam = &status;
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x9005             STR      R0,[SP, #+20]
     34            rq.rlen = 1;
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x9006             STR      R0,[SP, #+24]
     35            if (hci_send_req(&rq, FALSE) < 0)
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0xA801             ADD      R0,SP,#+4
   \   0000002E   0x.... 0x....      BL       hci_send_req
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD501             BPL.N    ??aci_gatt_init_0
     36              return BLE_STATUS_TIMEOUT;
   \   00000036   0x20FF             MOVS     R0,#+255
   \   00000038   0xE007             B.N      ??aci_gatt_init_1
     37            if (status) {
   \                     ??aci_gatt_init_0: (+1)
   \   0000003A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD002             BEQ.N    ??aci_gatt_init_2
     38              return status;
   \   00000042   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000046   0xE000             B.N      ??aci_gatt_init_1
     39            }
     40            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_init_2: (+1)
   \   00000048   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_init_1: (+1)
   \   0000004A   0xB007             ADD      SP,SP,#+28
   \   0000004C   0xBD00             POP      {PC}             ;; return
     41          }

   \                                 In section .text, align 2, keep-with-next
     42          tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
     43                                          Service_UUID_t *Service_UUID,
     44                                          uint8_t Service_Type,
     45                                          uint8_t Max_Attribute_Records,
     46                                          uint16_t *Service_Handle)
     47          {
   \                     aci_gatt_add_service: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB0C9             SUB      SP,SP,#+292
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   \   0000000E   0xF8DD 0x8148      LDR      R8,[SP, #+328]
     48            struct hci_request rq;
     49            uint8_t cmd_buffer[258];
     50            aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
   \   00000012   0xF10D 0x0920      ADD      R9,SP,#+32
     51            aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C01             CMP      R4,#+1
   \   0000001A   0xD101             BNE.N    ??aci_gatt_add_service_0
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0xE005             B.N      ??aci_gatt_add_service_1
   \                     ??aci_gatt_add_service_0: (+1)
   \   00000020   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000022   0x2C02             CMP      R4,#+2
   \   00000024   0xD101             BNE.N    ??aci_gatt_add_service_2
   \   00000026   0x2010             MOVS     R0,#+16
   \   00000028   0xE000             B.N      ??aci_gatt_add_service_1
   \                     ??aci_gatt_add_service_2: (+1)
   \   0000002A   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_add_service_1: (+1)
   \   0000002C   0xA908             ADD      R1,SP,#+32
   \   0000002E   0x4408             ADD      R0,R1,R0
   \   00000030   0x1C40             ADDS     R0,R0,#+1
   \   00000032   0x9001             STR      R0,[SP, #+4]
     52            aci_gatt_add_service_rp0 resp;
     53            Osal_MemSet(&resp, 0, sizeof(resp));
   \   00000034   0x2203             MOVS     R2,#+3
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x4668             MOV      R0,SP
   \   0000003A   0x.... 0x....      BL       Osal_MemSet
     54            uint8_t index_input = 0;
   \   0000003E   0xF05F 0x0B00      MOVS     R11,#+0
     55            cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
   \   00000042   0xF889 0x4000      STRB     R4,[R9, #+0]
     56            index_input += 1;
   \   00000046   0xF11B 0x0B01      ADDS     R11,R11,#+1
     57            /* var_len_data input */
     58            {
     59              uint8_t size;
     60              switch (Service_UUID_Type) {
   \   0000004A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0x2801             CMP      R0,#+1
   \   00000050   0xD002             BEQ.N    ??aci_gatt_add_service_3
   \   00000052   0x2802             CMP      R0,#+2
   \   00000054   0xD003             BEQ.N    ??aci_gatt_add_service_4
   \   00000056   0xE005             B.N      ??aci_gatt_add_service_5
     61                case 1: size = 2; break;
   \                     ??aci_gatt_add_service_3: (+1)
   \   00000058   0x2002             MOVS     R0,#+2
   \   0000005A   0x4682             MOV      R10,R0
   \   0000005C   0xE004             B.N      ??aci_gatt_add_service_6
     62                case 2: size = 16; break;
   \                     ??aci_gatt_add_service_4: (+1)
   \   0000005E   0x2010             MOVS     R0,#+16
   \   00000060   0x4682             MOV      R10,R0
   \   00000062   0xE001             B.N      ??aci_gatt_add_service_6
     63                default: return BLE_STATUS_ERROR;
   \                     ??aci_gatt_add_service_5: (+1)
   \   00000064   0x2047             MOVS     R0,#+71
   \   00000066   0xE03B             B.N      ??aci_gatt_add_service_7
     64              }
     65              Osal_MemCpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
   \                     ??aci_gatt_add_service_6: (+1)
   \   00000068   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   0000006C   0x4652             MOV      R2,R10
   \   0000006E   0x0029             MOVS     R1,R5
   \   00000070   0xF119 0x0001      ADDS     R0,R9,#+1
   \   00000074   0x.... 0x....      BL       Osal_MemCpy
     66              index_input += size;
   \   00000078   0xEB1A 0x0B0B      ADDS     R11,R10,R11
     67              {
     68                cp1->Service_Type = htob(Service_Type, 1);
   \   0000007C   0x9801             LDR      R0,[SP, #+4]
   \   0000007E   0x7006             STRB     R6,[R0, #+0]
     69              }
     70              index_input += 1;
   \   00000080   0xF11B 0x0B01      ADDS     R11,R11,#+1
     71              {
     72                cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
   \   00000084   0x9801             LDR      R0,[SP, #+4]
   \   00000086   0x7047             STRB     R7,[R0, #+1]
     73              }
     74              index_input += 1;
   \   00000088   0xF11B 0x0B01      ADDS     R11,R11,#+1
     75            }
     76            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000008C   0x2218             MOVS     R2,#+24
   \   0000008E   0x2100             MOVS     R1,#+0
   \   00000090   0xA802             ADD      R0,SP,#+8
   \   00000092   0x.... 0x....      BL       Osal_MemSet
     77            rq.ogf = 0x3f;
   \   00000096   0x203F             MOVS     R0,#+63
   \   00000098   0xF8AD 0x0008      STRH     R0,[SP, #+8]
     78            rq.ocf = 0x102;
   \   0000009C   0xF44F 0x7081      MOV      R0,#+258
   \   000000A0   0xF8AD 0x000A      STRH     R0,[SP, #+10]
     79            rq.cparam = cmd_buffer;
   \   000000A4   0xA808             ADD      R0,SP,#+32
   \   000000A6   0x9004             STR      R0,[SP, #+16]
     80            rq.clen = index_input;
   \   000000A8   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000000AC   0xF8CD 0xB014      STR      R11,[SP, #+20]
     81            rq.rparam = &resp;
   \   000000B0   0x4668             MOV      R0,SP
   \   000000B2   0x9006             STR      R0,[SP, #+24]
     82            rq.rlen = sizeof(resp);
   \   000000B4   0x2003             MOVS     R0,#+3
   \   000000B6   0x9007             STR      R0,[SP, #+28]
     83            if (hci_send_req(&rq, FALSE) < 0)
   \   000000B8   0x2100             MOVS     R1,#+0
   \   000000BA   0xA802             ADD      R0,SP,#+8
   \   000000BC   0x.... 0x....      BL       hci_send_req
   \   000000C0   0x2800             CMP      R0,#+0
   \   000000C2   0xD501             BPL.N    ??aci_gatt_add_service_8
     84              return BLE_STATUS_TIMEOUT;
   \   000000C4   0x20FF             MOVS     R0,#+255
   \   000000C6   0xE00B             B.N      ??aci_gatt_add_service_7
     85            if (resp.Status) {
   \                     ??aci_gatt_add_service_8: (+1)
   \   000000C8   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000CC   0x2800             CMP      R0,#+0
   \   000000CE   0xD002             BEQ.N    ??aci_gatt_add_service_9
     86              return resp.Status;
   \   000000D0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000D4   0xE004             B.N      ??aci_gatt_add_service_7
     87            }
     88            *Service_Handle = btoh(resp.Service_Handle, 2);
   \                     ??aci_gatt_add_service_9: (+1)
   \   000000D6   0xF8BD 0x0001      LDRH     R0,[SP, #+1]
   \   000000DA   0xF8A8 0x0000      STRH     R0,[R8, #+0]
     89            return BLE_STATUS_SUCCESS;
   \   000000DE   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_add_service_7: (+1)
   \   000000E0   0xB049             ADD      SP,SP,#+292
   \   000000E2   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
     90          }

   \                                 In section .text, align 2, keep-with-next
     91          tBleStatus aci_gatt_include_service(uint16_t Service_Handle,
     92                                              uint16_t Include_Start_Handle,
     93                                              uint16_t Include_End_Handle,
     94                                              uint8_t Include_UUID_Type,
     95                                              Include_UUID_t *Include_UUID,
     96                                              uint16_t *Include_Handle)
     97          {
   \                     aci_gatt_include_service: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB0C9             SUB      SP,SP,#+292
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   \   0000000E   0xF8DD 0x8148      LDR      R8,[SP, #+328]
   \   00000012   0xF8DD 0x914C      LDR      R9,[SP, #+332]
     98            struct hci_request rq;
     99            uint8_t cmd_buffer[258];
    100            aci_gatt_include_service_cp0 *cp0 = (aci_gatt_include_service_cp0*)(cmd_buffer);
   \   00000016   0xF10D 0x0A1C      ADD      R10,SP,#+28
    101            aci_gatt_include_service_rp0 resp;
    102            Osal_MemSet(&resp, 0, sizeof(resp));
   \   0000001A   0x2203             MOVS     R2,#+3
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0x.... 0x....      BL       Osal_MemSet
    103            uint8_t index_input = 0;
   \   00000024   0xF05F 0x0B00      MOVS     R11,#+0
    104            cp0->Service_Handle = htob(Service_Handle, 2);
   \   00000028   0xF8AA 0x4000      STRH     R4,[R10, #+0]
    105            index_input += 2;
   \   0000002C   0xF11B 0x0B02      ADDS     R11,R11,#+2
    106            cp0->Include_Start_Handle = htob(Include_Start_Handle, 2);
   \   00000030   0xF8AA 0x5002      STRH     R5,[R10, #+2]
    107            index_input += 2;
   \   00000034   0xF11B 0x0B02      ADDS     R11,R11,#+2
    108            cp0->Include_End_Handle = htob(Include_End_Handle, 2);
   \   00000038   0xF8AA 0x6004      STRH     R6,[R10, #+4]
    109            index_input += 2;
   \   0000003C   0xF11B 0x0B02      ADDS     R11,R11,#+2
    110            cp0->Include_UUID_Type = htob(Include_UUID_Type, 1);
   \   00000040   0xF88A 0x7006      STRB     R7,[R10, #+6]
    111            index_input += 1;
   \   00000044   0xF11B 0x0B01      ADDS     R11,R11,#+1
    112            Osal_MemCpy((void *) &cp0->Include_UUID, (const void *) Include_UUID, Include_UUID_Type);
   \   00000048   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000004A   0x003A             MOVS     R2,R7
   \   0000004C   0x4641             MOV      R1,R8
   \   0000004E   0xF11A 0x0007      ADDS     R0,R10,#+7
   \   00000052   0x.... 0x....      BL       Osal_MemCpy
    113            index_input += 16;
   \   00000056   0xF11B 0x0B10      ADDS     R11,R11,#+16
    114            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000005A   0x2218             MOVS     R2,#+24
   \   0000005C   0x2100             MOVS     R1,#+0
   \   0000005E   0xA801             ADD      R0,SP,#+4
   \   00000060   0x.... 0x....      BL       Osal_MemSet
    115            rq.ogf = 0x3f;
   \   00000064   0x203F             MOVS     R0,#+63
   \   00000066   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    116            rq.ocf = 0x103;
   \   0000006A   0xF240 0x1003      MOVW     R0,#+259
   \   0000006E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    117            rq.cparam = cmd_buffer;
   \   00000072   0xA807             ADD      R0,SP,#+28
   \   00000074   0x9003             STR      R0,[SP, #+12]
    118            rq.clen = index_input;
   \   00000076   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000007A   0xF8CD 0xB010      STR      R11,[SP, #+16]
    119            rq.rparam = &resp;
   \   0000007E   0x4668             MOV      R0,SP
   \   00000080   0x9005             STR      R0,[SP, #+20]
    120            rq.rlen = sizeof(resp);
   \   00000082   0x2003             MOVS     R0,#+3
   \   00000084   0x9006             STR      R0,[SP, #+24]
    121            if (hci_send_req(&rq, FALSE) < 0)
   \   00000086   0x2100             MOVS     R1,#+0
   \   00000088   0xA801             ADD      R0,SP,#+4
   \   0000008A   0x.... 0x....      BL       hci_send_req
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD501             BPL.N    ??aci_gatt_include_service_0
    122              return BLE_STATUS_TIMEOUT;
   \   00000092   0x20FF             MOVS     R0,#+255
   \   00000094   0xE00B             B.N      ??aci_gatt_include_service_1
    123            if (resp.Status) {
   \                     ??aci_gatt_include_service_0: (+1)
   \   00000096   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD002             BEQ.N    ??aci_gatt_include_service_2
    124              return resp.Status;
   \   0000009E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000A2   0xE004             B.N      ??aci_gatt_include_service_1
    125            }
    126            *Include_Handle = btoh(resp.Include_Handle, 2);
   \                     ??aci_gatt_include_service_2: (+1)
   \   000000A4   0xF8BD 0x0001      LDRH     R0,[SP, #+1]
   \   000000A8   0xF8A9 0x0000      STRH     R0,[R9, #+0]
    127            return BLE_STATUS_SUCCESS;
   \   000000AC   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_include_service_1: (+1)
   \   000000AE   0xB049             ADD      SP,SP,#+292
   \   000000B0   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    128          }

   \                                 In section .text, align 2, keep-with-next
    129          tBleStatus aci_gatt_add_char(uint16_t Service_Handle,
    130                                       uint8_t Char_UUID_Type,
    131                                       Char_UUID_t *Char_UUID,
    132                                       uint16_t Char_Value_Length,
    133                                       uint8_t Char_Properties,
    134                                       uint8_t Security_Permissions,
    135                                       uint8_t GATT_Evt_Mask,
    136                                       uint8_t Enc_Key_Size,
    137                                       uint8_t Is_Variable,
    138                                       uint16_t *Char_Handle)
    139          {
   \                     aci_gatt_add_char: (+1)
   \   00000000   0xE92D 0x4FFD      PUSH     {R0,R2-R11,LR}
   \   00000004   0xB0CA             SUB      SP,SP,#+296
   \   00000006   0x000F             MOVS     R7,R1
   \   00000008   0x9C58             LDR      R4,[SP, #+352]
   \   0000000A   0x9D59             LDR      R5,[SP, #+356]
   \   0000000C   0x9E5A             LDR      R6,[SP, #+360]
   \   0000000E   0xF8DD 0x816C      LDR      R8,[SP, #+364]
    140            struct hci_request rq;
    141            uint8_t cmd_buffer[258];
    142            aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
   \   00000012   0xF10D 0x0920      ADD      R9,SP,#+32
    143            aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
   \   00000016   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000018   0x2F01             CMP      R7,#+1
   \   0000001A   0xD101             BNE.N    ??aci_gatt_add_char_0
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0xE005             B.N      ??aci_gatt_add_char_1
   \                     ??aci_gatt_add_char_0: (+1)
   \   00000020   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000022   0x2F02             CMP      R7,#+2
   \   00000024   0xD101             BNE.N    ??aci_gatt_add_char_2
   \   00000026   0x2010             MOVS     R0,#+16
   \   00000028   0xE000             B.N      ??aci_gatt_add_char_1
   \                     ??aci_gatt_add_char_2: (+1)
   \   0000002A   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_add_char_1: (+1)
   \   0000002C   0xA908             ADD      R1,SP,#+32
   \   0000002E   0x4408             ADD      R0,R1,R0
   \   00000030   0xF110 0x0A03      ADDS     R10,R0,#+3
    144            aci_gatt_add_char_rp0 resp;
    145            Osal_MemSet(&resp, 0, sizeof(resp));
   \   00000034   0x2203             MOVS     R2,#+3
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x4668             MOV      R0,SP
   \   0000003A   0x.... 0x....      BL       Osal_MemSet
    146            uint8_t index_input = 0;
   \   0000003E   0xF05F 0x0B00      MOVS     R11,#+0
    147            cp0->Service_Handle = htob(Service_Handle, 2);
   \   00000042   0xF8BD 0x0128      LDRH     R0,[SP, #+296]
   \   00000046   0xF8A9 0x0000      STRH     R0,[R9, #+0]
    148            index_input += 2;
   \   0000004A   0xF11B 0x0B02      ADDS     R11,R11,#+2
    149            cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
   \   0000004E   0xF889 0x7002      STRB     R7,[R9, #+2]
    150            index_input += 1;
   \   00000052   0xF11B 0x0B01      ADDS     R11,R11,#+1
    151            /* var_len_data input */
    152            {
    153              uint8_t size;
    154              switch (Char_UUID_Type) {
   \   00000056   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000058   0x0038             MOVS     R0,R7
   \   0000005A   0x2801             CMP      R0,#+1
   \   0000005C   0xD002             BEQ.N    ??aci_gatt_add_char_3
   \   0000005E   0x2802             CMP      R0,#+2
   \   00000060   0xD004             BEQ.N    ??aci_gatt_add_char_4
   \   00000062   0xE007             B.N      ??aci_gatt_add_char_5
    155                case 1: size = 2; break;
   \                     ??aci_gatt_add_char_3: (+1)
   \   00000064   0x2002             MOVS     R0,#+2
   \   00000066   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   0000006A   0xE005             B.N      ??aci_gatt_add_char_6
    156                case 2: size = 16; break;
   \                     ??aci_gatt_add_char_4: (+1)
   \   0000006C   0x2010             MOVS     R0,#+16
   \   0000006E   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000072   0xE001             B.N      ??aci_gatt_add_char_6
    157                default: return BLE_STATUS_ERROR;
   \                     ??aci_gatt_add_char_5: (+1)
   \   00000074   0x2047             MOVS     R0,#+71
   \   00000076   0xE052             B.N      ??aci_gatt_add_char_7
    158              }
    159              Osal_MemCpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
   \                     ??aci_gatt_add_char_6: (+1)
   \   00000078   0xF89D 0x2004      LDRB     R2,[SP, #+4]
   \   0000007C   0x994B             LDR      R1,[SP, #+300]
   \   0000007E   0xF119 0x0003      ADDS     R0,R9,#+3
   \   00000082   0x.... 0x....      BL       Osal_MemCpy
    160              index_input += size;
   \   00000086   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000008A   0xEB10 0x0B0B      ADDS     R11,R0,R11
    161              {
    162                cp1->Char_Value_Length = htob(Char_Value_Length, 2);
   \   0000008E   0xF8BD 0x0130      LDRH     R0,[SP, #+304]
   \   00000092   0xF8AA 0x0000      STRH     R0,[R10, #+0]
    163              }
    164              index_input += 2;
   \   00000096   0xF11B 0x0B02      ADDS     R11,R11,#+2
    165              {
    166                cp1->Char_Properties = htob(Char_Properties, 1);
   \   0000009A   0xF89D 0x0158      LDRB     R0,[SP, #+344]
   \   0000009E   0xF88A 0x0002      STRB     R0,[R10, #+2]
    167              }
    168              index_input += 1;
   \   000000A2   0xF11B 0x0B01      ADDS     R11,R11,#+1
    169              {
    170                cp1->Security_Permissions = htob(Security_Permissions, 1);
   \   000000A6   0xF89D 0x015C      LDRB     R0,[SP, #+348]
   \   000000AA   0xF88A 0x0003      STRB     R0,[R10, #+3]
    171              }
    172              index_input += 1;
   \   000000AE   0xF11B 0x0B01      ADDS     R11,R11,#+1
    173              {
    174                cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
   \   000000B2   0xF88A 0x4004      STRB     R4,[R10, #+4]
    175              }
    176              index_input += 1;
   \   000000B6   0xF11B 0x0B01      ADDS     R11,R11,#+1
    177              {
    178                cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
   \   000000BA   0xF88A 0x5005      STRB     R5,[R10, #+5]
    179              }
    180              index_input += 1;
   \   000000BE   0xF11B 0x0B01      ADDS     R11,R11,#+1
    181              {
    182                cp1->Is_Variable = htob(Is_Variable, 1);
   \   000000C2   0xF88A 0x6006      STRB     R6,[R10, #+6]
    183              }
    184              index_input += 1;
   \   000000C6   0xF11B 0x0B01      ADDS     R11,R11,#+1
    185            }
    186            Osal_MemSet(&rq, 0, sizeof(rq));
   \   000000CA   0x2218             MOVS     R2,#+24
   \   000000CC   0x2100             MOVS     R1,#+0
   \   000000CE   0xA802             ADD      R0,SP,#+8
   \   000000D0   0x.... 0x....      BL       Osal_MemSet
    187            rq.ogf = 0x3f;
   \   000000D4   0x203F             MOVS     R0,#+63
   \   000000D6   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    188            rq.ocf = 0x104;
   \   000000DA   0xF44F 0x7082      MOV      R0,#+260
   \   000000DE   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    189            rq.cparam = cmd_buffer;
   \   000000E2   0xA808             ADD      R0,SP,#+32
   \   000000E4   0x9004             STR      R0,[SP, #+16]
    190            rq.clen = index_input;
   \   000000E6   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000000EA   0xF8CD 0xB014      STR      R11,[SP, #+20]
    191            rq.rparam = &resp;
   \   000000EE   0x4668             MOV      R0,SP
   \   000000F0   0x9006             STR      R0,[SP, #+24]
    192            rq.rlen = sizeof(resp);
   \   000000F2   0x2003             MOVS     R0,#+3
   \   000000F4   0x9007             STR      R0,[SP, #+28]
    193            if (hci_send_req(&rq, FALSE) < 0)
   \   000000F6   0x2100             MOVS     R1,#+0
   \   000000F8   0xA802             ADD      R0,SP,#+8
   \   000000FA   0x.... 0x....      BL       hci_send_req
   \   000000FE   0x2800             CMP      R0,#+0
   \   00000100   0xD501             BPL.N    ??aci_gatt_add_char_8
    194              return BLE_STATUS_TIMEOUT;
   \   00000102   0x20FF             MOVS     R0,#+255
   \   00000104   0xE00B             B.N      ??aci_gatt_add_char_7
    195            if (resp.Status) {
   \                     ??aci_gatt_add_char_8: (+1)
   \   00000106   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000010A   0x2800             CMP      R0,#+0
   \   0000010C   0xD002             BEQ.N    ??aci_gatt_add_char_9
    196              return resp.Status;
   \   0000010E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000112   0xE004             B.N      ??aci_gatt_add_char_7
    197            }
    198            *Char_Handle = btoh(resp.Char_Handle, 2);
   \                     ??aci_gatt_add_char_9: (+1)
   \   00000114   0xF8BD 0x0001      LDRH     R0,[SP, #+1]
   \   00000118   0xF8A8 0x0000      STRH     R0,[R8, #+0]
    199            return BLE_STATUS_SUCCESS;
   \   0000011C   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_add_char_7: (+1)
   \   0000011E   0xB04D             ADD      SP,SP,#+308
   \   00000120   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    200          }

   \                                 In section .text, align 2, keep-with-next
    201          tBleStatus aci_gatt_add_char_desc(uint16_t Service_Handle,
    202                                            uint16_t Char_Handle,
    203                                            uint8_t Char_Desc_Uuid_Type,
    204                                            Char_Desc_Uuid_t *Char_Desc_Uuid,
    205                                            uint8_t Char_Desc_Value_Max_Len,
    206                                            uint8_t Char_Desc_Value_Length,
    207                                            uint8_t Char_Desc_Value[],
    208                                            uint8_t Security_Permissions,
    209                                            uint8_t Access_Permissions,
    210                                            uint8_t GATT_Evt_Mask,
    211                                            uint8_t Enc_Key_Size,
    212                                            uint8_t Is_Variable,
    213                                            uint16_t *Char_Desc_Handle)
    214          {
   \                     aci_gatt_add_char_desc: (+1)
   \   00000000   0xE92D 0x4FFB      PUSH     {R0,R1,R3-R11,LR}
   \   00000004   0xB0CA             SUB      SP,SP,#+296
   \   00000006   0x0017             MOVS     R7,R2
   \   00000008   0x9C57             LDR      R4,[SP, #+348]
   \   0000000A   0x9D5C             LDR      R5,[SP, #+368]
   \   0000000C   0x9E5D             LDR      R6,[SP, #+372]
   \   0000000E   0xF8DD 0x8178      LDR      R8,[SP, #+376]
    215            struct hci_request rq;
    216            uint8_t cmd_buffer[258];
    217            aci_gatt_add_char_desc_cp0 *cp0 = (aci_gatt_add_char_desc_cp0*)(cmd_buffer);
   \   00000012   0xF10D 0x0924      ADD      R9,SP,#+36
    218            aci_gatt_add_char_desc_cp1 *cp1 = (aci_gatt_add_char_desc_cp1*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)));
   \   00000016   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000018   0x2F01             CMP      R7,#+1
   \   0000001A   0xD101             BNE.N    ??aci_gatt_add_char_desc_0
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0xE005             B.N      ??aci_gatt_add_char_desc_1
   \                     ??aci_gatt_add_char_desc_0: (+1)
   \   00000020   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000022   0x2F02             CMP      R7,#+2
   \   00000024   0xD101             BNE.N    ??aci_gatt_add_char_desc_2
   \   00000026   0x2010             MOVS     R0,#+16
   \   00000028   0xE000             B.N      ??aci_gatt_add_char_desc_1
   \                     ??aci_gatt_add_char_desc_2: (+1)
   \   0000002A   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_add_char_desc_1: (+1)
   \   0000002C   0xA909             ADD      R1,SP,#+36
   \   0000002E   0x4408             ADD      R0,R1,R0
   \   00000030   0x1D40             ADDS     R0,R0,#+5
   \   00000032   0x9002             STR      R0,[SP, #+8]
    219            aci_gatt_add_char_desc_cp2 *cp2 = (aci_gatt_add_char_desc_cp2*)(cmd_buffer + 2 + 2 + 1 + (Char_Desc_Uuid_Type == 1 ? 2 : (Char_Desc_Uuid_Type == 2 ? 16 : 0)) + 1 + 1 + Char_Desc_Value_Length * (sizeof(uint8_t)));
   \   00000034   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000036   0x2F01             CMP      R7,#+1
   \   00000038   0xD101             BNE.N    ??aci_gatt_add_char_desc_3
   \   0000003A   0x2002             MOVS     R0,#+2
   \   0000003C   0xE005             B.N      ??aci_gatt_add_char_desc_4
   \                     ??aci_gatt_add_char_desc_3: (+1)
   \   0000003E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000040   0x2F02             CMP      R7,#+2
   \   00000042   0xD101             BNE.N    ??aci_gatt_add_char_desc_5
   \   00000044   0x2010             MOVS     R0,#+16
   \   00000046   0xE000             B.N      ??aci_gatt_add_char_desc_4
   \                     ??aci_gatt_add_char_desc_5: (+1)
   \   00000048   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_add_char_desc_4: (+1)
   \   0000004A   0xA909             ADD      R1,SP,#+36
   \   0000004C   0x4408             ADD      R0,R1,R0
   \   0000004E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000050   0x4420             ADD      R0,R0,R4
   \   00000052   0xF110 0x0A07      ADDS     R10,R0,#+7
    220            aci_gatt_add_char_desc_rp0 resp;
    221            Osal_MemSet(&resp, 0, sizeof(resp));
   \   00000056   0x2203             MOVS     R2,#+3
   \   00000058   0x2100             MOVS     R1,#+0
   \   0000005A   0x4668             MOV      R0,SP
   \   0000005C   0x.... 0x....      BL       Osal_MemSet
    222            uint8_t index_input = 0;
   \   00000060   0xF05F 0x0B00      MOVS     R11,#+0
    223            cp0->Service_Handle = htob(Service_Handle, 2);
   \   00000064   0xF8BD 0x0128      LDRH     R0,[SP, #+296]
   \   00000068   0xF8A9 0x0000      STRH     R0,[R9, #+0]
    224            index_input += 2;
   \   0000006C   0xF11B 0x0B02      ADDS     R11,R11,#+2
    225            cp0->Char_Handle = htob(Char_Handle, 2);
   \   00000070   0xF8BD 0x012C      LDRH     R0,[SP, #+300]
   \   00000074   0xF8A9 0x0002      STRH     R0,[R9, #+2]
    226            index_input += 2;
   \   00000078   0xF11B 0x0B02      ADDS     R11,R11,#+2
    227            cp0->Char_Desc_Uuid_Type = htob(Char_Desc_Uuid_Type, 1);
   \   0000007C   0xF889 0x7004      STRB     R7,[R9, #+4]
    228            index_input += 1;
   \   00000080   0xF11B 0x0B01      ADDS     R11,R11,#+1
    229            /* var_len_data input */
    230            {
    231              uint8_t size;
    232              switch (Char_Desc_Uuid_Type) {
   \   00000084   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000086   0x0038             MOVS     R0,R7
   \   00000088   0x2801             CMP      R0,#+1
   \   0000008A   0xD002             BEQ.N    ??aci_gatt_add_char_desc_6
   \   0000008C   0x2802             CMP      R0,#+2
   \   0000008E   0xD004             BEQ.N    ??aci_gatt_add_char_desc_7
   \   00000090   0xE007             B.N      ??aci_gatt_add_char_desc_8
    233                case 1: size = 2; break;
   \                     ??aci_gatt_add_char_desc_6: (+1)
   \   00000092   0x2002             MOVS     R0,#+2
   \   00000094   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000098   0xE005             B.N      ??aci_gatt_add_char_desc_9
    234                case 2: size = 16; break;
   \                     ??aci_gatt_add_char_desc_7: (+1)
   \   0000009A   0x2010             MOVS     R0,#+16
   \   0000009C   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   000000A0   0xE001             B.N      ??aci_gatt_add_char_desc_9
    235                default: return BLE_STATUS_ERROR;
   \                     ??aci_gatt_add_char_desc_8: (+1)
   \   000000A2   0x2047             MOVS     R0,#+71
   \   000000A4   0xE061             B.N      ??aci_gatt_add_char_desc_10
    236              }
    237              Osal_MemCpy((void *) &cp0->Char_Desc_Uuid, (const void *) Char_Desc_Uuid, size);
   \                     ??aci_gatt_add_char_desc_9: (+1)
   \   000000A6   0xF89D 0x2004      LDRB     R2,[SP, #+4]
   \   000000AA   0x994C             LDR      R1,[SP, #+304]
   \   000000AC   0xF119 0x0005      ADDS     R0,R9,#+5
   \   000000B0   0x.... 0x....      BL       Osal_MemCpy
    238              index_input += size;
   \   000000B4   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000000B8   0xEB10 0x0B0B      ADDS     R11,R0,R11
    239              {
    240                cp1->Char_Desc_Value_Max_Len = htob(Char_Desc_Value_Max_Len, 1);
   \   000000BC   0xF89D 0x0158      LDRB     R0,[SP, #+344]
   \   000000C0   0x9902             LDR      R1,[SP, #+8]
   \   000000C2   0x7008             STRB     R0,[R1, #+0]
    241              }
    242              index_input += 1;
   \   000000C4   0xF11B 0x0B01      ADDS     R11,R11,#+1
    243              {
    244                cp1->Char_Desc_Value_Length = htob(Char_Desc_Value_Length, 1);
   \   000000C8   0x9802             LDR      R0,[SP, #+8]
   \   000000CA   0x7044             STRB     R4,[R0, #+1]
    245              }
    246              index_input += 1;
   \   000000CC   0xF11B 0x0B01      ADDS     R11,R11,#+1
    247              Osal_MemCpy((void *) &cp1->Char_Desc_Value, (const void *) Char_Desc_Value, Char_Desc_Value_Length);
   \   000000D0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D2   0x0022             MOVS     R2,R4
   \   000000D4   0x9958             LDR      R1,[SP, #+352]
   \   000000D6   0x9802             LDR      R0,[SP, #+8]
   \   000000D8   0x1C80             ADDS     R0,R0,#+2
   \   000000DA   0x.... 0x....      BL       Osal_MemCpy
    248              index_input += Char_Desc_Value_Length;
   \   000000DE   0xEB14 0x0B0B      ADDS     R11,R4,R11
    249              {
    250                cp2->Security_Permissions = htob(Security_Permissions, 1);
   \   000000E2   0xF89D 0x0164      LDRB     R0,[SP, #+356]
   \   000000E6   0xF88A 0x0000      STRB     R0,[R10, #+0]
    251              }
    252              index_input += 1;
   \   000000EA   0xF11B 0x0B01      ADDS     R11,R11,#+1
    253              {
    254                cp2->Access_Permissions = htob(Access_Permissions, 1);
   \   000000EE   0xF89D 0x0168      LDRB     R0,[SP, #+360]
   \   000000F2   0xF88A 0x0001      STRB     R0,[R10, #+1]
    255              }
    256              index_input += 1;
   \   000000F6   0xF11B 0x0B01      ADDS     R11,R11,#+1
    257              {
    258                cp2->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
   \   000000FA   0xF89D 0x016C      LDRB     R0,[SP, #+364]
   \   000000FE   0xF88A 0x0002      STRB     R0,[R10, #+2]
    259              }
    260              index_input += 1;
   \   00000102   0xF11B 0x0B01      ADDS     R11,R11,#+1
    261              {
    262                cp2->Enc_Key_Size = htob(Enc_Key_Size, 1);
   \   00000106   0xF88A 0x5003      STRB     R5,[R10, #+3]
    263              }
    264              index_input += 1;
   \   0000010A   0xF11B 0x0B01      ADDS     R11,R11,#+1
    265              {
    266                cp2->Is_Variable = htob(Is_Variable, 1);
   \   0000010E   0xF88A 0x6004      STRB     R6,[R10, #+4]
    267              }
    268              index_input += 1;
   \   00000112   0xF11B 0x0B01      ADDS     R11,R11,#+1
    269            }
    270            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000116   0x2218             MOVS     R2,#+24
   \   00000118   0x2100             MOVS     R1,#+0
   \   0000011A   0xA803             ADD      R0,SP,#+12
   \   0000011C   0x.... 0x....      BL       Osal_MemSet
    271            rq.ogf = 0x3f;
   \   00000120   0x203F             MOVS     R0,#+63
   \   00000122   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    272            rq.ocf = 0x105;
   \   00000126   0xF240 0x1005      MOVW     R0,#+261
   \   0000012A   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    273            rq.cparam = cmd_buffer;
   \   0000012E   0xA809             ADD      R0,SP,#+36
   \   00000130   0x9005             STR      R0,[SP, #+20]
    274            rq.clen = index_input;
   \   00000132   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000136   0xF8CD 0xB018      STR      R11,[SP, #+24]
    275            rq.rparam = &resp;
   \   0000013A   0x4668             MOV      R0,SP
   \   0000013C   0x9007             STR      R0,[SP, #+28]
    276            rq.rlen = sizeof(resp);
   \   0000013E   0x2003             MOVS     R0,#+3
   \   00000140   0x9008             STR      R0,[SP, #+32]
    277            if (hci_send_req(&rq, FALSE) < 0)
   \   00000142   0x2100             MOVS     R1,#+0
   \   00000144   0xA803             ADD      R0,SP,#+12
   \   00000146   0x.... 0x....      BL       hci_send_req
   \   0000014A   0x2800             CMP      R0,#+0
   \   0000014C   0xD501             BPL.N    ??aci_gatt_add_char_desc_11
    278              return BLE_STATUS_TIMEOUT;
   \   0000014E   0x20FF             MOVS     R0,#+255
   \   00000150   0xE00B             B.N      ??aci_gatt_add_char_desc_10
    279            if (resp.Status) {
   \                     ??aci_gatt_add_char_desc_11: (+1)
   \   00000152   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000156   0x2800             CMP      R0,#+0
   \   00000158   0xD002             BEQ.N    ??aci_gatt_add_char_desc_12
    280              return resp.Status;
   \   0000015A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000015E   0xE004             B.N      ??aci_gatt_add_char_desc_10
    281            }
    282            *Char_Desc_Handle = btoh(resp.Char_Desc_Handle, 2);
   \                     ??aci_gatt_add_char_desc_12: (+1)
   \   00000160   0xF8BD 0x0001      LDRH     R0,[SP, #+1]
   \   00000164   0xF8A8 0x0000      STRH     R0,[R8, #+0]
    283            return BLE_STATUS_SUCCESS;
   \   00000168   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_add_char_desc_10: (+1)
   \   0000016A   0xB04D             ADD      SP,SP,#+308
   \   0000016C   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    284          }

   \                                 In section .text, align 2, keep-with-next
    285          tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
    286                                                uint16_t Char_Handle,
    287                                                uint8_t Val_Offset,
    288                                                uint8_t Char_Value_Length,
    289                                                uint8_t Char_Value[])
    290          {
   \                     aci_gatt_update_char_value: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB0C8             SUB      SP,SP,#+288
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   \   0000000E   0xF8DD 0x8140      LDR      R8,[SP, #+320]
    291            struct hci_request rq;
    292            uint8_t cmd_buffer[258];
    293            aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
   \   00000012   0xF10D 0x091C      ADD      R9,SP,#+28
    294            tBleStatus status = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0000      STRB     R0,[SP, #+0]
    295            uint8_t index_input = 0;
   \   0000001C   0xF05F 0x0A00      MOVS     R10,#+0
    296            cp0->Service_Handle = htob(Service_Handle, 2);
   \   00000020   0xF8A9 0x4000      STRH     R4,[R9, #+0]
    297            index_input += 2;
   \   00000024   0xF11A 0x0A02      ADDS     R10,R10,#+2
    298            cp0->Char_Handle = htob(Char_Handle, 2);
   \   00000028   0xF8A9 0x5002      STRH     R5,[R9, #+2]
    299            index_input += 2;
   \   0000002C   0xF11A 0x0A02      ADDS     R10,R10,#+2
    300            cp0->Val_Offset = htob(Val_Offset, 1);
   \   00000030   0xF889 0x6004      STRB     R6,[R9, #+4]
    301            index_input += 1;
   \   00000034   0xF11A 0x0A01      ADDS     R10,R10,#+1
    302            cp0->Char_Value_Length = htob(Char_Value_Length, 1);
   \   00000038   0xF889 0x7005      STRB     R7,[R9, #+5]
    303            index_input += 1;
   \   0000003C   0xF11A 0x0A01      ADDS     R10,R10,#+1
    304            Osal_MemCpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length);
   \   00000040   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000042   0x003A             MOVS     R2,R7
   \   00000044   0x4641             MOV      R1,R8
   \   00000046   0xF119 0x0006      ADDS     R0,R9,#+6
   \   0000004A   0x.... 0x....      BL       Osal_MemCpy
    305            index_input += Char_Value_Length;
   \   0000004E   0xEB17 0x0A0A      ADDS     R10,R7,R10
    306            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000052   0x2218             MOVS     R2,#+24
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0xA801             ADD      R0,SP,#+4
   \   00000058   0x.... 0x....      BL       Osal_MemSet
    307            rq.ogf = 0x3f;
   \   0000005C   0x203F             MOVS     R0,#+63
   \   0000005E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    308            rq.ocf = 0x106;
   \   00000062   0xF44F 0x7083      MOV      R0,#+262
   \   00000066   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    309            rq.cparam = cmd_buffer;
   \   0000006A   0xA807             ADD      R0,SP,#+28
   \   0000006C   0x9003             STR      R0,[SP, #+12]
    310            rq.clen = index_input;
   \   0000006E   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000072   0xF8CD 0xA010      STR      R10,[SP, #+16]
    311            rq.rparam = &status;
   \   00000076   0x4668             MOV      R0,SP
   \   00000078   0x9005             STR      R0,[SP, #+20]
    312            rq.rlen = 1;
   \   0000007A   0x2001             MOVS     R0,#+1
   \   0000007C   0x9006             STR      R0,[SP, #+24]
    313            if (hci_send_req(&rq, FALSE) < 0)
   \   0000007E   0x2100             MOVS     R1,#+0
   \   00000080   0xA801             ADD      R0,SP,#+4
   \   00000082   0x.... 0x....      BL       hci_send_req
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD501             BPL.N    ??aci_gatt_update_char_value_0
    314              return BLE_STATUS_TIMEOUT;
   \   0000008A   0x20FF             MOVS     R0,#+255
   \   0000008C   0xE007             B.N      ??aci_gatt_update_char_value_1
    315            if (status) {
   \                     ??aci_gatt_update_char_value_0: (+1)
   \   0000008E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000092   0x2800             CMP      R0,#+0
   \   00000094   0xD002             BEQ.N    ??aci_gatt_update_char_value_2
    316              return status;
   \   00000096   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000009A   0xE000             B.N      ??aci_gatt_update_char_value_1
    317            }
    318            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_update_char_value_2: (+1)
   \   0000009C   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_update_char_value_1: (+1)
   \   0000009E   0xB048             ADD      SP,SP,#+288
   \   000000A0   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    319          }

   \                                 In section .text, align 2, keep-with-next
    320          tBleStatus aci_gatt_del_char(uint16_t Serv_Handle,
    321                                       uint16_t Char_Handle)
    322          {
   \                     aci_gatt_del_char: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB0C9             SUB      SP,SP,#+292
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    323            struct hci_request rq;
    324            uint8_t cmd_buffer[258];
    325            aci_gatt_del_char_cp0 *cp0 = (aci_gatt_del_char_cp0*)(cmd_buffer);
   \   00000008   0xAE07             ADD      R6,SP,#+28
    326            tBleStatus status = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    327            uint8_t index_input = 0;
   \   00000010   0x2700             MOVS     R7,#+0
    328            cp0->Serv_Handle = htob(Serv_Handle, 2);
   \   00000012   0x8034             STRH     R4,[R6, #+0]
    329            index_input += 2;
   \   00000014   0x1CBF             ADDS     R7,R7,#+2
    330            cp0->Char_Handle = htob(Char_Handle, 2);
   \   00000016   0x8075             STRH     R5,[R6, #+2]
    331            index_input += 2;
   \   00000018   0x1CBF             ADDS     R7,R7,#+2
    332            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000001A   0x2218             MOVS     R2,#+24
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0xA801             ADD      R0,SP,#+4
   \   00000020   0x.... 0x....      BL       Osal_MemSet
    333            rq.ogf = 0x3f;
   \   00000024   0x203F             MOVS     R0,#+63
   \   00000026   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    334            rq.ocf = 0x107;
   \   0000002A   0xF240 0x1007      MOVW     R0,#+263
   \   0000002E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    335            rq.cparam = cmd_buffer;
   \   00000032   0xA807             ADD      R0,SP,#+28
   \   00000034   0x9003             STR      R0,[SP, #+12]
    336            rq.clen = index_input;
   \   00000036   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000038   0x9704             STR      R7,[SP, #+16]
    337            rq.rparam = &status;
   \   0000003A   0x4668             MOV      R0,SP
   \   0000003C   0x9005             STR      R0,[SP, #+20]
    338            rq.rlen = 1;
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x9006             STR      R0,[SP, #+24]
    339            if (hci_send_req(&rq, FALSE) < 0)
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0xA801             ADD      R0,SP,#+4
   \   00000046   0x.... 0x....      BL       hci_send_req
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD501             BPL.N    ??aci_gatt_del_char_0
    340              return BLE_STATUS_TIMEOUT;
   \   0000004E   0x20FF             MOVS     R0,#+255
   \   00000050   0xE007             B.N      ??aci_gatt_del_char_1
    341            if (status) {
   \                     ??aci_gatt_del_char_0: (+1)
   \   00000052   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD002             BEQ.N    ??aci_gatt_del_char_2
    342              return status;
   \   0000005A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000005E   0xE000             B.N      ??aci_gatt_del_char_1
    343            }
    344            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_del_char_2: (+1)
   \   00000060   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_del_char_1: (+1)
   \   00000062   0xB049             ADD      SP,SP,#+292
   \   00000064   0xBDF0             POP      {R4-R7,PC}       ;; return
    345          }

   \                                 In section .text, align 2, keep-with-next
    346          tBleStatus aci_gatt_del_service(uint16_t Serv_Handle)
    347          {
   \                     aci_gatt_del_service: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0C8             SUB      SP,SP,#+288
   \   00000004   0x0004             MOVS     R4,R0
    348            struct hci_request rq;
    349            uint8_t cmd_buffer[258];
    350            aci_gatt_del_service_cp0 *cp0 = (aci_gatt_del_service_cp0*)(cmd_buffer);
   \   00000006   0xAD07             ADD      R5,SP,#+28
    351            tBleStatus status = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    352            uint8_t index_input = 0;
   \   0000000E   0x2600             MOVS     R6,#+0
    353            cp0->Serv_Handle = htob(Serv_Handle, 2);
   \   00000010   0x802C             STRH     R4,[R5, #+0]
    354            index_input += 2;
   \   00000012   0x1CB6             ADDS     R6,R6,#+2
    355            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000014   0x2218             MOVS     R2,#+24
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0xA801             ADD      R0,SP,#+4
   \   0000001A   0x.... 0x....      BL       Osal_MemSet
    356            rq.ogf = 0x3f;
   \   0000001E   0x203F             MOVS     R0,#+63
   \   00000020   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    357            rq.ocf = 0x108;
   \   00000024   0xF44F 0x7084      MOV      R0,#+264
   \   00000028   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    358            rq.cparam = cmd_buffer;
   \   0000002C   0xA807             ADD      R0,SP,#+28
   \   0000002E   0x9003             STR      R0,[SP, #+12]
    359            rq.clen = index_input;
   \   00000030   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000032   0x9604             STR      R6,[SP, #+16]
    360            rq.rparam = &status;
   \   00000034   0x4668             MOV      R0,SP
   \   00000036   0x9005             STR      R0,[SP, #+20]
    361            rq.rlen = 1;
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x9006             STR      R0,[SP, #+24]
    362            if (hci_send_req(&rq, FALSE) < 0)
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0xA801             ADD      R0,SP,#+4
   \   00000040   0x.... 0x....      BL       hci_send_req
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD501             BPL.N    ??aci_gatt_del_service_0
    363              return BLE_STATUS_TIMEOUT;
   \   00000048   0x20FF             MOVS     R0,#+255
   \   0000004A   0xE007             B.N      ??aci_gatt_del_service_1
    364            if (status) {
   \                     ??aci_gatt_del_service_0: (+1)
   \   0000004C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD002             BEQ.N    ??aci_gatt_del_service_2
    365              return status;
   \   00000054   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000058   0xE000             B.N      ??aci_gatt_del_service_1
    366            }
    367            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_del_service_2: (+1)
   \   0000005A   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_del_service_1: (+1)
   \   0000005C   0xB048             ADD      SP,SP,#+288
   \   0000005E   0xBD70             POP      {R4-R6,PC}       ;; return
    368          }

   \                                 In section .text, align 2, keep-with-next
    369          tBleStatus aci_gatt_del_include_service(uint16_t Serv_Handle,
    370                                                  uint16_t Include_Handle)
    371          {
   \                     aci_gatt_del_include_service: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB0C9             SUB      SP,SP,#+292
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    372            struct hci_request rq;
    373            uint8_t cmd_buffer[258];
    374            aci_gatt_del_include_service_cp0 *cp0 = (aci_gatt_del_include_service_cp0*)(cmd_buffer);
   \   00000008   0xAE07             ADD      R6,SP,#+28
    375            tBleStatus status = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    376            uint8_t index_input = 0;
   \   00000010   0x2700             MOVS     R7,#+0
    377            cp0->Serv_Handle = htob(Serv_Handle, 2);
   \   00000012   0x8034             STRH     R4,[R6, #+0]
    378            index_input += 2;
   \   00000014   0x1CBF             ADDS     R7,R7,#+2
    379            cp0->Include_Handle = htob(Include_Handle, 2);
   \   00000016   0x8075             STRH     R5,[R6, #+2]
    380            index_input += 2;
   \   00000018   0x1CBF             ADDS     R7,R7,#+2
    381            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000001A   0x2218             MOVS     R2,#+24
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0xA801             ADD      R0,SP,#+4
   \   00000020   0x.... 0x....      BL       Osal_MemSet
    382            rq.ogf = 0x3f;
   \   00000024   0x203F             MOVS     R0,#+63
   \   00000026   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    383            rq.ocf = 0x109;
   \   0000002A   0xF240 0x1009      MOVW     R0,#+265
   \   0000002E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    384            rq.cparam = cmd_buffer;
   \   00000032   0xA807             ADD      R0,SP,#+28
   \   00000034   0x9003             STR      R0,[SP, #+12]
    385            rq.clen = index_input;
   \   00000036   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000038   0x9704             STR      R7,[SP, #+16]
    386            rq.rparam = &status;
   \   0000003A   0x4668             MOV      R0,SP
   \   0000003C   0x9005             STR      R0,[SP, #+20]
    387            rq.rlen = 1;
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x9006             STR      R0,[SP, #+24]
    388            if (hci_send_req(&rq, FALSE) < 0)
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0xA801             ADD      R0,SP,#+4
   \   00000046   0x.... 0x....      BL       hci_send_req
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD501             BPL.N    ??aci_gatt_del_include_service_0
    389              return BLE_STATUS_TIMEOUT;
   \   0000004E   0x20FF             MOVS     R0,#+255
   \   00000050   0xE007             B.N      ??aci_gatt_del_include_service_1
    390            if (status) {
   \                     ??aci_gatt_del_include_service_0: (+1)
   \   00000052   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD002             BEQ.N    ??aci_gatt_del_include_service_2
    391              return status;
   \   0000005A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000005E   0xE000             B.N      ??aci_gatt_del_include_service_1
    392            }
    393            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_del_include_service_2: (+1)
   \   00000060   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_del_include_service_1: (+1)
   \   00000062   0xB049             ADD      SP,SP,#+292
   \   00000064   0xBDF0             POP      {R4-R7,PC}       ;; return
    394          }

   \                                 In section .text, align 2, keep-with-next
    395          tBleStatus aci_gatt_set_event_mask(uint32_t GATT_Evt_Mask)
    396          {
   \                     aci_gatt_set_event_mask: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0C8             SUB      SP,SP,#+288
   \   00000004   0x0004             MOVS     R4,R0
    397            struct hci_request rq;
    398            uint8_t cmd_buffer[258];
    399            aci_gatt_set_event_mask_cp0 *cp0 = (aci_gatt_set_event_mask_cp0*)(cmd_buffer);
   \   00000006   0xAD07             ADD      R5,SP,#+28
    400            tBleStatus status = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    401            uint8_t index_input = 0;
   \   0000000E   0x2600             MOVS     R6,#+0
    402            cp0->GATT_Evt_Mask = htob(GATT_Evt_Mask, 4);
   \   00000010   0x602C             STR      R4,[R5, #+0]
    403            index_input += 4;
   \   00000012   0x1D36             ADDS     R6,R6,#+4
    404            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000014   0x2218             MOVS     R2,#+24
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0xA801             ADD      R0,SP,#+4
   \   0000001A   0x.... 0x....      BL       Osal_MemSet
    405            rq.ogf = 0x3f;
   \   0000001E   0x203F             MOVS     R0,#+63
   \   00000020   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    406            rq.ocf = 0x10a;
   \   00000024   0xF44F 0x7085      MOV      R0,#+266
   \   00000028   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    407            rq.cparam = cmd_buffer;
   \   0000002C   0xA807             ADD      R0,SP,#+28
   \   0000002E   0x9003             STR      R0,[SP, #+12]
    408            rq.clen = index_input;
   \   00000030   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000032   0x9604             STR      R6,[SP, #+16]
    409            rq.rparam = &status;
   \   00000034   0x4668             MOV      R0,SP
   \   00000036   0x9005             STR      R0,[SP, #+20]
    410            rq.rlen = 1;
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x9006             STR      R0,[SP, #+24]
    411            if (hci_send_req(&rq, FALSE) < 0)
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0xA801             ADD      R0,SP,#+4
   \   00000040   0x.... 0x....      BL       hci_send_req
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD501             BPL.N    ??aci_gatt_set_event_mask_0
    412              return BLE_STATUS_TIMEOUT;
   \   00000048   0x20FF             MOVS     R0,#+255
   \   0000004A   0xE007             B.N      ??aci_gatt_set_event_mask_1
    413            if (status) {
   \                     ??aci_gatt_set_event_mask_0: (+1)
   \   0000004C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD002             BEQ.N    ??aci_gatt_set_event_mask_2
    414              return status;
   \   00000054   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000058   0xE000             B.N      ??aci_gatt_set_event_mask_1
    415            }
    416            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_set_event_mask_2: (+1)
   \   0000005A   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_set_event_mask_1: (+1)
   \   0000005C   0xB048             ADD      SP,SP,#+288
   \   0000005E   0xBD70             POP      {R4-R6,PC}       ;; return
    417          }

   \                                 In section .text, align 2, keep-with-next
    418          tBleStatus aci_gatt_exchange_config(uint16_t Connection_Handle)
    419          {
   \                     aci_gatt_exchange_config: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0C8             SUB      SP,SP,#+288
   \   00000004   0x0004             MOVS     R4,R0
    420            struct hci_request rq;
    421            uint8_t cmd_buffer[258];
    422            aci_gatt_exchange_config_cp0 *cp0 = (aci_gatt_exchange_config_cp0*)(cmd_buffer);
   \   00000006   0xAD07             ADD      R5,SP,#+28
    423            tBleStatus status = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    424            uint8_t index_input = 0;
   \   0000000E   0x2600             MOVS     R6,#+0
    425            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000010   0x802C             STRH     R4,[R5, #+0]
    426            index_input += 2;
   \   00000012   0x1CB6             ADDS     R6,R6,#+2
    427            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000014   0x2218             MOVS     R2,#+24
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0xA801             ADD      R0,SP,#+4
   \   0000001A   0x.... 0x....      BL       Osal_MemSet
    428            rq.ogf = 0x3f;
   \   0000001E   0x203F             MOVS     R0,#+63
   \   00000020   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    429            rq.ocf = 0x10b;
   \   00000024   0xF240 0x100B      MOVW     R0,#+267
   \   00000028   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    430            rq.event = 0x0F;
   \   0000002C   0x200F             MOVS     R0,#+15
   \   0000002E   0x9002             STR      R0,[SP, #+8]
    431            rq.cparam = cmd_buffer;
   \   00000030   0xA807             ADD      R0,SP,#+28
   \   00000032   0x9003             STR      R0,[SP, #+12]
    432            rq.clen = index_input;
   \   00000034   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000036   0x9604             STR      R6,[SP, #+16]
    433            rq.rparam = &status;
   \   00000038   0x4668             MOV      R0,SP
   \   0000003A   0x9005             STR      R0,[SP, #+20]
    434            rq.rlen = 1;
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x9006             STR      R0,[SP, #+24]
    435            if (hci_send_req(&rq, FALSE) < 0)
   \   00000040   0x2100             MOVS     R1,#+0
   \   00000042   0xA801             ADD      R0,SP,#+4
   \   00000044   0x.... 0x....      BL       hci_send_req
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD501             BPL.N    ??aci_gatt_exchange_config_0
    436              return BLE_STATUS_TIMEOUT;
   \   0000004C   0x20FF             MOVS     R0,#+255
   \   0000004E   0xE007             B.N      ??aci_gatt_exchange_config_1
    437            if (status) {
   \                     ??aci_gatt_exchange_config_0: (+1)
   \   00000050   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD002             BEQ.N    ??aci_gatt_exchange_config_2
    438              return status;
   \   00000058   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000005C   0xE000             B.N      ??aci_gatt_exchange_config_1
    439            }
    440            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_exchange_config_2: (+1)
   \   0000005E   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_exchange_config_1: (+1)
   \   00000060   0xB048             ADD      SP,SP,#+288
   \   00000062   0xBD70             POP      {R4-R6,PC}       ;; return
    441          }

   \                                 In section .text, align 2, keep-with-next
    442          tBleStatus aci_att_find_info_req(uint16_t Connection_Handle,
    443                                           uint16_t Start_Handle,
    444                                           uint16_t End_Handle)
    445          {
   \                     aci_att_find_info_req: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB0C8             SUB      SP,SP,#+288
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
    446            struct hci_request rq;
    447            uint8_t cmd_buffer[258];
    448            aci_att_find_info_req_cp0 *cp0 = (aci_att_find_info_req_cp0*)(cmd_buffer);
   \   0000000C   0xAF07             ADD      R7,SP,#+28
    449            tBleStatus status = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF88D 0x0000      STRB     R0,[SP, #+0]
    450            uint8_t index_input = 0;
   \   00000014   0xF05F 0x0800      MOVS     R8,#+0
    451            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000018   0x803C             STRH     R4,[R7, #+0]
    452            index_input += 2;
   \   0000001A   0xF118 0x0802      ADDS     R8,R8,#+2
    453            cp0->Start_Handle = htob(Start_Handle, 2);
   \   0000001E   0x807D             STRH     R5,[R7, #+2]
    454            index_input += 2;
   \   00000020   0xF118 0x0802      ADDS     R8,R8,#+2
    455            cp0->End_Handle = htob(End_Handle, 2);
   \   00000024   0x80BE             STRH     R6,[R7, #+4]
    456            index_input += 2;
   \   00000026   0xF118 0x0802      ADDS     R8,R8,#+2
    457            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000002A   0x2218             MOVS     R2,#+24
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0xA801             ADD      R0,SP,#+4
   \   00000030   0x.... 0x....      BL       Osal_MemSet
    458            rq.ogf = 0x3f;
   \   00000034   0x203F             MOVS     R0,#+63
   \   00000036   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    459            rq.ocf = 0x10c;
   \   0000003A   0xF44F 0x7086      MOV      R0,#+268
   \   0000003E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    460            rq.event = 0x0F;
   \   00000042   0x200F             MOVS     R0,#+15
   \   00000044   0x9002             STR      R0,[SP, #+8]
    461            rq.cparam = cmd_buffer;
   \   00000046   0xA807             ADD      R0,SP,#+28
   \   00000048   0x9003             STR      R0,[SP, #+12]
    462            rq.clen = index_input;
   \   0000004A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000004E   0xF8CD 0x8010      STR      R8,[SP, #+16]
    463            rq.rparam = &status;
   \   00000052   0x4668             MOV      R0,SP
   \   00000054   0x9005             STR      R0,[SP, #+20]
    464            rq.rlen = 1;
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x9006             STR      R0,[SP, #+24]
    465            if (hci_send_req(&rq, FALSE) < 0)
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0xA801             ADD      R0,SP,#+4
   \   0000005E   0x.... 0x....      BL       hci_send_req
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD501             BPL.N    ??aci_att_find_info_req_0
    466              return BLE_STATUS_TIMEOUT;
   \   00000066   0x20FF             MOVS     R0,#+255
   \   00000068   0xE007             B.N      ??aci_att_find_info_req_1
    467            if (status) {
   \                     ??aci_att_find_info_req_0: (+1)
   \   0000006A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD002             BEQ.N    ??aci_att_find_info_req_2
    468              return status;
   \   00000072   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000076   0xE000             B.N      ??aci_att_find_info_req_1
    469            }
    470            return BLE_STATUS_SUCCESS;
   \                     ??aci_att_find_info_req_2: (+1)
   \   00000078   0x2000             MOVS     R0,#+0
   \                     ??aci_att_find_info_req_1: (+1)
   \   0000007A   0xB048             ADD      SP,SP,#+288
   \   0000007C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    471          }

   \                                 In section .text, align 2, keep-with-next
    472          tBleStatus aci_att_find_by_type_value_req(uint16_t Connection_Handle,
    473                                                    uint16_t Start_Handle,
    474                                                    uint16_t End_Handle,
    475                                                    uint16_t UUID,
    476                                                    uint8_t Attribute_Val_Length,
    477                                                    uint8_t Attribute_Val[])
    478          {
   \                     aci_att_find_by_type_value_req: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB0C9             SUB      SP,SP,#+292
   \   00000006   0x0005             MOVS     R5,R0
   \   00000008   0x000E             MOVS     R6,R1
   \   0000000A   0x0017             MOVS     R7,R2
   \   0000000C   0x4698             MOV      R8,R3
   \   0000000E   0x9C52             LDR      R4,[SP, #+328]
   \   00000010   0xF8DD 0x914C      LDR      R9,[SP, #+332]
    479            struct hci_request rq;
    480            uint8_t cmd_buffer[258];
    481            aci_att_find_by_type_value_req_cp0 *cp0 = (aci_att_find_by_type_value_req_cp0*)(cmd_buffer);
   \   00000014   0xF10D 0x0A1C      ADD      R10,SP,#+28
    482            tBleStatus status = 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    483            uint8_t index_input = 0;
   \   0000001E   0xF05F 0x0B00      MOVS     R11,#+0
    484            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000022   0xF8AA 0x5000      STRH     R5,[R10, #+0]
    485            index_input += 2;
   \   00000026   0xF11B 0x0B02      ADDS     R11,R11,#+2
    486            cp0->Start_Handle = htob(Start_Handle, 2);
   \   0000002A   0xF8AA 0x6002      STRH     R6,[R10, #+2]
    487            index_input += 2;
   \   0000002E   0xF11B 0x0B02      ADDS     R11,R11,#+2
    488            cp0->End_Handle = htob(End_Handle, 2);
   \   00000032   0xF8AA 0x7004      STRH     R7,[R10, #+4]
    489            index_input += 2;
   \   00000036   0xF11B 0x0B02      ADDS     R11,R11,#+2
    490            cp0->UUID = htob(UUID, 2);
   \   0000003A   0xF8AA 0x8006      STRH     R8,[R10, #+6]
    491            index_input += 2;
   \   0000003E   0xF11B 0x0B02      ADDS     R11,R11,#+2
    492            cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
   \   00000042   0xF88A 0x4008      STRB     R4,[R10, #+8]
    493            index_input += 1;
   \   00000046   0xF11B 0x0B01      ADDS     R11,R11,#+1
    494            Osal_MemCpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length);
   \   0000004A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004C   0x0022             MOVS     R2,R4
   \   0000004E   0x4649             MOV      R1,R9
   \   00000050   0xF11A 0x0009      ADDS     R0,R10,#+9
   \   00000054   0x.... 0x....      BL       Osal_MemCpy
    495            index_input += Attribute_Val_Length;
   \   00000058   0xEB14 0x0B0B      ADDS     R11,R4,R11
    496            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000005C   0x2218             MOVS     R2,#+24
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0xA801             ADD      R0,SP,#+4
   \   00000062   0x.... 0x....      BL       Osal_MemSet
    497            rq.ogf = 0x3f;
   \   00000066   0x203F             MOVS     R0,#+63
   \   00000068   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    498            rq.ocf = 0x10d;
   \   0000006C   0xF240 0x100D      MOVW     R0,#+269
   \   00000070   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    499            rq.event = 0x0F;
   \   00000074   0x200F             MOVS     R0,#+15
   \   00000076   0x9002             STR      R0,[SP, #+8]
    500            rq.cparam = cmd_buffer;
   \   00000078   0xA807             ADD      R0,SP,#+28
   \   0000007A   0x9003             STR      R0,[SP, #+12]
    501            rq.clen = index_input;
   \   0000007C   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000080   0xF8CD 0xB010      STR      R11,[SP, #+16]
    502            rq.rparam = &status;
   \   00000084   0x4668             MOV      R0,SP
   \   00000086   0x9005             STR      R0,[SP, #+20]
    503            rq.rlen = 1;
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0x9006             STR      R0,[SP, #+24]
    504            if (hci_send_req(&rq, FALSE) < 0)
   \   0000008C   0x2100             MOVS     R1,#+0
   \   0000008E   0xA801             ADD      R0,SP,#+4
   \   00000090   0x.... 0x....      BL       hci_send_req
   \   00000094   0x2800             CMP      R0,#+0
   \   00000096   0xD501             BPL.N    ??aci_att_find_by_type_value_req_0
    505              return BLE_STATUS_TIMEOUT;
   \   00000098   0x20FF             MOVS     R0,#+255
   \   0000009A   0xE007             B.N      ??aci_att_find_by_type_value_req_1
    506            if (status) {
   \                     ??aci_att_find_by_type_value_req_0: (+1)
   \   0000009C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000A0   0x2800             CMP      R0,#+0
   \   000000A2   0xD002             BEQ.N    ??aci_att_find_by_type_value_req_2
    507              return status;
   \   000000A4   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000A8   0xE000             B.N      ??aci_att_find_by_type_value_req_1
    508            }
    509            return BLE_STATUS_SUCCESS;
   \                     ??aci_att_find_by_type_value_req_2: (+1)
   \   000000AA   0x2000             MOVS     R0,#+0
   \                     ??aci_att_find_by_type_value_req_1: (+1)
   \   000000AC   0xB049             ADD      SP,SP,#+292
   \   000000AE   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    510          }

   \                                 In section .text, align 2, keep-with-next
    511          tBleStatus aci_att_read_by_type_req(uint16_t Connection_Handle,
    512                                              uint16_t Start_Handle,
    513                                              uint16_t End_Handle,
    514                                              uint8_t UUID_Type,
    515                                              UUID_t *UUID)
    516          {
   \                     aci_att_read_by_type_req: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB0C8             SUB      SP,SP,#+288
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   \   0000000E   0xF8DD 0x8140      LDR      R8,[SP, #+320]
    517            struct hci_request rq;
    518            uint8_t cmd_buffer[258];
    519            aci_att_read_by_type_req_cp0 *cp0 = (aci_att_read_by_type_req_cp0*)(cmd_buffer);
   \   00000012   0xF10D 0x091C      ADD      R9,SP,#+28
    520            tBleStatus status = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0000      STRB     R0,[SP, #+0]
    521            uint8_t index_input = 0;
   \   0000001C   0xF05F 0x0A00      MOVS     R10,#+0
    522            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000020   0xF8A9 0x4000      STRH     R4,[R9, #+0]
    523            index_input += 2;
   \   00000024   0xF11A 0x0A02      ADDS     R10,R10,#+2
    524            cp0->Start_Handle = htob(Start_Handle, 2);
   \   00000028   0xF8A9 0x5002      STRH     R5,[R9, #+2]
    525            index_input += 2;
   \   0000002C   0xF11A 0x0A02      ADDS     R10,R10,#+2
    526            cp0->End_Handle = htob(End_Handle, 2);
   \   00000030   0xF8A9 0x6004      STRH     R6,[R9, #+4]
    527            index_input += 2;
   \   00000034   0xF11A 0x0A02      ADDS     R10,R10,#+2
    528            cp0->UUID_Type = htob(UUID_Type, 1);
   \   00000038   0xF889 0x7006      STRB     R7,[R9, #+6]
    529            index_input += 1;
   \   0000003C   0xF11A 0x0A01      ADDS     R10,R10,#+1
    530            Osal_MemCpy((void *) &cp0->UUID, (const void *) UUID, UUID_Type);
   \   00000040   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000042   0x003A             MOVS     R2,R7
   \   00000044   0x4641             MOV      R1,R8
   \   00000046   0xF119 0x0007      ADDS     R0,R9,#+7
   \   0000004A   0x.... 0x....      BL       Osal_MemCpy
    531            index_input += 16;
   \   0000004E   0xF11A 0x0A10      ADDS     R10,R10,#+16
    532            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000052   0x2218             MOVS     R2,#+24
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0xA801             ADD      R0,SP,#+4
   \   00000058   0x.... 0x....      BL       Osal_MemSet
    533            rq.ogf = 0x3f;
   \   0000005C   0x203F             MOVS     R0,#+63
   \   0000005E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    534            rq.ocf = 0x10e;
   \   00000062   0xF44F 0x7087      MOV      R0,#+270
   \   00000066   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    535            rq.event = 0x0F;
   \   0000006A   0x200F             MOVS     R0,#+15
   \   0000006C   0x9002             STR      R0,[SP, #+8]
    536            rq.cparam = cmd_buffer;
   \   0000006E   0xA807             ADD      R0,SP,#+28
   \   00000070   0x9003             STR      R0,[SP, #+12]
    537            rq.clen = index_input;
   \   00000072   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000076   0xF8CD 0xA010      STR      R10,[SP, #+16]
    538            rq.rparam = &status;
   \   0000007A   0x4668             MOV      R0,SP
   \   0000007C   0x9005             STR      R0,[SP, #+20]
    539            rq.rlen = 1;
   \   0000007E   0x2001             MOVS     R0,#+1
   \   00000080   0x9006             STR      R0,[SP, #+24]
    540            if (hci_send_req(&rq, FALSE) < 0)
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0xA801             ADD      R0,SP,#+4
   \   00000086   0x.... 0x....      BL       hci_send_req
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD501             BPL.N    ??aci_att_read_by_type_req_0
    541              return BLE_STATUS_TIMEOUT;
   \   0000008E   0x20FF             MOVS     R0,#+255
   \   00000090   0xE007             B.N      ??aci_att_read_by_type_req_1
    542            if (status) {
   \                     ??aci_att_read_by_type_req_0: (+1)
   \   00000092   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD002             BEQ.N    ??aci_att_read_by_type_req_2
    543              return status;
   \   0000009A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000009E   0xE000             B.N      ??aci_att_read_by_type_req_1
    544            }
    545            return BLE_STATUS_SUCCESS;
   \                     ??aci_att_read_by_type_req_2: (+1)
   \   000000A0   0x2000             MOVS     R0,#+0
   \                     ??aci_att_read_by_type_req_1: (+1)
   \   000000A2   0xB048             ADD      SP,SP,#+288
   \   000000A4   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    546          }

   \                                 In section .text, align 2, keep-with-next
    547          tBleStatus aci_att_read_by_group_type_req(uint16_t Connection_Handle,
    548                                                    uint16_t Start_Handle,
    549                                                    uint16_t End_Handle,
    550                                                    uint8_t UUID_Type,
    551                                                    UUID_t *UUID)
    552          {
   \                     aci_att_read_by_group_type_req: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB0C8             SUB      SP,SP,#+288
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   \   0000000E   0xF8DD 0x8140      LDR      R8,[SP, #+320]
    553            struct hci_request rq;
    554            uint8_t cmd_buffer[258];
    555            aci_att_read_by_group_type_req_cp0 *cp0 = (aci_att_read_by_group_type_req_cp0*)(cmd_buffer);
   \   00000012   0xF10D 0x091C      ADD      R9,SP,#+28
    556            tBleStatus status = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0000      STRB     R0,[SP, #+0]
    557            uint8_t index_input = 0;
   \   0000001C   0xF05F 0x0A00      MOVS     R10,#+0
    558            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000020   0xF8A9 0x4000      STRH     R4,[R9, #+0]
    559            index_input += 2;
   \   00000024   0xF11A 0x0A02      ADDS     R10,R10,#+2
    560            cp0->Start_Handle = htob(Start_Handle, 2);
   \   00000028   0xF8A9 0x5002      STRH     R5,[R9, #+2]
    561            index_input += 2;
   \   0000002C   0xF11A 0x0A02      ADDS     R10,R10,#+2
    562            cp0->End_Handle = htob(End_Handle, 2);
   \   00000030   0xF8A9 0x6004      STRH     R6,[R9, #+4]
    563            index_input += 2;
   \   00000034   0xF11A 0x0A02      ADDS     R10,R10,#+2
    564            cp0->UUID_Type = htob(UUID_Type, 1);
   \   00000038   0xF889 0x7006      STRB     R7,[R9, #+6]
    565            index_input += 1;
   \   0000003C   0xF11A 0x0A01      ADDS     R10,R10,#+1
    566            Osal_MemCpy((void *) &cp0->UUID, (const void *) UUID, UUID_Type);
   \   00000040   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000042   0x003A             MOVS     R2,R7
   \   00000044   0x4641             MOV      R1,R8
   \   00000046   0xF119 0x0007      ADDS     R0,R9,#+7
   \   0000004A   0x.... 0x....      BL       Osal_MemCpy
    567            index_input += 16;
   \   0000004E   0xF11A 0x0A10      ADDS     R10,R10,#+16
    568            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000052   0x2218             MOVS     R2,#+24
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0xA801             ADD      R0,SP,#+4
   \   00000058   0x.... 0x....      BL       Osal_MemSet
    569            rq.ogf = 0x3f;
   \   0000005C   0x203F             MOVS     R0,#+63
   \   0000005E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    570            rq.ocf = 0x10f;
   \   00000062   0xF240 0x100F      MOVW     R0,#+271
   \   00000066   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    571            rq.event = 0x0F;
   \   0000006A   0x200F             MOVS     R0,#+15
   \   0000006C   0x9002             STR      R0,[SP, #+8]
    572            rq.cparam = cmd_buffer;
   \   0000006E   0xA807             ADD      R0,SP,#+28
   \   00000070   0x9003             STR      R0,[SP, #+12]
    573            rq.clen = index_input;
   \   00000072   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000076   0xF8CD 0xA010      STR      R10,[SP, #+16]
    574            rq.rparam = &status;
   \   0000007A   0x4668             MOV      R0,SP
   \   0000007C   0x9005             STR      R0,[SP, #+20]
    575            rq.rlen = 1;
   \   0000007E   0x2001             MOVS     R0,#+1
   \   00000080   0x9006             STR      R0,[SP, #+24]
    576            if (hci_send_req(&rq, FALSE) < 0)
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0xA801             ADD      R0,SP,#+4
   \   00000086   0x.... 0x....      BL       hci_send_req
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD501             BPL.N    ??aci_att_read_by_group_type_req_0
    577              return BLE_STATUS_TIMEOUT;
   \   0000008E   0x20FF             MOVS     R0,#+255
   \   00000090   0xE007             B.N      ??aci_att_read_by_group_type_req_1
    578            if (status) {
   \                     ??aci_att_read_by_group_type_req_0: (+1)
   \   00000092   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD002             BEQ.N    ??aci_att_read_by_group_type_req_2
    579              return status;
   \   0000009A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000009E   0xE000             B.N      ??aci_att_read_by_group_type_req_1
    580            }
    581            return BLE_STATUS_SUCCESS;
   \                     ??aci_att_read_by_group_type_req_2: (+1)
   \   000000A0   0x2000             MOVS     R0,#+0
   \                     ??aci_att_read_by_group_type_req_1: (+1)
   \   000000A2   0xB048             ADD      SP,SP,#+288
   \   000000A4   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    582          }

   \                                 In section .text, align 2, keep-with-next
    583          tBleStatus aci_att_prepare_write_req(uint16_t Connection_Handle,
    584                                               uint16_t Attr_Handle,
    585                                               uint16_t Val_Offset,
    586                                               uint8_t Attribute_Val_Length,
    587                                               uint8_t Attribute_Val[])
    588          {
   \                     aci_att_prepare_write_req: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB0C8             SUB      SP,SP,#+288
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   \   0000000E   0xF8DD 0x8140      LDR      R8,[SP, #+320]
    589            struct hci_request rq;
    590            uint8_t cmd_buffer[258];
    591            aci_att_prepare_write_req_cp0 *cp0 = (aci_att_prepare_write_req_cp0*)(cmd_buffer);
   \   00000012   0xF10D 0x091C      ADD      R9,SP,#+28
    592            tBleStatus status = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0000      STRB     R0,[SP, #+0]
    593            uint8_t index_input = 0;
   \   0000001C   0xF05F 0x0A00      MOVS     R10,#+0
    594            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000020   0xF8A9 0x4000      STRH     R4,[R9, #+0]
    595            index_input += 2;
   \   00000024   0xF11A 0x0A02      ADDS     R10,R10,#+2
    596            cp0->Attr_Handle = htob(Attr_Handle, 2);
   \   00000028   0xF8A9 0x5002      STRH     R5,[R9, #+2]
    597            index_input += 2;
   \   0000002C   0xF11A 0x0A02      ADDS     R10,R10,#+2
    598            cp0->Val_Offset = htob(Val_Offset, 2);
   \   00000030   0xF8A9 0x6004      STRH     R6,[R9, #+4]
    599            index_input += 2;
   \   00000034   0xF11A 0x0A02      ADDS     R10,R10,#+2
    600            cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
   \   00000038   0xF889 0x7006      STRB     R7,[R9, #+6]
    601            index_input += 1;
   \   0000003C   0xF11A 0x0A01      ADDS     R10,R10,#+1
    602            Osal_MemCpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length);
   \   00000040   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000042   0x003A             MOVS     R2,R7
   \   00000044   0x4641             MOV      R1,R8
   \   00000046   0xF119 0x0007      ADDS     R0,R9,#+7
   \   0000004A   0x.... 0x....      BL       Osal_MemCpy
    603            index_input += Attribute_Val_Length;
   \   0000004E   0xEB17 0x0A0A      ADDS     R10,R7,R10
    604            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000052   0x2218             MOVS     R2,#+24
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0xA801             ADD      R0,SP,#+4
   \   00000058   0x.... 0x....      BL       Osal_MemSet
    605            rq.ogf = 0x3f;
   \   0000005C   0x203F             MOVS     R0,#+63
   \   0000005E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    606            rq.ocf = 0x110;
   \   00000062   0xF44F 0x7088      MOV      R0,#+272
   \   00000066   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    607            rq.event = 0x0F;
   \   0000006A   0x200F             MOVS     R0,#+15
   \   0000006C   0x9002             STR      R0,[SP, #+8]
    608            rq.cparam = cmd_buffer;
   \   0000006E   0xA807             ADD      R0,SP,#+28
   \   00000070   0x9003             STR      R0,[SP, #+12]
    609            rq.clen = index_input;
   \   00000072   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000076   0xF8CD 0xA010      STR      R10,[SP, #+16]
    610            rq.rparam = &status;
   \   0000007A   0x4668             MOV      R0,SP
   \   0000007C   0x9005             STR      R0,[SP, #+20]
    611            rq.rlen = 1;
   \   0000007E   0x2001             MOVS     R0,#+1
   \   00000080   0x9006             STR      R0,[SP, #+24]
    612            if (hci_send_req(&rq, FALSE) < 0)
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0xA801             ADD      R0,SP,#+4
   \   00000086   0x.... 0x....      BL       hci_send_req
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD501             BPL.N    ??aci_att_prepare_write_req_0
    613              return BLE_STATUS_TIMEOUT;
   \   0000008E   0x20FF             MOVS     R0,#+255
   \   00000090   0xE007             B.N      ??aci_att_prepare_write_req_1
    614            if (status) {
   \                     ??aci_att_prepare_write_req_0: (+1)
   \   00000092   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD002             BEQ.N    ??aci_att_prepare_write_req_2
    615              return status;
   \   0000009A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000009E   0xE000             B.N      ??aci_att_prepare_write_req_1
    616            }
    617            return BLE_STATUS_SUCCESS;
   \                     ??aci_att_prepare_write_req_2: (+1)
   \   000000A0   0x2000             MOVS     R0,#+0
   \                     ??aci_att_prepare_write_req_1: (+1)
   \   000000A2   0xB048             ADD      SP,SP,#+288
   \   000000A4   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    618          }

   \                                 In section .text, align 2, keep-with-next
    619          tBleStatus aci_att_execute_write_req(uint16_t Connection_Handle,
    620                                               uint8_t Execute)
    621          {
   \                     aci_att_execute_write_req: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB0C9             SUB      SP,SP,#+292
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    622            struct hci_request rq;
    623            uint8_t cmd_buffer[258];
    624            aci_att_execute_write_req_cp0 *cp0 = (aci_att_execute_write_req_cp0*)(cmd_buffer);
   \   00000008   0xAE07             ADD      R6,SP,#+28
    625            tBleStatus status = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    626            uint8_t index_input = 0;
   \   00000010   0x2700             MOVS     R7,#+0
    627            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000012   0x8034             STRH     R4,[R6, #+0]
    628            index_input += 2;
   \   00000014   0x1CBF             ADDS     R7,R7,#+2
    629            cp0->Execute = htob(Execute, 1);
   \   00000016   0x70B5             STRB     R5,[R6, #+2]
    630            index_input += 1;
   \   00000018   0x1C7F             ADDS     R7,R7,#+1
    631            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000001A   0x2218             MOVS     R2,#+24
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0xA801             ADD      R0,SP,#+4
   \   00000020   0x.... 0x....      BL       Osal_MemSet
    632            rq.ogf = 0x3f;
   \   00000024   0x203F             MOVS     R0,#+63
   \   00000026   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    633            rq.ocf = 0x111;
   \   0000002A   0xF240 0x1011      MOVW     R0,#+273
   \   0000002E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    634            rq.event = 0x0F;
   \   00000032   0x200F             MOVS     R0,#+15
   \   00000034   0x9002             STR      R0,[SP, #+8]
    635            rq.cparam = cmd_buffer;
   \   00000036   0xA807             ADD      R0,SP,#+28
   \   00000038   0x9003             STR      R0,[SP, #+12]
    636            rq.clen = index_input;
   \   0000003A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000003C   0x9704             STR      R7,[SP, #+16]
    637            rq.rparam = &status;
   \   0000003E   0x4668             MOV      R0,SP
   \   00000040   0x9005             STR      R0,[SP, #+20]
    638            rq.rlen = 1;
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x9006             STR      R0,[SP, #+24]
    639            if (hci_send_req(&rq, FALSE) < 0)
   \   00000046   0x2100             MOVS     R1,#+0
   \   00000048   0xA801             ADD      R0,SP,#+4
   \   0000004A   0x.... 0x....      BL       hci_send_req
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD501             BPL.N    ??aci_att_execute_write_req_0
    640              return BLE_STATUS_TIMEOUT;
   \   00000052   0x20FF             MOVS     R0,#+255
   \   00000054   0xE007             B.N      ??aci_att_execute_write_req_1
    641            if (status) {
   \                     ??aci_att_execute_write_req_0: (+1)
   \   00000056   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD002             BEQ.N    ??aci_att_execute_write_req_2
    642              return status;
   \   0000005E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000062   0xE000             B.N      ??aci_att_execute_write_req_1
    643            }
    644            return BLE_STATUS_SUCCESS;
   \                     ??aci_att_execute_write_req_2: (+1)
   \   00000064   0x2000             MOVS     R0,#+0
   \                     ??aci_att_execute_write_req_1: (+1)
   \   00000066   0xB049             ADD      SP,SP,#+292
   \   00000068   0xBDF0             POP      {R4-R7,PC}       ;; return
    645          }

   \                                 In section .text, align 2, keep-with-next
    646          tBleStatus aci_gatt_disc_all_primary_services(uint16_t Connection_Handle)
    647          {
   \                     aci_gatt_disc_all_primary_services: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0C8             SUB      SP,SP,#+288
   \   00000004   0x0004             MOVS     R4,R0
    648            struct hci_request rq;
    649            uint8_t cmd_buffer[258];
    650            aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
   \   00000006   0xAD07             ADD      R5,SP,#+28
    651            tBleStatus status = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    652            uint8_t index_input = 0;
   \   0000000E   0x2600             MOVS     R6,#+0
    653            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000010   0x802C             STRH     R4,[R5, #+0]
    654            index_input += 2;
   \   00000012   0x1CB6             ADDS     R6,R6,#+2
    655            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000014   0x2218             MOVS     R2,#+24
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0xA801             ADD      R0,SP,#+4
   \   0000001A   0x.... 0x....      BL       Osal_MemSet
    656            rq.ogf = 0x3f;
   \   0000001E   0x203F             MOVS     R0,#+63
   \   00000020   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    657            rq.ocf = 0x112;
   \   00000024   0xF44F 0x7089      MOV      R0,#+274
   \   00000028   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    658            rq.event = 0x0F;
   \   0000002C   0x200F             MOVS     R0,#+15
   \   0000002E   0x9002             STR      R0,[SP, #+8]
    659            rq.cparam = cmd_buffer;
   \   00000030   0xA807             ADD      R0,SP,#+28
   \   00000032   0x9003             STR      R0,[SP, #+12]
    660            rq.clen = index_input;
   \   00000034   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000036   0x9604             STR      R6,[SP, #+16]
    661            rq.rparam = &status;
   \   00000038   0x4668             MOV      R0,SP
   \   0000003A   0x9005             STR      R0,[SP, #+20]
    662            rq.rlen = 1;
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x9006             STR      R0,[SP, #+24]
    663            if (hci_send_req(&rq, FALSE) < 0)
   \   00000040   0x2100             MOVS     R1,#+0
   \   00000042   0xA801             ADD      R0,SP,#+4
   \   00000044   0x.... 0x....      BL       hci_send_req
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD501             BPL.N    ??aci_gatt_disc_all_primary_services_0
    664              return BLE_STATUS_TIMEOUT;
   \   0000004C   0x20FF             MOVS     R0,#+255
   \   0000004E   0xE007             B.N      ??aci_gatt_disc_all_primary_services_1
    665            if (status) {
   \                     ??aci_gatt_disc_all_primary_services_0: (+1)
   \   00000050   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD002             BEQ.N    ??aci_gatt_disc_all_primary_services_2
    666              return status;
   \   00000058   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000005C   0xE000             B.N      ??aci_gatt_disc_all_primary_services_1
    667            }
    668            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_disc_all_primary_services_2: (+1)
   \   0000005E   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_disc_all_primary_services_1: (+1)
   \   00000060   0xB048             ADD      SP,SP,#+288
   \   00000062   0xBD70             POP      {R4-R6,PC}       ;; return
    669          }

   \                                 In section .text, align 2, keep-with-next
    670          tBleStatus aci_gatt_disc_primary_service_by_uuid(uint16_t Connection_Handle,
    671                                                           uint8_t UUID_Type,
    672                                                           UUID_t *UUID)
    673          {
   \                     aci_gatt_disc_primary_service_by_uuid: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB0C8             SUB      SP,SP,#+288
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
    674            struct hci_request rq;
    675            uint8_t cmd_buffer[258];
    676            aci_gatt_disc_primary_service_by_uuid_cp0 *cp0 = (aci_gatt_disc_primary_service_by_uuid_cp0*)(cmd_buffer);
   \   0000000C   0xAF07             ADD      R7,SP,#+28
    677            tBleStatus status = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF88D 0x0000      STRB     R0,[SP, #+0]
    678            uint8_t index_input = 0;
   \   00000014   0xF05F 0x0800      MOVS     R8,#+0
    679            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000018   0x803C             STRH     R4,[R7, #+0]
    680            index_input += 2;
   \   0000001A   0xF118 0x0802      ADDS     R8,R8,#+2
    681            cp0->UUID_Type = htob(UUID_Type, 1);
   \   0000001E   0x70BD             STRB     R5,[R7, #+2]
    682            index_input += 1;
   \   00000020   0xF118 0x0801      ADDS     R8,R8,#+1
    683            Osal_MemCpy((void *) &cp0->UUID, (const void *) UUID, UUID_Type);
   \   00000024   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000026   0x002A             MOVS     R2,R5
   \   00000028   0x0031             MOVS     R1,R6
   \   0000002A   0x1CF8             ADDS     R0,R7,#+3
   \   0000002C   0x.... 0x....      BL       Osal_MemCpy
    684            index_input += 16;
   \   00000030   0xF118 0x0810      ADDS     R8,R8,#+16
    685            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000034   0x2218             MOVS     R2,#+24
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0xA801             ADD      R0,SP,#+4
   \   0000003A   0x.... 0x....      BL       Osal_MemSet
    686            rq.ogf = 0x3f;
   \   0000003E   0x203F             MOVS     R0,#+63
   \   00000040   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    687            rq.ocf = 0x113;
   \   00000044   0xF240 0x1013      MOVW     R0,#+275
   \   00000048   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    688            rq.event = 0x0F;
   \   0000004C   0x200F             MOVS     R0,#+15
   \   0000004E   0x9002             STR      R0,[SP, #+8]
    689            rq.cparam = cmd_buffer;
   \   00000050   0xA807             ADD      R0,SP,#+28
   \   00000052   0x9003             STR      R0,[SP, #+12]
    690            rq.clen = index_input;
   \   00000054   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000058   0xF8CD 0x8010      STR      R8,[SP, #+16]
    691            rq.rparam = &status;
   \   0000005C   0x4668             MOV      R0,SP
   \   0000005E   0x9005             STR      R0,[SP, #+20]
    692            rq.rlen = 1;
   \   00000060   0x2001             MOVS     R0,#+1
   \   00000062   0x9006             STR      R0,[SP, #+24]
    693            if (hci_send_req(&rq, FALSE) < 0)
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0xA801             ADD      R0,SP,#+4
   \   00000068   0x.... 0x....      BL       hci_send_req
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD501             BPL.N    ??aci_gatt_disc_primary_service_by_uuid_0
    694              return BLE_STATUS_TIMEOUT;
   \   00000070   0x20FF             MOVS     R0,#+255
   \   00000072   0xE007             B.N      ??aci_gatt_disc_primary_service_by_uuid_1
    695            if (status) {
   \                     ??aci_gatt_disc_primary_service_by_uuid_0: (+1)
   \   00000074   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD002             BEQ.N    ??aci_gatt_disc_primary_service_by_uuid_2
    696              return status;
   \   0000007C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000080   0xE000             B.N      ??aci_gatt_disc_primary_service_by_uuid_1
    697            }
    698            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_disc_primary_service_by_uuid_2: (+1)
   \   00000082   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_disc_primary_service_by_uuid_1: (+1)
   \   00000084   0xB048             ADD      SP,SP,#+288
   \   00000086   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    699          }

   \                                 In section .text, align 2, keep-with-next
    700          tBleStatus aci_gatt_find_included_services(uint16_t Connection_Handle,
    701                                                     uint16_t Start_Handle,
    702                                                     uint16_t End_Handle)
    703          {
   \                     aci_gatt_find_included_services: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB0C8             SUB      SP,SP,#+288
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
    704            struct hci_request rq;
    705            uint8_t cmd_buffer[258];
    706            aci_gatt_find_included_services_cp0 *cp0 = (aci_gatt_find_included_services_cp0*)(cmd_buffer);
   \   0000000C   0xAF07             ADD      R7,SP,#+28
    707            tBleStatus status = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF88D 0x0000      STRB     R0,[SP, #+0]
    708            uint8_t index_input = 0;
   \   00000014   0xF05F 0x0800      MOVS     R8,#+0
    709            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000018   0x803C             STRH     R4,[R7, #+0]
    710            index_input += 2;
   \   0000001A   0xF118 0x0802      ADDS     R8,R8,#+2
    711            cp0->Start_Handle = htob(Start_Handle, 2);
   \   0000001E   0x807D             STRH     R5,[R7, #+2]
    712            index_input += 2;
   \   00000020   0xF118 0x0802      ADDS     R8,R8,#+2
    713            cp0->End_Handle = htob(End_Handle, 2);
   \   00000024   0x80BE             STRH     R6,[R7, #+4]
    714            index_input += 2;
   \   00000026   0xF118 0x0802      ADDS     R8,R8,#+2
    715            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000002A   0x2218             MOVS     R2,#+24
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0xA801             ADD      R0,SP,#+4
   \   00000030   0x.... 0x....      BL       Osal_MemSet
    716            rq.ogf = 0x3f;
   \   00000034   0x203F             MOVS     R0,#+63
   \   00000036   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    717            rq.ocf = 0x114;
   \   0000003A   0xF44F 0x708A      MOV      R0,#+276
   \   0000003E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    718            rq.event = 0x0F;
   \   00000042   0x200F             MOVS     R0,#+15
   \   00000044   0x9002             STR      R0,[SP, #+8]
    719            rq.cparam = cmd_buffer;
   \   00000046   0xA807             ADD      R0,SP,#+28
   \   00000048   0x9003             STR      R0,[SP, #+12]
    720            rq.clen = index_input;
   \   0000004A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000004E   0xF8CD 0x8010      STR      R8,[SP, #+16]
    721            rq.rparam = &status;
   \   00000052   0x4668             MOV      R0,SP
   \   00000054   0x9005             STR      R0,[SP, #+20]
    722            rq.rlen = 1;
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x9006             STR      R0,[SP, #+24]
    723            if (hci_send_req(&rq, FALSE) < 0)
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0xA801             ADD      R0,SP,#+4
   \   0000005E   0x.... 0x....      BL       hci_send_req
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD501             BPL.N    ??aci_gatt_find_included_services_0
    724              return BLE_STATUS_TIMEOUT;
   \   00000066   0x20FF             MOVS     R0,#+255
   \   00000068   0xE007             B.N      ??aci_gatt_find_included_services_1
    725            if (status) {
   \                     ??aci_gatt_find_included_services_0: (+1)
   \   0000006A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD002             BEQ.N    ??aci_gatt_find_included_services_2
    726              return status;
   \   00000072   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000076   0xE000             B.N      ??aci_gatt_find_included_services_1
    727            }
    728            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_find_included_services_2: (+1)
   \   00000078   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_find_included_services_1: (+1)
   \   0000007A   0xB048             ADD      SP,SP,#+288
   \   0000007C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    729          }

   \                                 In section .text, align 2, keep-with-next
    730          tBleStatus aci_gatt_disc_all_char_of_service(uint16_t Connection_Handle,
    731                                                       uint16_t Start_Handle,
    732                                                       uint16_t End_Handle)
    733          {
   \                     aci_gatt_disc_all_char_of_service: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB0C8             SUB      SP,SP,#+288
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
    734            struct hci_request rq;
    735            uint8_t cmd_buffer[258];
    736            aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
   \   0000000C   0xAF07             ADD      R7,SP,#+28
    737            tBleStatus status = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF88D 0x0000      STRB     R0,[SP, #+0]
    738            uint8_t index_input = 0;
   \   00000014   0xF05F 0x0800      MOVS     R8,#+0
    739            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000018   0x803C             STRH     R4,[R7, #+0]
    740            index_input += 2;
   \   0000001A   0xF118 0x0802      ADDS     R8,R8,#+2
    741            cp0->Start_Handle = htob(Start_Handle, 2);
   \   0000001E   0x807D             STRH     R5,[R7, #+2]
    742            index_input += 2;
   \   00000020   0xF118 0x0802      ADDS     R8,R8,#+2
    743            cp0->End_Handle = htob(End_Handle, 2);
   \   00000024   0x80BE             STRH     R6,[R7, #+4]
    744            index_input += 2;
   \   00000026   0xF118 0x0802      ADDS     R8,R8,#+2
    745            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000002A   0x2218             MOVS     R2,#+24
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0xA801             ADD      R0,SP,#+4
   \   00000030   0x.... 0x....      BL       Osal_MemSet
    746            rq.ogf = 0x3f;
   \   00000034   0x203F             MOVS     R0,#+63
   \   00000036   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    747            rq.ocf = 0x115;
   \   0000003A   0xF240 0x1015      MOVW     R0,#+277
   \   0000003E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    748            rq.event = 0x0F;
   \   00000042   0x200F             MOVS     R0,#+15
   \   00000044   0x9002             STR      R0,[SP, #+8]
    749            rq.cparam = cmd_buffer;
   \   00000046   0xA807             ADD      R0,SP,#+28
   \   00000048   0x9003             STR      R0,[SP, #+12]
    750            rq.clen = index_input;
   \   0000004A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000004E   0xF8CD 0x8010      STR      R8,[SP, #+16]
    751            rq.rparam = &status;
   \   00000052   0x4668             MOV      R0,SP
   \   00000054   0x9005             STR      R0,[SP, #+20]
    752            rq.rlen = 1;
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x9006             STR      R0,[SP, #+24]
    753            if (hci_send_req(&rq, FALSE) < 0)
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0xA801             ADD      R0,SP,#+4
   \   0000005E   0x.... 0x....      BL       hci_send_req
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD501             BPL.N    ??aci_gatt_disc_all_char_of_service_0
    754              return BLE_STATUS_TIMEOUT;
   \   00000066   0x20FF             MOVS     R0,#+255
   \   00000068   0xE007             B.N      ??aci_gatt_disc_all_char_of_service_1
    755            if (status) {
   \                     ??aci_gatt_disc_all_char_of_service_0: (+1)
   \   0000006A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD002             BEQ.N    ??aci_gatt_disc_all_char_of_service_2
    756              return status;
   \   00000072   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000076   0xE000             B.N      ??aci_gatt_disc_all_char_of_service_1
    757            }
    758            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_disc_all_char_of_service_2: (+1)
   \   00000078   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_disc_all_char_of_service_1: (+1)
   \   0000007A   0xB048             ADD      SP,SP,#+288
   \   0000007C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    759          }

   \                                 In section .text, align 2, keep-with-next
    760          tBleStatus aci_gatt_disc_char_by_uuid(uint16_t Connection_Handle,
    761                                                uint16_t Start_Handle,
    762                                                uint16_t End_Handle,
    763                                                uint8_t UUID_Type,
    764                                                UUID_t *UUID)
    765          {
   \                     aci_gatt_disc_char_by_uuid: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB0C8             SUB      SP,SP,#+288
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   \   0000000E   0xF8DD 0x8140      LDR      R8,[SP, #+320]
    766            struct hci_request rq;
    767            uint8_t cmd_buffer[258];
    768            aci_gatt_disc_char_by_uuid_cp0 *cp0 = (aci_gatt_disc_char_by_uuid_cp0*)(cmd_buffer);
   \   00000012   0xF10D 0x091C      ADD      R9,SP,#+28
    769            tBleStatus status = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0000      STRB     R0,[SP, #+0]
    770            uint8_t index_input = 0;
   \   0000001C   0xF05F 0x0A00      MOVS     R10,#+0
    771            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000020   0xF8A9 0x4000      STRH     R4,[R9, #+0]
    772            index_input += 2;
   \   00000024   0xF11A 0x0A02      ADDS     R10,R10,#+2
    773            cp0->Start_Handle = htob(Start_Handle, 2);
   \   00000028   0xF8A9 0x5002      STRH     R5,[R9, #+2]
    774            index_input += 2;
   \   0000002C   0xF11A 0x0A02      ADDS     R10,R10,#+2
    775            cp0->End_Handle = htob(End_Handle, 2);
   \   00000030   0xF8A9 0x6004      STRH     R6,[R9, #+4]
    776            index_input += 2;
   \   00000034   0xF11A 0x0A02      ADDS     R10,R10,#+2
    777            cp0->UUID_Type = htob(UUID_Type, 1);
   \   00000038   0xF889 0x7006      STRB     R7,[R9, #+6]
    778            index_input += 1;
   \   0000003C   0xF11A 0x0A01      ADDS     R10,R10,#+1
    779            Osal_MemCpy((void *) &cp0->UUID, (const void *) UUID, UUID_Type);
   \   00000040   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000042   0x003A             MOVS     R2,R7
   \   00000044   0x4641             MOV      R1,R8
   \   00000046   0xF119 0x0007      ADDS     R0,R9,#+7
   \   0000004A   0x.... 0x....      BL       Osal_MemCpy
    780            index_input += 16;
   \   0000004E   0xF11A 0x0A10      ADDS     R10,R10,#+16
    781            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000052   0x2218             MOVS     R2,#+24
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0xA801             ADD      R0,SP,#+4
   \   00000058   0x.... 0x....      BL       Osal_MemSet
    782            rq.ogf = 0x3f;
   \   0000005C   0x203F             MOVS     R0,#+63
   \   0000005E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    783            rq.ocf = 0x116;
   \   00000062   0xF44F 0x708B      MOV      R0,#+278
   \   00000066   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    784            rq.event = 0x0F;
   \   0000006A   0x200F             MOVS     R0,#+15
   \   0000006C   0x9002             STR      R0,[SP, #+8]
    785            rq.cparam = cmd_buffer;
   \   0000006E   0xA807             ADD      R0,SP,#+28
   \   00000070   0x9003             STR      R0,[SP, #+12]
    786            rq.clen = index_input;
   \   00000072   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000076   0xF8CD 0xA010      STR      R10,[SP, #+16]
    787            rq.rparam = &status;
   \   0000007A   0x4668             MOV      R0,SP
   \   0000007C   0x9005             STR      R0,[SP, #+20]
    788            rq.rlen = 1;
   \   0000007E   0x2001             MOVS     R0,#+1
   \   00000080   0x9006             STR      R0,[SP, #+24]
    789            if (hci_send_req(&rq, FALSE) < 0)
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0xA801             ADD      R0,SP,#+4
   \   00000086   0x.... 0x....      BL       hci_send_req
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD501             BPL.N    ??aci_gatt_disc_char_by_uuid_0
    790              return BLE_STATUS_TIMEOUT;
   \   0000008E   0x20FF             MOVS     R0,#+255
   \   00000090   0xE007             B.N      ??aci_gatt_disc_char_by_uuid_1
    791            if (status) {
   \                     ??aci_gatt_disc_char_by_uuid_0: (+1)
   \   00000092   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD002             BEQ.N    ??aci_gatt_disc_char_by_uuid_2
    792              return status;
   \   0000009A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000009E   0xE000             B.N      ??aci_gatt_disc_char_by_uuid_1
    793            }
    794            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_disc_char_by_uuid_2: (+1)
   \   000000A0   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_disc_char_by_uuid_1: (+1)
   \   000000A2   0xB048             ADD      SP,SP,#+288
   \   000000A4   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    795          }

   \                                 In section .text, align 2, keep-with-next
    796          tBleStatus aci_gatt_disc_all_char_desc(uint16_t Connection_Handle,
    797                                                 uint16_t Char_Handle,
    798                                                 uint16_t End_Handle)
    799          {
   \                     aci_gatt_disc_all_char_desc: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB0C8             SUB      SP,SP,#+288
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
    800            struct hci_request rq;
    801            uint8_t cmd_buffer[258];
    802            aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
   \   0000000C   0xAF07             ADD      R7,SP,#+28
    803            tBleStatus status = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF88D 0x0000      STRB     R0,[SP, #+0]
    804            uint8_t index_input = 0;
   \   00000014   0xF05F 0x0800      MOVS     R8,#+0
    805            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000018   0x803C             STRH     R4,[R7, #+0]
    806            index_input += 2;
   \   0000001A   0xF118 0x0802      ADDS     R8,R8,#+2
    807            cp0->Char_Handle = htob(Char_Handle, 2);
   \   0000001E   0x807D             STRH     R5,[R7, #+2]
    808            index_input += 2;
   \   00000020   0xF118 0x0802      ADDS     R8,R8,#+2
    809            cp0->End_Handle = htob(End_Handle, 2);
   \   00000024   0x80BE             STRH     R6,[R7, #+4]
    810            index_input += 2;
   \   00000026   0xF118 0x0802      ADDS     R8,R8,#+2
    811            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000002A   0x2218             MOVS     R2,#+24
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0xA801             ADD      R0,SP,#+4
   \   00000030   0x.... 0x....      BL       Osal_MemSet
    812            rq.ogf = 0x3f;
   \   00000034   0x203F             MOVS     R0,#+63
   \   00000036   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    813            rq.ocf = 0x117;
   \   0000003A   0xF240 0x1017      MOVW     R0,#+279
   \   0000003E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    814            rq.event = 0x0F;
   \   00000042   0x200F             MOVS     R0,#+15
   \   00000044   0x9002             STR      R0,[SP, #+8]
    815            rq.cparam = cmd_buffer;
   \   00000046   0xA807             ADD      R0,SP,#+28
   \   00000048   0x9003             STR      R0,[SP, #+12]
    816            rq.clen = index_input;
   \   0000004A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000004E   0xF8CD 0x8010      STR      R8,[SP, #+16]
    817            rq.rparam = &status;
   \   00000052   0x4668             MOV      R0,SP
   \   00000054   0x9005             STR      R0,[SP, #+20]
    818            rq.rlen = 1;
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x9006             STR      R0,[SP, #+24]
    819            if (hci_send_req(&rq, FALSE) < 0)
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0xA801             ADD      R0,SP,#+4
   \   0000005E   0x.... 0x....      BL       hci_send_req
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD501             BPL.N    ??aci_gatt_disc_all_char_desc_0
    820              return BLE_STATUS_TIMEOUT;
   \   00000066   0x20FF             MOVS     R0,#+255
   \   00000068   0xE007             B.N      ??aci_gatt_disc_all_char_desc_1
    821            if (status) {
   \                     ??aci_gatt_disc_all_char_desc_0: (+1)
   \   0000006A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD002             BEQ.N    ??aci_gatt_disc_all_char_desc_2
    822              return status;
   \   00000072   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000076   0xE000             B.N      ??aci_gatt_disc_all_char_desc_1
    823            }
    824            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_disc_all_char_desc_2: (+1)
   \   00000078   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_disc_all_char_desc_1: (+1)
   \   0000007A   0xB048             ADD      SP,SP,#+288
   \   0000007C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    825          }

   \                                 In section .text, align 2, keep-with-next
    826          tBleStatus aci_gatt_read_char_value(uint16_t Connection_Handle,
    827                                              uint16_t Attr_Handle)
    828          {
   \                     aci_gatt_read_char_value: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB0C9             SUB      SP,SP,#+292
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    829            struct hci_request rq;
    830            uint8_t cmd_buffer[258];
    831            aci_gatt_read_char_value_cp0 *cp0 = (aci_gatt_read_char_value_cp0*)(cmd_buffer);
   \   00000008   0xAE07             ADD      R6,SP,#+28
    832            tBleStatus status = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    833            uint8_t index_input = 0;
   \   00000010   0x2700             MOVS     R7,#+0
    834            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000012   0x8034             STRH     R4,[R6, #+0]
    835            index_input += 2;
   \   00000014   0x1CBF             ADDS     R7,R7,#+2
    836            cp0->Attr_Handle = htob(Attr_Handle, 2);
   \   00000016   0x8075             STRH     R5,[R6, #+2]
    837            index_input += 2;
   \   00000018   0x1CBF             ADDS     R7,R7,#+2
    838            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000001A   0x2218             MOVS     R2,#+24
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0xA801             ADD      R0,SP,#+4
   \   00000020   0x.... 0x....      BL       Osal_MemSet
    839            rq.ogf = 0x3f;
   \   00000024   0x203F             MOVS     R0,#+63
   \   00000026   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    840            rq.ocf = 0x118;
   \   0000002A   0xF44F 0x708C      MOV      R0,#+280
   \   0000002E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    841            rq.event = 0x0F;
   \   00000032   0x200F             MOVS     R0,#+15
   \   00000034   0x9002             STR      R0,[SP, #+8]
    842            rq.cparam = cmd_buffer;
   \   00000036   0xA807             ADD      R0,SP,#+28
   \   00000038   0x9003             STR      R0,[SP, #+12]
    843            rq.clen = index_input;
   \   0000003A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000003C   0x9704             STR      R7,[SP, #+16]
    844            rq.rparam = &status;
   \   0000003E   0x4668             MOV      R0,SP
   \   00000040   0x9005             STR      R0,[SP, #+20]
    845            rq.rlen = 1;
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x9006             STR      R0,[SP, #+24]
    846            if (hci_send_req(&rq, FALSE) < 0)
   \   00000046   0x2100             MOVS     R1,#+0
   \   00000048   0xA801             ADD      R0,SP,#+4
   \   0000004A   0x.... 0x....      BL       hci_send_req
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD501             BPL.N    ??aci_gatt_read_char_value_0
    847              return BLE_STATUS_TIMEOUT;
   \   00000052   0x20FF             MOVS     R0,#+255
   \   00000054   0xE007             B.N      ??aci_gatt_read_char_value_1
    848            if (status) {
   \                     ??aci_gatt_read_char_value_0: (+1)
   \   00000056   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD002             BEQ.N    ??aci_gatt_read_char_value_2
    849              return status;
   \   0000005E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000062   0xE000             B.N      ??aci_gatt_read_char_value_1
    850            }
    851            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_read_char_value_2: (+1)
   \   00000064   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_read_char_value_1: (+1)
   \   00000066   0xB049             ADD      SP,SP,#+292
   \   00000068   0xBDF0             POP      {R4-R7,PC}       ;; return
    852          }

   \                                 In section .text, align 2, keep-with-next
    853          tBleStatus aci_gatt_read_using_char_uuid(uint16_t Connection_Handle,
    854                                                   uint16_t Start_Handle,
    855                                                   uint16_t End_Handle,
    856                                                   uint8_t UUID_Type,
    857                                                   UUID_t *UUID)
    858          {
   \                     aci_gatt_read_using_char_uuid: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB0C8             SUB      SP,SP,#+288
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   \   0000000E   0xF8DD 0x8140      LDR      R8,[SP, #+320]
    859            struct hci_request rq;
    860            uint8_t cmd_buffer[258];
    861            aci_gatt_read_using_char_uuid_cp0 *cp0 = (aci_gatt_read_using_char_uuid_cp0*)(cmd_buffer);
   \   00000012   0xF10D 0x091C      ADD      R9,SP,#+28
    862            tBleStatus status = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0000      STRB     R0,[SP, #+0]
    863            uint8_t index_input = 0;
   \   0000001C   0xF05F 0x0A00      MOVS     R10,#+0
    864            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000020   0xF8A9 0x4000      STRH     R4,[R9, #+0]
    865            index_input += 2;
   \   00000024   0xF11A 0x0A02      ADDS     R10,R10,#+2
    866            cp0->Start_Handle = htob(Start_Handle, 2);
   \   00000028   0xF8A9 0x5002      STRH     R5,[R9, #+2]
    867            index_input += 2;
   \   0000002C   0xF11A 0x0A02      ADDS     R10,R10,#+2
    868            cp0->End_Handle = htob(End_Handle, 2);
   \   00000030   0xF8A9 0x6004      STRH     R6,[R9, #+4]
    869            index_input += 2;
   \   00000034   0xF11A 0x0A02      ADDS     R10,R10,#+2
    870            cp0->UUID_Type = htob(UUID_Type, 1);
   \   00000038   0xF889 0x7006      STRB     R7,[R9, #+6]
    871            index_input += 1;
   \   0000003C   0xF11A 0x0A01      ADDS     R10,R10,#+1
    872            Osal_MemCpy((void *) &cp0->UUID, (const void *) UUID, UUID_Type);
   \   00000040   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000042   0x003A             MOVS     R2,R7
   \   00000044   0x4641             MOV      R1,R8
   \   00000046   0xF119 0x0007      ADDS     R0,R9,#+7
   \   0000004A   0x.... 0x....      BL       Osal_MemCpy
    873            index_input += 16;
   \   0000004E   0xF11A 0x0A10      ADDS     R10,R10,#+16
    874            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000052   0x2218             MOVS     R2,#+24
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0xA801             ADD      R0,SP,#+4
   \   00000058   0x.... 0x....      BL       Osal_MemSet
    875            rq.ogf = 0x3f;
   \   0000005C   0x203F             MOVS     R0,#+63
   \   0000005E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    876            rq.ocf = 0x119;
   \   00000062   0xF240 0x1019      MOVW     R0,#+281
   \   00000066   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    877            rq.event = 0x0F;
   \   0000006A   0x200F             MOVS     R0,#+15
   \   0000006C   0x9002             STR      R0,[SP, #+8]
    878            rq.cparam = cmd_buffer;
   \   0000006E   0xA807             ADD      R0,SP,#+28
   \   00000070   0x9003             STR      R0,[SP, #+12]
    879            rq.clen = index_input;
   \   00000072   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000076   0xF8CD 0xA010      STR      R10,[SP, #+16]
    880            rq.rparam = &status;
   \   0000007A   0x4668             MOV      R0,SP
   \   0000007C   0x9005             STR      R0,[SP, #+20]
    881            rq.rlen = 1;
   \   0000007E   0x2001             MOVS     R0,#+1
   \   00000080   0x9006             STR      R0,[SP, #+24]
    882            if (hci_send_req(&rq, FALSE) < 0)
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0xA801             ADD      R0,SP,#+4
   \   00000086   0x.... 0x....      BL       hci_send_req
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD501             BPL.N    ??aci_gatt_read_using_char_uuid_0
    883              return BLE_STATUS_TIMEOUT;
   \   0000008E   0x20FF             MOVS     R0,#+255
   \   00000090   0xE007             B.N      ??aci_gatt_read_using_char_uuid_1
    884            if (status) {
   \                     ??aci_gatt_read_using_char_uuid_0: (+1)
   \   00000092   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD002             BEQ.N    ??aci_gatt_read_using_char_uuid_2
    885              return status;
   \   0000009A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000009E   0xE000             B.N      ??aci_gatt_read_using_char_uuid_1
    886            }
    887            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_read_using_char_uuid_2: (+1)
   \   000000A0   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_read_using_char_uuid_1: (+1)
   \   000000A2   0xB048             ADD      SP,SP,#+288
   \   000000A4   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    888          }

   \                                 In section .text, align 2, keep-with-next
    889          tBleStatus aci_gatt_read_long_char_value(uint16_t Connection_Handle,
    890                                                   uint16_t Attr_Handle,
    891                                                   uint16_t Val_Offset)
    892          {
   \                     aci_gatt_read_long_char_value: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB0C8             SUB      SP,SP,#+288
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
    893            struct hci_request rq;
    894            uint8_t cmd_buffer[258];
    895            aci_gatt_read_long_char_value_cp0 *cp0 = (aci_gatt_read_long_char_value_cp0*)(cmd_buffer);
   \   0000000C   0xAF07             ADD      R7,SP,#+28
    896            tBleStatus status = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF88D 0x0000      STRB     R0,[SP, #+0]
    897            uint8_t index_input = 0;
   \   00000014   0xF05F 0x0800      MOVS     R8,#+0
    898            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000018   0x803C             STRH     R4,[R7, #+0]
    899            index_input += 2;
   \   0000001A   0xF118 0x0802      ADDS     R8,R8,#+2
    900            cp0->Attr_Handle = htob(Attr_Handle, 2);
   \   0000001E   0x807D             STRH     R5,[R7, #+2]
    901            index_input += 2;
   \   00000020   0xF118 0x0802      ADDS     R8,R8,#+2
    902            cp0->Val_Offset = htob(Val_Offset, 2);
   \   00000024   0x80BE             STRH     R6,[R7, #+4]
    903            index_input += 2;
   \   00000026   0xF118 0x0802      ADDS     R8,R8,#+2
    904            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000002A   0x2218             MOVS     R2,#+24
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0xA801             ADD      R0,SP,#+4
   \   00000030   0x.... 0x....      BL       Osal_MemSet
    905            rq.ogf = 0x3f;
   \   00000034   0x203F             MOVS     R0,#+63
   \   00000036   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    906            rq.ocf = 0x11a;
   \   0000003A   0xF44F 0x708D      MOV      R0,#+282
   \   0000003E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    907            rq.event = 0x0F;
   \   00000042   0x200F             MOVS     R0,#+15
   \   00000044   0x9002             STR      R0,[SP, #+8]
    908            rq.cparam = cmd_buffer;
   \   00000046   0xA807             ADD      R0,SP,#+28
   \   00000048   0x9003             STR      R0,[SP, #+12]
    909            rq.clen = index_input;
   \   0000004A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000004E   0xF8CD 0x8010      STR      R8,[SP, #+16]
    910            rq.rparam = &status;
   \   00000052   0x4668             MOV      R0,SP
   \   00000054   0x9005             STR      R0,[SP, #+20]
    911            rq.rlen = 1;
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x9006             STR      R0,[SP, #+24]
    912            if (hci_send_req(&rq, FALSE) < 0)
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0xA801             ADD      R0,SP,#+4
   \   0000005E   0x.... 0x....      BL       hci_send_req
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD501             BPL.N    ??aci_gatt_read_long_char_value_0
    913              return BLE_STATUS_TIMEOUT;
   \   00000066   0x20FF             MOVS     R0,#+255
   \   00000068   0xE007             B.N      ??aci_gatt_read_long_char_value_1
    914            if (status) {
   \                     ??aci_gatt_read_long_char_value_0: (+1)
   \   0000006A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD002             BEQ.N    ??aci_gatt_read_long_char_value_2
    915              return status;
   \   00000072   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000076   0xE000             B.N      ??aci_gatt_read_long_char_value_1
    916            }
    917            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_read_long_char_value_2: (+1)
   \   00000078   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_read_long_char_value_1: (+1)
   \   0000007A   0xB048             ADD      SP,SP,#+288
   \   0000007C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    918          }

   \                                 In section .text, align 2, keep-with-next
    919          tBleStatus aci_gatt_read_multiple_char_value(uint16_t Connection_Handle,
    920                                                       uint8_t Number_of_Handles,
    921                                                       Handle_Entry_t Handle_Entry[])
    922          {
   \                     aci_gatt_read_multiple_char_value: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB0C8             SUB      SP,SP,#+288
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
    923            struct hci_request rq;
    924            uint8_t cmd_buffer[258];
    925            aci_gatt_read_multiple_char_value_cp0 *cp0 = (aci_gatt_read_multiple_char_value_cp0*)(cmd_buffer);
   \   0000000C   0xAF07             ADD      R7,SP,#+28
    926            tBleStatus status = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF88D 0x0000      STRB     R0,[SP, #+0]
    927            uint8_t index_input = 0;
   \   00000014   0xF05F 0x0800      MOVS     R8,#+0
    928            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000018   0x803C             STRH     R4,[R7, #+0]
    929            index_input += 2;
   \   0000001A   0xF118 0x0802      ADDS     R8,R8,#+2
    930            cp0->Number_of_Handles = htob(Number_of_Handles, 1);
   \   0000001E   0x70BD             STRB     R5,[R7, #+2]
    931            index_input += 1;
   \   00000020   0xF118 0x0801      ADDS     R8,R8,#+1
    932            Osal_MemCpy((void *) &cp0->Handle_Entry, (const void *) Handle_Entry, Number_of_Handles);
   \   00000024   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000026   0x002A             MOVS     R2,R5
   \   00000028   0x0031             MOVS     R1,R6
   \   0000002A   0x1CF8             ADDS     R0,R7,#+3
   \   0000002C   0x.... 0x....      BL       Osal_MemCpy
    933            index_input += 2;
   \   00000030   0xF118 0x0802      ADDS     R8,R8,#+2
    934            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000034   0x2218             MOVS     R2,#+24
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0xA801             ADD      R0,SP,#+4
   \   0000003A   0x.... 0x....      BL       Osal_MemSet
    935            rq.ogf = 0x3f;
   \   0000003E   0x203F             MOVS     R0,#+63
   \   00000040   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    936            rq.ocf = 0x11b;
   \   00000044   0xF240 0x101B      MOVW     R0,#+283
   \   00000048   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    937            rq.event = 0x0F;
   \   0000004C   0x200F             MOVS     R0,#+15
   \   0000004E   0x9002             STR      R0,[SP, #+8]
    938            rq.cparam = cmd_buffer;
   \   00000050   0xA807             ADD      R0,SP,#+28
   \   00000052   0x9003             STR      R0,[SP, #+12]
    939            rq.clen = index_input;
   \   00000054   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000058   0xF8CD 0x8010      STR      R8,[SP, #+16]
    940            rq.rparam = &status;
   \   0000005C   0x4668             MOV      R0,SP
   \   0000005E   0x9005             STR      R0,[SP, #+20]
    941            rq.rlen = 1;
   \   00000060   0x2001             MOVS     R0,#+1
   \   00000062   0x9006             STR      R0,[SP, #+24]
    942            if (hci_send_req(&rq, FALSE) < 0)
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0xA801             ADD      R0,SP,#+4
   \   00000068   0x.... 0x....      BL       hci_send_req
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD501             BPL.N    ??aci_gatt_read_multiple_char_value_0
    943              return BLE_STATUS_TIMEOUT;
   \   00000070   0x20FF             MOVS     R0,#+255
   \   00000072   0xE007             B.N      ??aci_gatt_read_multiple_char_value_1
    944            if (status) {
   \                     ??aci_gatt_read_multiple_char_value_0: (+1)
   \   00000074   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD002             BEQ.N    ??aci_gatt_read_multiple_char_value_2
    945              return status;
   \   0000007C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000080   0xE000             B.N      ??aci_gatt_read_multiple_char_value_1
    946            }
    947            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_read_multiple_char_value_2: (+1)
   \   00000082   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_read_multiple_char_value_1: (+1)
   \   00000084   0xB048             ADD      SP,SP,#+288
   \   00000086   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    948          }

   \                                 In section .text, align 2, keep-with-next
    949          tBleStatus aci_gatt_write_char_value(uint16_t Connection_Handle,
    950                                               uint16_t Attr_Handle,
    951                                               uint8_t Attribute_Val_Length,
    952                                               uint8_t Attribute_Val[])
    953          {
   \                     aci_gatt_write_char_value: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB0C9             SUB      SP,SP,#+292
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
    954            struct hci_request rq;
    955            uint8_t cmd_buffer[258];
    956            aci_gatt_write_char_value_cp0 *cp0 = (aci_gatt_write_char_value_cp0*)(cmd_buffer);
   \   0000000E   0xF10D 0x081C      ADD      R8,SP,#+28
    957            tBleStatus status = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xF88D 0x0000      STRB     R0,[SP, #+0]
    958            uint8_t index_input = 0;
   \   00000018   0xF05F 0x0900      MOVS     R9,#+0
    959            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   0000001C   0xF8A8 0x4000      STRH     R4,[R8, #+0]
    960            index_input += 2;
   \   00000020   0xF119 0x0902      ADDS     R9,R9,#+2
    961            cp0->Attr_Handle = htob(Attr_Handle, 2);
   \   00000024   0xF8A8 0x5002      STRH     R5,[R8, #+2]
    962            index_input += 2;
   \   00000028   0xF119 0x0902      ADDS     R9,R9,#+2
    963            cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
   \   0000002C   0xF888 0x6004      STRB     R6,[R8, #+4]
    964            index_input += 1;
   \   00000030   0xF119 0x0901      ADDS     R9,R9,#+1
    965            Osal_MemCpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length);
   \   00000034   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000036   0x0032             MOVS     R2,R6
   \   00000038   0x0039             MOVS     R1,R7
   \   0000003A   0xF118 0x0005      ADDS     R0,R8,#+5
   \   0000003E   0x.... 0x....      BL       Osal_MemCpy
    966            index_input += Attribute_Val_Length;
   \   00000042   0xEB16 0x0909      ADDS     R9,R6,R9
    967            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000046   0x2218             MOVS     R2,#+24
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0xA801             ADD      R0,SP,#+4
   \   0000004C   0x.... 0x....      BL       Osal_MemSet
    968            rq.ogf = 0x3f;
   \   00000050   0x203F             MOVS     R0,#+63
   \   00000052   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    969            rq.ocf = 0x11c;
   \   00000056   0xF44F 0x708E      MOV      R0,#+284
   \   0000005A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    970            rq.event = 0x0F;
   \   0000005E   0x200F             MOVS     R0,#+15
   \   00000060   0x9002             STR      R0,[SP, #+8]
    971            rq.cparam = cmd_buffer;
   \   00000062   0xA807             ADD      R0,SP,#+28
   \   00000064   0x9003             STR      R0,[SP, #+12]
    972            rq.clen = index_input;
   \   00000066   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000006A   0xF8CD 0x9010      STR      R9,[SP, #+16]
    973            rq.rparam = &status;
   \   0000006E   0x4668             MOV      R0,SP
   \   00000070   0x9005             STR      R0,[SP, #+20]
    974            rq.rlen = 1;
   \   00000072   0x2001             MOVS     R0,#+1
   \   00000074   0x9006             STR      R0,[SP, #+24]
    975            if (hci_send_req(&rq, FALSE) < 0)
   \   00000076   0x2100             MOVS     R1,#+0
   \   00000078   0xA801             ADD      R0,SP,#+4
   \   0000007A   0x.... 0x....      BL       hci_send_req
   \   0000007E   0x2800             CMP      R0,#+0
   \   00000080   0xD501             BPL.N    ??aci_gatt_write_char_value_0
    976              return BLE_STATUS_TIMEOUT;
   \   00000082   0x20FF             MOVS     R0,#+255
   \   00000084   0xE007             B.N      ??aci_gatt_write_char_value_1
    977            if (status) {
   \                     ??aci_gatt_write_char_value_0: (+1)
   \   00000086   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD002             BEQ.N    ??aci_gatt_write_char_value_2
    978              return status;
   \   0000008E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000092   0xE000             B.N      ??aci_gatt_write_char_value_1
    979            }
    980            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_write_char_value_2: (+1)
   \   00000094   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_write_char_value_1: (+1)
   \   00000096   0xB049             ADD      SP,SP,#+292
   \   00000098   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    981          }

   \                                 In section .text, align 2, keep-with-next
    982          tBleStatus aci_gatt_write_long_char_value(uint16_t Connection_Handle,
    983                                                    uint16_t Attr_Handle,
    984                                                    uint16_t Val_Offset,
    985                                                    uint8_t Attribute_Val_Length,
    986                                                    uint8_t Attribute_Val[])
    987          {
   \                     aci_gatt_write_long_char_value: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB0C8             SUB      SP,SP,#+288
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   \   0000000E   0xF8DD 0x8140      LDR      R8,[SP, #+320]
    988            struct hci_request rq;
    989            uint8_t cmd_buffer[258];
    990            aci_gatt_write_long_char_value_cp0 *cp0 = (aci_gatt_write_long_char_value_cp0*)(cmd_buffer);
   \   00000012   0xF10D 0x091C      ADD      R9,SP,#+28
    991            tBleStatus status = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0000      STRB     R0,[SP, #+0]
    992            uint8_t index_input = 0;
   \   0000001C   0xF05F 0x0A00      MOVS     R10,#+0
    993            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000020   0xF8A9 0x4000      STRH     R4,[R9, #+0]
    994            index_input += 2;
   \   00000024   0xF11A 0x0A02      ADDS     R10,R10,#+2
    995            cp0->Attr_Handle = htob(Attr_Handle, 2);
   \   00000028   0xF8A9 0x5002      STRH     R5,[R9, #+2]
    996            index_input += 2;
   \   0000002C   0xF11A 0x0A02      ADDS     R10,R10,#+2
    997            cp0->Val_Offset = htob(Val_Offset, 2);
   \   00000030   0xF8A9 0x6004      STRH     R6,[R9, #+4]
    998            index_input += 2;
   \   00000034   0xF11A 0x0A02      ADDS     R10,R10,#+2
    999            cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
   \   00000038   0xF889 0x7006      STRB     R7,[R9, #+6]
   1000            index_input += 1;
   \   0000003C   0xF11A 0x0A01      ADDS     R10,R10,#+1
   1001            Osal_MemCpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length);
   \   00000040   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000042   0x003A             MOVS     R2,R7
   \   00000044   0x4641             MOV      R1,R8
   \   00000046   0xF119 0x0007      ADDS     R0,R9,#+7
   \   0000004A   0x.... 0x....      BL       Osal_MemCpy
   1002            index_input += Attribute_Val_Length;
   \   0000004E   0xEB17 0x0A0A      ADDS     R10,R7,R10
   1003            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000052   0x2218             MOVS     R2,#+24
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0xA801             ADD      R0,SP,#+4
   \   00000058   0x.... 0x....      BL       Osal_MemSet
   1004            rq.ogf = 0x3f;
   \   0000005C   0x203F             MOVS     R0,#+63
   \   0000005E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   1005            rq.ocf = 0x11d;
   \   00000062   0xF240 0x101D      MOVW     R0,#+285
   \   00000066   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1006            rq.event = 0x0F;
   \   0000006A   0x200F             MOVS     R0,#+15
   \   0000006C   0x9002             STR      R0,[SP, #+8]
   1007            rq.cparam = cmd_buffer;
   \   0000006E   0xA807             ADD      R0,SP,#+28
   \   00000070   0x9003             STR      R0,[SP, #+12]
   1008            rq.clen = index_input;
   \   00000072   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000076   0xF8CD 0xA010      STR      R10,[SP, #+16]
   1009            rq.rparam = &status;
   \   0000007A   0x4668             MOV      R0,SP
   \   0000007C   0x9005             STR      R0,[SP, #+20]
   1010            rq.rlen = 1;
   \   0000007E   0x2001             MOVS     R0,#+1
   \   00000080   0x9006             STR      R0,[SP, #+24]
   1011            if (hci_send_req(&rq, FALSE) < 0)
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0xA801             ADD      R0,SP,#+4
   \   00000086   0x.... 0x....      BL       hci_send_req
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD501             BPL.N    ??aci_gatt_write_long_char_value_0
   1012              return BLE_STATUS_TIMEOUT;
   \   0000008E   0x20FF             MOVS     R0,#+255
   \   00000090   0xE007             B.N      ??aci_gatt_write_long_char_value_1
   1013            if (status) {
   \                     ??aci_gatt_write_long_char_value_0: (+1)
   \   00000092   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD002             BEQ.N    ??aci_gatt_write_long_char_value_2
   1014              return status;
   \   0000009A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000009E   0xE000             B.N      ??aci_gatt_write_long_char_value_1
   1015            }
   1016            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_write_long_char_value_2: (+1)
   \   000000A0   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_write_long_char_value_1: (+1)
   \   000000A2   0xB048             ADD      SP,SP,#+288
   \   000000A4   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   1017          }

   \                                 In section .text, align 2, keep-with-next
   1018          tBleStatus aci_gatt_write_char_reliable(uint16_t Connection_Handle,
   1019                                                  uint16_t Attr_Handle,
   1020                                                  uint16_t Val_Offset,
   1021                                                  uint8_t Attribute_Val_Length,
   1022                                                  uint8_t Attribute_Val[])
   1023          {
   \                     aci_gatt_write_char_reliable: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB0C8             SUB      SP,SP,#+288
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   \   0000000E   0xF8DD 0x8140      LDR      R8,[SP, #+320]
   1024            struct hci_request rq;
   1025            uint8_t cmd_buffer[258];
   1026            aci_gatt_write_char_reliable_cp0 *cp0 = (aci_gatt_write_char_reliable_cp0*)(cmd_buffer);
   \   00000012   0xF10D 0x091C      ADD      R9,SP,#+28
   1027            tBleStatus status = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1028            uint8_t index_input = 0;
   \   0000001C   0xF05F 0x0A00      MOVS     R10,#+0
   1029            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000020   0xF8A9 0x4000      STRH     R4,[R9, #+0]
   1030            index_input += 2;
   \   00000024   0xF11A 0x0A02      ADDS     R10,R10,#+2
   1031            cp0->Attr_Handle = htob(Attr_Handle, 2);
   \   00000028   0xF8A9 0x5002      STRH     R5,[R9, #+2]
   1032            index_input += 2;
   \   0000002C   0xF11A 0x0A02      ADDS     R10,R10,#+2
   1033            cp0->Val_Offset = htob(Val_Offset, 2);
   \   00000030   0xF8A9 0x6004      STRH     R6,[R9, #+4]
   1034            index_input += 2;
   \   00000034   0xF11A 0x0A02      ADDS     R10,R10,#+2
   1035            cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
   \   00000038   0xF889 0x7006      STRB     R7,[R9, #+6]
   1036            index_input += 1;
   \   0000003C   0xF11A 0x0A01      ADDS     R10,R10,#+1
   1037            Osal_MemCpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length);
   \   00000040   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000042   0x003A             MOVS     R2,R7
   \   00000044   0x4641             MOV      R1,R8
   \   00000046   0xF119 0x0007      ADDS     R0,R9,#+7
   \   0000004A   0x.... 0x....      BL       Osal_MemCpy
   1038            index_input += Attribute_Val_Length;
   \   0000004E   0xEB17 0x0A0A      ADDS     R10,R7,R10
   1039            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000052   0x2218             MOVS     R2,#+24
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0xA801             ADD      R0,SP,#+4
   \   00000058   0x.... 0x....      BL       Osal_MemSet
   1040            rq.ogf = 0x3f;
   \   0000005C   0x203F             MOVS     R0,#+63
   \   0000005E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   1041            rq.ocf = 0x11e;
   \   00000062   0xF44F 0x708F      MOV      R0,#+286
   \   00000066   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1042            rq.event = 0x0F;
   \   0000006A   0x200F             MOVS     R0,#+15
   \   0000006C   0x9002             STR      R0,[SP, #+8]
   1043            rq.cparam = cmd_buffer;
   \   0000006E   0xA807             ADD      R0,SP,#+28
   \   00000070   0x9003             STR      R0,[SP, #+12]
   1044            rq.clen = index_input;
   \   00000072   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000076   0xF8CD 0xA010      STR      R10,[SP, #+16]
   1045            rq.rparam = &status;
   \   0000007A   0x4668             MOV      R0,SP
   \   0000007C   0x9005             STR      R0,[SP, #+20]
   1046            rq.rlen = 1;
   \   0000007E   0x2001             MOVS     R0,#+1
   \   00000080   0x9006             STR      R0,[SP, #+24]
   1047            if (hci_send_req(&rq, FALSE) < 0)
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0xA801             ADD      R0,SP,#+4
   \   00000086   0x.... 0x....      BL       hci_send_req
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD501             BPL.N    ??aci_gatt_write_char_reliable_0
   1048              return BLE_STATUS_TIMEOUT;
   \   0000008E   0x20FF             MOVS     R0,#+255
   \   00000090   0xE007             B.N      ??aci_gatt_write_char_reliable_1
   1049            if (status) {
   \                     ??aci_gatt_write_char_reliable_0: (+1)
   \   00000092   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD002             BEQ.N    ??aci_gatt_write_char_reliable_2
   1050              return status;
   \   0000009A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000009E   0xE000             B.N      ??aci_gatt_write_char_reliable_1
   1051            }
   1052            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_write_char_reliable_2: (+1)
   \   000000A0   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_write_char_reliable_1: (+1)
   \   000000A2   0xB048             ADD      SP,SP,#+288
   \   000000A4   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   1053          }

   \                                 In section .text, align 2, keep-with-next
   1054          tBleStatus aci_gatt_write_long_char_desc(uint16_t Connection_Handle,
   1055                                                   uint16_t Attr_Handle,
   1056                                                   uint16_t Val_Offset,
   1057                                                   uint8_t Attribute_Val_Length,
   1058                                                   uint8_t Attribute_Val[])
   1059          {
   \                     aci_gatt_write_long_char_desc: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB0C8             SUB      SP,SP,#+288
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   \   0000000E   0xF8DD 0x8140      LDR      R8,[SP, #+320]
   1060            struct hci_request rq;
   1061            uint8_t cmd_buffer[258];
   1062            aci_gatt_write_long_char_desc_cp0 *cp0 = (aci_gatt_write_long_char_desc_cp0*)(cmd_buffer);
   \   00000012   0xF10D 0x091C      ADD      R9,SP,#+28
   1063            tBleStatus status = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1064            uint8_t index_input = 0;
   \   0000001C   0xF05F 0x0A00      MOVS     R10,#+0
   1065            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000020   0xF8A9 0x4000      STRH     R4,[R9, #+0]
   1066            index_input += 2;
   \   00000024   0xF11A 0x0A02      ADDS     R10,R10,#+2
   1067            cp0->Attr_Handle = htob(Attr_Handle, 2);
   \   00000028   0xF8A9 0x5002      STRH     R5,[R9, #+2]
   1068            index_input += 2;
   \   0000002C   0xF11A 0x0A02      ADDS     R10,R10,#+2
   1069            cp0->Val_Offset = htob(Val_Offset, 2);
   \   00000030   0xF8A9 0x6004      STRH     R6,[R9, #+4]
   1070            index_input += 2;
   \   00000034   0xF11A 0x0A02      ADDS     R10,R10,#+2
   1071            cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
   \   00000038   0xF889 0x7006      STRB     R7,[R9, #+6]
   1072            index_input += 1;
   \   0000003C   0xF11A 0x0A01      ADDS     R10,R10,#+1
   1073            Osal_MemCpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length);
   \   00000040   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000042   0x003A             MOVS     R2,R7
   \   00000044   0x4641             MOV      R1,R8
   \   00000046   0xF119 0x0007      ADDS     R0,R9,#+7
   \   0000004A   0x.... 0x....      BL       Osal_MemCpy
   1074            index_input += Attribute_Val_Length;
   \   0000004E   0xEB17 0x0A0A      ADDS     R10,R7,R10
   1075            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000052   0x2218             MOVS     R2,#+24
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0xA801             ADD      R0,SP,#+4
   \   00000058   0x.... 0x....      BL       Osal_MemSet
   1076            rq.ogf = 0x3f;
   \   0000005C   0x203F             MOVS     R0,#+63
   \   0000005E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   1077            rq.ocf = 0x11f;
   \   00000062   0xF240 0x101F      MOVW     R0,#+287
   \   00000066   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1078            rq.event = 0x0F;
   \   0000006A   0x200F             MOVS     R0,#+15
   \   0000006C   0x9002             STR      R0,[SP, #+8]
   1079            rq.cparam = cmd_buffer;
   \   0000006E   0xA807             ADD      R0,SP,#+28
   \   00000070   0x9003             STR      R0,[SP, #+12]
   1080            rq.clen = index_input;
   \   00000072   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000076   0xF8CD 0xA010      STR      R10,[SP, #+16]
   1081            rq.rparam = &status;
   \   0000007A   0x4668             MOV      R0,SP
   \   0000007C   0x9005             STR      R0,[SP, #+20]
   1082            rq.rlen = 1;
   \   0000007E   0x2001             MOVS     R0,#+1
   \   00000080   0x9006             STR      R0,[SP, #+24]
   1083            if (hci_send_req(&rq, FALSE) < 0)
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0xA801             ADD      R0,SP,#+4
   \   00000086   0x.... 0x....      BL       hci_send_req
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD501             BPL.N    ??aci_gatt_write_long_char_desc_0
   1084              return BLE_STATUS_TIMEOUT;
   \   0000008E   0x20FF             MOVS     R0,#+255
   \   00000090   0xE007             B.N      ??aci_gatt_write_long_char_desc_1
   1085            if (status) {
   \                     ??aci_gatt_write_long_char_desc_0: (+1)
   \   00000092   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD002             BEQ.N    ??aci_gatt_write_long_char_desc_2
   1086              return status;
   \   0000009A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000009E   0xE000             B.N      ??aci_gatt_write_long_char_desc_1
   1087            }
   1088            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_write_long_char_desc_2: (+1)
   \   000000A0   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_write_long_char_desc_1: (+1)
   \   000000A2   0xB048             ADD      SP,SP,#+288
   \   000000A4   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   1089          }

   \                                 In section .text, align 2, keep-with-next
   1090          tBleStatus aci_gatt_read_long_char_desc(uint16_t Connection_Handle,
   1091                                                  uint16_t Attr_Handle,
   1092                                                  uint16_t Val_Offset)
   1093          {
   \                     aci_gatt_read_long_char_desc: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB0C8             SUB      SP,SP,#+288
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   1094            struct hci_request rq;
   1095            uint8_t cmd_buffer[258];
   1096            aci_gatt_read_long_char_desc_cp0 *cp0 = (aci_gatt_read_long_char_desc_cp0*)(cmd_buffer);
   \   0000000C   0xAF07             ADD      R7,SP,#+28
   1097            tBleStatus status = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1098            uint8_t index_input = 0;
   \   00000014   0xF05F 0x0800      MOVS     R8,#+0
   1099            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000018   0x803C             STRH     R4,[R7, #+0]
   1100            index_input += 2;
   \   0000001A   0xF118 0x0802      ADDS     R8,R8,#+2
   1101            cp0->Attr_Handle = htob(Attr_Handle, 2);
   \   0000001E   0x807D             STRH     R5,[R7, #+2]
   1102            index_input += 2;
   \   00000020   0xF118 0x0802      ADDS     R8,R8,#+2
   1103            cp0->Val_Offset = htob(Val_Offset, 2);
   \   00000024   0x80BE             STRH     R6,[R7, #+4]
   1104            index_input += 2;
   \   00000026   0xF118 0x0802      ADDS     R8,R8,#+2
   1105            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000002A   0x2218             MOVS     R2,#+24
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0xA801             ADD      R0,SP,#+4
   \   00000030   0x.... 0x....      BL       Osal_MemSet
   1106            rq.ogf = 0x3f;
   \   00000034   0x203F             MOVS     R0,#+63
   \   00000036   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   1107            rq.ocf = 0x120;
   \   0000003A   0xF44F 0x7090      MOV      R0,#+288
   \   0000003E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1108            rq.event = 0x0F;
   \   00000042   0x200F             MOVS     R0,#+15
   \   00000044   0x9002             STR      R0,[SP, #+8]
   1109            rq.cparam = cmd_buffer;
   \   00000046   0xA807             ADD      R0,SP,#+28
   \   00000048   0x9003             STR      R0,[SP, #+12]
   1110            rq.clen = index_input;
   \   0000004A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000004E   0xF8CD 0x8010      STR      R8,[SP, #+16]
   1111            rq.rparam = &status;
   \   00000052   0x4668             MOV      R0,SP
   \   00000054   0x9005             STR      R0,[SP, #+20]
   1112            rq.rlen = 1;
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x9006             STR      R0,[SP, #+24]
   1113            if (hci_send_req(&rq, FALSE) < 0)
   \   0000005A   0x2100             MOVS     R1,#+0
   \   0000005C   0xA801             ADD      R0,SP,#+4
   \   0000005E   0x.... 0x....      BL       hci_send_req
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD501             BPL.N    ??aci_gatt_read_long_char_desc_0
   1114              return BLE_STATUS_TIMEOUT;
   \   00000066   0x20FF             MOVS     R0,#+255
   \   00000068   0xE007             B.N      ??aci_gatt_read_long_char_desc_1
   1115            if (status) {
   \                     ??aci_gatt_read_long_char_desc_0: (+1)
   \   0000006A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD002             BEQ.N    ??aci_gatt_read_long_char_desc_2
   1116              return status;
   \   00000072   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000076   0xE000             B.N      ??aci_gatt_read_long_char_desc_1
   1117            }
   1118            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_read_long_char_desc_2: (+1)
   \   00000078   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_read_long_char_desc_1: (+1)
   \   0000007A   0xB048             ADD      SP,SP,#+288
   \   0000007C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1119          }

   \                                 In section .text, align 2, keep-with-next
   1120          tBleStatus aci_gatt_write_char_desc(uint16_t Connection_Handle,
   1121                                              uint16_t Attr_Handle,
   1122                                              uint8_t Attribute_Val_Length,
   1123                                              uint8_t Attribute_Val[])
   1124          {
   \                     aci_gatt_write_char_desc: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB0C9             SUB      SP,SP,#+292
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   1125            struct hci_request rq;
   1126            uint8_t cmd_buffer[258];
   1127            aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
   \   0000000E   0xF10D 0x081C      ADD      R8,SP,#+28
   1128            tBleStatus status = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1129            uint8_t index_input = 0;
   \   00000018   0xF05F 0x0900      MOVS     R9,#+0
   1130            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   0000001C   0xF8A8 0x4000      STRH     R4,[R8, #+0]
   1131            index_input += 2;
   \   00000020   0xF119 0x0902      ADDS     R9,R9,#+2
   1132            cp0->Attr_Handle = htob(Attr_Handle, 2);
   \   00000024   0xF8A8 0x5002      STRH     R5,[R8, #+2]
   1133            index_input += 2;
   \   00000028   0xF119 0x0902      ADDS     R9,R9,#+2
   1134            cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
   \   0000002C   0xF888 0x6004      STRB     R6,[R8, #+4]
   1135            index_input += 1;
   \   00000030   0xF119 0x0901      ADDS     R9,R9,#+1
   1136            Osal_MemCpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length);
   \   00000034   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000036   0x0032             MOVS     R2,R6
   \   00000038   0x0039             MOVS     R1,R7
   \   0000003A   0xF118 0x0005      ADDS     R0,R8,#+5
   \   0000003E   0x.... 0x....      BL       Osal_MemCpy
   1137            index_input += Attribute_Val_Length;
   \   00000042   0xEB16 0x0909      ADDS     R9,R6,R9
   1138            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000046   0x2218             MOVS     R2,#+24
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0xA801             ADD      R0,SP,#+4
   \   0000004C   0x.... 0x....      BL       Osal_MemSet
   1139            rq.ogf = 0x3f;
   \   00000050   0x203F             MOVS     R0,#+63
   \   00000052   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   1140            rq.ocf = 0x121;
   \   00000056   0xF240 0x1021      MOVW     R0,#+289
   \   0000005A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1141            rq.event = 0x0F;
   \   0000005E   0x200F             MOVS     R0,#+15
   \   00000060   0x9002             STR      R0,[SP, #+8]
   1142            rq.cparam = cmd_buffer;
   \   00000062   0xA807             ADD      R0,SP,#+28
   \   00000064   0x9003             STR      R0,[SP, #+12]
   1143            rq.clen = index_input;
   \   00000066   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   0000006A   0xF8CD 0x9010      STR      R9,[SP, #+16]
   1144            rq.rparam = &status;
   \   0000006E   0x4668             MOV      R0,SP
   \   00000070   0x9005             STR      R0,[SP, #+20]
   1145            rq.rlen = 1;
   \   00000072   0x2001             MOVS     R0,#+1
   \   00000074   0x9006             STR      R0,[SP, #+24]
   1146            if (hci_send_req(&rq, FALSE) < 0)
   \   00000076   0x2100             MOVS     R1,#+0
   \   00000078   0xA801             ADD      R0,SP,#+4
   \   0000007A   0x.... 0x....      BL       hci_send_req
   \   0000007E   0x2800             CMP      R0,#+0
   \   00000080   0xD501             BPL.N    ??aci_gatt_write_char_desc_0
   1147              return BLE_STATUS_TIMEOUT;
   \   00000082   0x20FF             MOVS     R0,#+255
   \   00000084   0xE007             B.N      ??aci_gatt_write_char_desc_1
   1148            if (status) {
   \                     ??aci_gatt_write_char_desc_0: (+1)
   \   00000086   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD002             BEQ.N    ??aci_gatt_write_char_desc_2
   1149              return status;
   \   0000008E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000092   0xE000             B.N      ??aci_gatt_write_char_desc_1
   1150            }
   1151            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_write_char_desc_2: (+1)
   \   00000094   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_write_char_desc_1: (+1)
   \   00000096   0xB049             ADD      SP,SP,#+292
   \   00000098   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   1152          }

   \                                 In section .text, align 2, keep-with-next
   1153          tBleStatus aci_gatt_read_char_desc(uint16_t Connection_Handle,
   1154                                             uint16_t Attr_Handle)
   1155          {
   \                     aci_gatt_read_char_desc: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB0C9             SUB      SP,SP,#+292
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   1156            struct hci_request rq;
   1157            uint8_t cmd_buffer[258];
   1158            aci_gatt_read_char_desc_cp0 *cp0 = (aci_gatt_read_char_desc_cp0*)(cmd_buffer);
   \   00000008   0xAE07             ADD      R6,SP,#+28
   1159            tBleStatus status = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1160            uint8_t index_input = 0;
   \   00000010   0x2700             MOVS     R7,#+0
   1161            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000012   0x8034             STRH     R4,[R6, #+0]
   1162            index_input += 2;
   \   00000014   0x1CBF             ADDS     R7,R7,#+2
   1163            cp0->Attr_Handle = htob(Attr_Handle, 2);
   \   00000016   0x8075             STRH     R5,[R6, #+2]
   1164            index_input += 2;
   \   00000018   0x1CBF             ADDS     R7,R7,#+2
   1165            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000001A   0x2218             MOVS     R2,#+24
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0xA801             ADD      R0,SP,#+4
   \   00000020   0x.... 0x....      BL       Osal_MemSet
   1166            rq.ogf = 0x3f;
   \   00000024   0x203F             MOVS     R0,#+63
   \   00000026   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   1167            rq.ocf = 0x122;
   \   0000002A   0xF44F 0x7091      MOV      R0,#+290
   \   0000002E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1168            rq.event = 0x0F;
   \   00000032   0x200F             MOVS     R0,#+15
   \   00000034   0x9002             STR      R0,[SP, #+8]
   1169            rq.cparam = cmd_buffer;
   \   00000036   0xA807             ADD      R0,SP,#+28
   \   00000038   0x9003             STR      R0,[SP, #+12]
   1170            rq.clen = index_input;
   \   0000003A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000003C   0x9704             STR      R7,[SP, #+16]
   1171            rq.rparam = &status;
   \   0000003E   0x4668             MOV      R0,SP
   \   00000040   0x9005             STR      R0,[SP, #+20]
   1172            rq.rlen = 1;
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x9006             STR      R0,[SP, #+24]
   1173            if (hci_send_req(&rq, FALSE) < 0)
   \   00000046   0x2100             MOVS     R1,#+0
   \   00000048   0xA801             ADD      R0,SP,#+4
   \   0000004A   0x.... 0x....      BL       hci_send_req
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD501             BPL.N    ??aci_gatt_read_char_desc_0
   1174              return BLE_STATUS_TIMEOUT;
   \   00000052   0x20FF             MOVS     R0,#+255
   \   00000054   0xE007             B.N      ??aci_gatt_read_char_desc_1
   1175            if (status) {
   \                     ??aci_gatt_read_char_desc_0: (+1)
   \   00000056   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD002             BEQ.N    ??aci_gatt_read_char_desc_2
   1176              return status;
   \   0000005E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000062   0xE000             B.N      ??aci_gatt_read_char_desc_1
   1177            }
   1178            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_read_char_desc_2: (+1)
   \   00000064   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_read_char_desc_1: (+1)
   \   00000066   0xB049             ADD      SP,SP,#+292
   \   00000068   0xBDF0             POP      {R4-R7,PC}       ;; return
   1179          }

   \                                 In section .text, align 2, keep-with-next
   1180          tBleStatus aci_gatt_write_without_resp(uint16_t Connection_Handle,
   1181                                                 uint16_t Attr_Handle,
   1182                                                 uint8_t Attribute_Val_Length,
   1183                                                 uint8_t Attribute_Val[])
   1184          {
   \                     aci_gatt_write_without_resp: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB0C9             SUB      SP,SP,#+292
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   1185            struct hci_request rq;
   1186            uint8_t cmd_buffer[258];
   1187            aci_gatt_write_without_resp_cp0 *cp0 = (aci_gatt_write_without_resp_cp0*)(cmd_buffer);
   \   0000000E   0xF10D 0x081C      ADD      R8,SP,#+28
   1188            tBleStatus status = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1189            uint8_t index_input = 0;
   \   00000018   0xF05F 0x0900      MOVS     R9,#+0
   1190            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   0000001C   0xF8A8 0x4000      STRH     R4,[R8, #+0]
   1191            index_input += 2;
   \   00000020   0xF119 0x0902      ADDS     R9,R9,#+2
   1192            cp0->Attr_Handle = htob(Attr_Handle, 2);
   \   00000024   0xF8A8 0x5002      STRH     R5,[R8, #+2]
   1193            index_input += 2;
   \   00000028   0xF119 0x0902      ADDS     R9,R9,#+2
   1194            cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
   \   0000002C   0xF888 0x6004      STRB     R6,[R8, #+4]
   1195            index_input += 1;
   \   00000030   0xF119 0x0901      ADDS     R9,R9,#+1
   1196            Osal_MemCpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length);
   \   00000034   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000036   0x0032             MOVS     R2,R6
   \   00000038   0x0039             MOVS     R1,R7
   \   0000003A   0xF118 0x0005      ADDS     R0,R8,#+5
   \   0000003E   0x.... 0x....      BL       Osal_MemCpy
   1197            index_input += Attribute_Val_Length;
   \   00000042   0xEB16 0x0909      ADDS     R9,R6,R9
   1198            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000046   0x2218             MOVS     R2,#+24
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0xA801             ADD      R0,SP,#+4
   \   0000004C   0x.... 0x....      BL       Osal_MemSet
   1199            rq.ogf = 0x3f;
   \   00000050   0x203F             MOVS     R0,#+63
   \   00000052   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   1200            rq.ocf = 0x123;
   \   00000056   0xF240 0x1023      MOVW     R0,#+291
   \   0000005A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1201            rq.cparam = cmd_buffer;
   \   0000005E   0xA807             ADD      R0,SP,#+28
   \   00000060   0x9003             STR      R0,[SP, #+12]
   1202            rq.clen = index_input;
   \   00000062   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000066   0xF8CD 0x9010      STR      R9,[SP, #+16]
   1203            rq.rparam = &status;
   \   0000006A   0x4668             MOV      R0,SP
   \   0000006C   0x9005             STR      R0,[SP, #+20]
   1204            rq.rlen = 1;
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0x9006             STR      R0,[SP, #+24]
   1205            if (hci_send_req(&rq, FALSE) < 0)
   \   00000072   0x2100             MOVS     R1,#+0
   \   00000074   0xA801             ADD      R0,SP,#+4
   \   00000076   0x.... 0x....      BL       hci_send_req
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD501             BPL.N    ??aci_gatt_write_without_resp_0
   1206              return BLE_STATUS_TIMEOUT;
   \   0000007E   0x20FF             MOVS     R0,#+255
   \   00000080   0xE007             B.N      ??aci_gatt_write_without_resp_1
   1207            if (status) {
   \                     ??aci_gatt_write_without_resp_0: (+1)
   \   00000082   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD002             BEQ.N    ??aci_gatt_write_without_resp_2
   1208              return status;
   \   0000008A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000008E   0xE000             B.N      ??aci_gatt_write_without_resp_1
   1209            }
   1210            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_write_without_resp_2: (+1)
   \   00000090   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_write_without_resp_1: (+1)
   \   00000092   0xB049             ADD      SP,SP,#+292
   \   00000094   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   1211          }

   \                                 In section .text, align 2, keep-with-next
   1212          tBleStatus aci_gatt_signed_write_without_resp(uint16_t Connection_Handle,
   1213                                                        uint16_t Attr_Handle,
   1214                                                        uint8_t Attribute_Val_Length,
   1215                                                        uint8_t Attribute_Val[])
   1216          {
   \                     aci_gatt_signed_write_without_resp: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB0C9             SUB      SP,SP,#+292
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   1217            struct hci_request rq;
   1218            uint8_t cmd_buffer[258];
   1219            aci_gatt_signed_write_without_resp_cp0 *cp0 = (aci_gatt_signed_write_without_resp_cp0*)(cmd_buffer);
   \   0000000E   0xF10D 0x081C      ADD      R8,SP,#+28
   1220            tBleStatus status = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1221            uint8_t index_input = 0;
   \   00000018   0xF05F 0x0900      MOVS     R9,#+0
   1222            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   0000001C   0xF8A8 0x4000      STRH     R4,[R8, #+0]
   1223            index_input += 2;
   \   00000020   0xF119 0x0902      ADDS     R9,R9,#+2
   1224            cp0->Attr_Handle = htob(Attr_Handle, 2);
   \   00000024   0xF8A8 0x5002      STRH     R5,[R8, #+2]
   1225            index_input += 2;
   \   00000028   0xF119 0x0902      ADDS     R9,R9,#+2
   1226            cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
   \   0000002C   0xF888 0x6004      STRB     R6,[R8, #+4]
   1227            index_input += 1;
   \   00000030   0xF119 0x0901      ADDS     R9,R9,#+1
   1228            Osal_MemCpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length);
   \   00000034   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000036   0x0032             MOVS     R2,R6
   \   00000038   0x0039             MOVS     R1,R7
   \   0000003A   0xF118 0x0005      ADDS     R0,R8,#+5
   \   0000003E   0x.... 0x....      BL       Osal_MemCpy
   1229            index_input += Attribute_Val_Length;
   \   00000042   0xEB16 0x0909      ADDS     R9,R6,R9
   1230            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000046   0x2218             MOVS     R2,#+24
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0xA801             ADD      R0,SP,#+4
   \   0000004C   0x.... 0x....      BL       Osal_MemSet
   1231            rq.ogf = 0x3f;
   \   00000050   0x203F             MOVS     R0,#+63
   \   00000052   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   1232            rq.ocf = 0x124;
   \   00000056   0xF44F 0x7092      MOV      R0,#+292
   \   0000005A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1233            rq.cparam = cmd_buffer;
   \   0000005E   0xA807             ADD      R0,SP,#+28
   \   00000060   0x9003             STR      R0,[SP, #+12]
   1234            rq.clen = index_input;
   \   00000062   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000066   0xF8CD 0x9010      STR      R9,[SP, #+16]
   1235            rq.rparam = &status;
   \   0000006A   0x4668             MOV      R0,SP
   \   0000006C   0x9005             STR      R0,[SP, #+20]
   1236            rq.rlen = 1;
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0x9006             STR      R0,[SP, #+24]
   1237            if (hci_send_req(&rq, FALSE) < 0)
   \   00000072   0x2100             MOVS     R1,#+0
   \   00000074   0xA801             ADD      R0,SP,#+4
   \   00000076   0x.... 0x....      BL       hci_send_req
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD501             BPL.N    ??aci_gatt_signed_write_without_resp_0
   1238              return BLE_STATUS_TIMEOUT;
   \   0000007E   0x20FF             MOVS     R0,#+255
   \   00000080   0xE007             B.N      ??aci_gatt_signed_write_without_resp_1
   1239            if (status) {
   \                     ??aci_gatt_signed_write_without_resp_0: (+1)
   \   00000082   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD002             BEQ.N    ??aci_gatt_signed_write_without_resp_2
   1240              return status;
   \   0000008A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000008E   0xE000             B.N      ??aci_gatt_signed_write_without_resp_1
   1241            }
   1242            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_signed_write_without_resp_2: (+1)
   \   00000090   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_signed_write_without_resp_1: (+1)
   \   00000092   0xB049             ADD      SP,SP,#+292
   \   00000094   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   1243          }

   \                                 In section .text, align 2, keep-with-next
   1244          tBleStatus aci_gatt_confirm_indication(uint16_t Connection_Handle)
   1245          {
   \                     aci_gatt_confirm_indication: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0C8             SUB      SP,SP,#+288
   \   00000004   0x0004             MOVS     R4,R0
   1246            struct hci_request rq;
   1247            uint8_t cmd_buffer[258];
   1248            aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
   \   00000006   0xAD07             ADD      R5,SP,#+28
   1249            tBleStatus status = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1250            uint8_t index_input = 0;
   \   0000000E   0x2600             MOVS     R6,#+0
   1251            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000010   0x802C             STRH     R4,[R5, #+0]
   1252            index_input += 2;
   \   00000012   0x1CB6             ADDS     R6,R6,#+2
   1253            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000014   0x2218             MOVS     R2,#+24
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0xA801             ADD      R0,SP,#+4
   \   0000001A   0x.... 0x....      BL       Osal_MemSet
   1254            rq.ogf = 0x3f;
   \   0000001E   0x203F             MOVS     R0,#+63
   \   00000020   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   1255            rq.ocf = 0x125;
   \   00000024   0xF240 0x1025      MOVW     R0,#+293
   \   00000028   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1256            rq.cparam = cmd_buffer;
   \   0000002C   0xA807             ADD      R0,SP,#+28
   \   0000002E   0x9003             STR      R0,[SP, #+12]
   1257            rq.clen = index_input;
   \   00000030   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000032   0x9604             STR      R6,[SP, #+16]
   1258            rq.rparam = &status;
   \   00000034   0x4668             MOV      R0,SP
   \   00000036   0x9005             STR      R0,[SP, #+20]
   1259            rq.rlen = 1;
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x9006             STR      R0,[SP, #+24]
   1260            if (hci_send_req(&rq, FALSE) < 0)
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0xA801             ADD      R0,SP,#+4
   \   00000040   0x.... 0x....      BL       hci_send_req
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD501             BPL.N    ??aci_gatt_confirm_indication_0
   1261              return BLE_STATUS_TIMEOUT;
   \   00000048   0x20FF             MOVS     R0,#+255
   \   0000004A   0xE007             B.N      ??aci_gatt_confirm_indication_1
   1262            if (status) {
   \                     ??aci_gatt_confirm_indication_0: (+1)
   \   0000004C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD002             BEQ.N    ??aci_gatt_confirm_indication_2
   1263              return status;
   \   00000054   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000058   0xE000             B.N      ??aci_gatt_confirm_indication_1
   1264            }
   1265            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_confirm_indication_2: (+1)
   \   0000005A   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_confirm_indication_1: (+1)
   \   0000005C   0xB048             ADD      SP,SP,#+288
   \   0000005E   0xBD70             POP      {R4-R6,PC}       ;; return
   1266          }

   \                                 In section .text, align 2, keep-with-next
   1267          tBleStatus aci_gatt_write_resp(uint16_t Connection_Handle,
   1268                                         uint16_t Attr_Handle,
   1269                                         uint8_t Write_status,
   1270                                         uint8_t Error_Code,
   1271                                         uint8_t Attribute_Val_Length,
   1272                                         uint8_t Attribute_Val[])
   1273          {
   \                     aci_gatt_write_resp: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB0C9             SUB      SP,SP,#+292
   \   00000006   0x0005             MOVS     R5,R0
   \   00000008   0x000E             MOVS     R6,R1
   \   0000000A   0x0017             MOVS     R7,R2
   \   0000000C   0x4698             MOV      R8,R3
   \   0000000E   0x9C52             LDR      R4,[SP, #+328]
   \   00000010   0xF8DD 0x914C      LDR      R9,[SP, #+332]
   1274            struct hci_request rq;
   1275            uint8_t cmd_buffer[258];
   1276            aci_gatt_write_resp_cp0 *cp0 = (aci_gatt_write_resp_cp0*)(cmd_buffer);
   \   00000014   0xF10D 0x0A1C      ADD      R10,SP,#+28
   1277            tBleStatus status = 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1278            uint8_t index_input = 0;
   \   0000001E   0xF05F 0x0B00      MOVS     R11,#+0
   1279            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000022   0xF8AA 0x5000      STRH     R5,[R10, #+0]
   1280            index_input += 2;
   \   00000026   0xF11B 0x0B02      ADDS     R11,R11,#+2
   1281            cp0->Attr_Handle = htob(Attr_Handle, 2);
   \   0000002A   0xF8AA 0x6002      STRH     R6,[R10, #+2]
   1282            index_input += 2;
   \   0000002E   0xF11B 0x0B02      ADDS     R11,R11,#+2
   1283            cp0->Write_status = htob(Write_status, 1);
   \   00000032   0xF88A 0x7004      STRB     R7,[R10, #+4]
   1284            index_input += 1;
   \   00000036   0xF11B 0x0B01      ADDS     R11,R11,#+1
   1285            cp0->Error_Code = htob(Error_Code, 1);
   \   0000003A   0xF88A 0x8005      STRB     R8,[R10, #+5]
   1286            index_input += 1;
   \   0000003E   0xF11B 0x0B01      ADDS     R11,R11,#+1
   1287            cp0->Attribute_Val_Length = htob(Attribute_Val_Length, 1);
   \   00000042   0xF88A 0x4006      STRB     R4,[R10, #+6]
   1288            index_input += 1;
   \   00000046   0xF11B 0x0B01      ADDS     R11,R11,#+1
   1289            Osal_MemCpy((void *) &cp0->Attribute_Val, (const void *) Attribute_Val, Attribute_Val_Length);
   \   0000004A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004C   0x0022             MOVS     R2,R4
   \   0000004E   0x4649             MOV      R1,R9
   \   00000050   0xF11A 0x0007      ADDS     R0,R10,#+7
   \   00000054   0x.... 0x....      BL       Osal_MemCpy
   1290            index_input += Attribute_Val_Length;
   \   00000058   0xEB14 0x0B0B      ADDS     R11,R4,R11
   1291            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000005C   0x2218             MOVS     R2,#+24
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0xA801             ADD      R0,SP,#+4
   \   00000062   0x.... 0x....      BL       Osal_MemSet
   1292            rq.ogf = 0x3f;
   \   00000066   0x203F             MOVS     R0,#+63
   \   00000068   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   1293            rq.ocf = 0x126;
   \   0000006C   0xF44F 0x7093      MOV      R0,#+294
   \   00000070   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1294            rq.cparam = cmd_buffer;
   \   00000074   0xA807             ADD      R0,SP,#+28
   \   00000076   0x9003             STR      R0,[SP, #+12]
   1295            rq.clen = index_input;
   \   00000078   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000007C   0xF8CD 0xB010      STR      R11,[SP, #+16]
   1296            rq.rparam = &status;
   \   00000080   0x4668             MOV      R0,SP
   \   00000082   0x9005             STR      R0,[SP, #+20]
   1297            rq.rlen = 1;
   \   00000084   0x2001             MOVS     R0,#+1
   \   00000086   0x9006             STR      R0,[SP, #+24]
   1298            if (hci_send_req(&rq, FALSE) < 0)
   \   00000088   0x2100             MOVS     R1,#+0
   \   0000008A   0xA801             ADD      R0,SP,#+4
   \   0000008C   0x.... 0x....      BL       hci_send_req
   \   00000090   0x2800             CMP      R0,#+0
   \   00000092   0xD501             BPL.N    ??aci_gatt_write_resp_0
   1299              return BLE_STATUS_TIMEOUT;
   \   00000094   0x20FF             MOVS     R0,#+255
   \   00000096   0xE007             B.N      ??aci_gatt_write_resp_1
   1300            if (status) {
   \                     ??aci_gatt_write_resp_0: (+1)
   \   00000098   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000009C   0x2800             CMP      R0,#+0
   \   0000009E   0xD002             BEQ.N    ??aci_gatt_write_resp_2
   1301              return status;
   \   000000A0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000A4   0xE000             B.N      ??aci_gatt_write_resp_1
   1302            }
   1303            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_write_resp_2: (+1)
   \   000000A6   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_write_resp_1: (+1)
   \   000000A8   0xB049             ADD      SP,SP,#+292
   \   000000AA   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1304          }

   \                                 In section .text, align 2, keep-with-next
   1305          tBleStatus aci_gatt_allow_read(uint16_t Connection_Handle)
   1306          {
   \                     aci_gatt_allow_read: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0C8             SUB      SP,SP,#+288
   \   00000004   0x0004             MOVS     R4,R0
   1307            struct hci_request rq;
   1308            uint8_t cmd_buffer[258];
   1309            aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
   \   00000006   0xAD07             ADD      R5,SP,#+28
   1310            tBleStatus status = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1311            uint8_t index_input = 0;
   \   0000000E   0x2600             MOVS     R6,#+0
   1312            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000010   0x802C             STRH     R4,[R5, #+0]
   1313            index_input += 2;
   \   00000012   0x1CB6             ADDS     R6,R6,#+2
   1314            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000014   0x2218             MOVS     R2,#+24
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0xA801             ADD      R0,SP,#+4
   \   0000001A   0x.... 0x....      BL       Osal_MemSet
   1315            rq.ogf = 0x3f;
   \   0000001E   0x203F             MOVS     R0,#+63
   \   00000020   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   1316            rq.ocf = 0x127;
   \   00000024   0xF240 0x1027      MOVW     R0,#+295
   \   00000028   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1317            rq.cparam = cmd_buffer;
   \   0000002C   0xA807             ADD      R0,SP,#+28
   \   0000002E   0x9003             STR      R0,[SP, #+12]
   1318            rq.clen = index_input;
   \   00000030   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000032   0x9604             STR      R6,[SP, #+16]
   1319            rq.rparam = &status;
   \   00000034   0x4668             MOV      R0,SP
   \   00000036   0x9005             STR      R0,[SP, #+20]
   1320            rq.rlen = 1;
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x9006             STR      R0,[SP, #+24]
   1321            if (hci_send_req(&rq, FALSE) < 0)
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0xA801             ADD      R0,SP,#+4
   \   00000040   0x.... 0x....      BL       hci_send_req
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD501             BPL.N    ??aci_gatt_allow_read_0
   1322              return BLE_STATUS_TIMEOUT;
   \   00000048   0x20FF             MOVS     R0,#+255
   \   0000004A   0xE007             B.N      ??aci_gatt_allow_read_1
   1323            if (status) {
   \                     ??aci_gatt_allow_read_0: (+1)
   \   0000004C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD002             BEQ.N    ??aci_gatt_allow_read_2
   1324              return status;
   \   00000054   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000058   0xE000             B.N      ??aci_gatt_allow_read_1
   1325            }
   1326            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_allow_read_2: (+1)
   \   0000005A   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_allow_read_1: (+1)
   \   0000005C   0xB048             ADD      SP,SP,#+288
   \   0000005E   0xBD70             POP      {R4-R6,PC}       ;; return
   1327          }

   \                                 In section .text, align 2, keep-with-next
   1328          tBleStatus aci_gatt_set_security_permission(uint16_t Serv_Handle,
   1329                                                      uint16_t Attr_Handle,
   1330                                                      uint8_t Security_Permissions)
   1331          {
   \                     aci_gatt_set_security_permission: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB0C8             SUB      SP,SP,#+288
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   1332            struct hci_request rq;
   1333            uint8_t cmd_buffer[258];
   1334            aci_gatt_set_security_permission_cp0 *cp0 = (aci_gatt_set_security_permission_cp0*)(cmd_buffer);
   \   0000000C   0xAF07             ADD      R7,SP,#+28
   1335            tBleStatus status = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1336            uint8_t index_input = 0;
   \   00000014   0xF05F 0x0800      MOVS     R8,#+0
   1337            cp0->Serv_Handle = htob(Serv_Handle, 2);
   \   00000018   0x803C             STRH     R4,[R7, #+0]
   1338            index_input += 2;
   \   0000001A   0xF118 0x0802      ADDS     R8,R8,#+2
   1339            cp0->Attr_Handle = htob(Attr_Handle, 2);
   \   0000001E   0x807D             STRH     R5,[R7, #+2]
   1340            index_input += 2;
   \   00000020   0xF118 0x0802      ADDS     R8,R8,#+2
   1341            cp0->Security_Permissions = htob(Security_Permissions, 1);
   \   00000024   0x713E             STRB     R6,[R7, #+4]
   1342            index_input += 1;
   \   00000026   0xF118 0x0801      ADDS     R8,R8,#+1
   1343            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000002A   0x2218             MOVS     R2,#+24
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0xA801             ADD      R0,SP,#+4
   \   00000030   0x.... 0x....      BL       Osal_MemSet
   1344            rq.ogf = 0x3f;
   \   00000034   0x203F             MOVS     R0,#+63
   \   00000036   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   1345            rq.ocf = 0x128;
   \   0000003A   0xF44F 0x7094      MOV      R0,#+296
   \   0000003E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1346            rq.cparam = cmd_buffer;
   \   00000042   0xA807             ADD      R0,SP,#+28
   \   00000044   0x9003             STR      R0,[SP, #+12]
   1347            rq.clen = index_input;
   \   00000046   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000004A   0xF8CD 0x8010      STR      R8,[SP, #+16]
   1348            rq.rparam = &status;
   \   0000004E   0x4668             MOV      R0,SP
   \   00000050   0x9005             STR      R0,[SP, #+20]
   1349            rq.rlen = 1;
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0x9006             STR      R0,[SP, #+24]
   1350            if (hci_send_req(&rq, FALSE) < 0)
   \   00000056   0x2100             MOVS     R1,#+0
   \   00000058   0xA801             ADD      R0,SP,#+4
   \   0000005A   0x.... 0x....      BL       hci_send_req
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD501             BPL.N    ??aci_gatt_set_security_permission_0
   1351              return BLE_STATUS_TIMEOUT;
   \   00000062   0x20FF             MOVS     R0,#+255
   \   00000064   0xE007             B.N      ??aci_gatt_set_security_permission_1
   1352            if (status) {
   \                     ??aci_gatt_set_security_permission_0: (+1)
   \   00000066   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xD002             BEQ.N    ??aci_gatt_set_security_permission_2
   1353              return status;
   \   0000006E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000072   0xE000             B.N      ??aci_gatt_set_security_permission_1
   1354            }
   1355            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_set_security_permission_2: (+1)
   \   00000074   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_set_security_permission_1: (+1)
   \   00000076   0xB048             ADD      SP,SP,#+288
   \   00000078   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1356          }

   \                                 In section .text, align 2, keep-with-next
   1357          tBleStatus aci_gatt_set_desc_value(uint16_t Serv_Handle,
   1358                                             uint16_t Char_Handle,
   1359                                             uint16_t Char_Desc_Handle,
   1360                                             uint16_t Val_Offset,
   1361                                             uint8_t Char_Desc_Value_Length,
   1362                                             uint8_t Char_Desc_Value[])
   1363          {
   \                     aci_gatt_set_desc_value: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB0C9             SUB      SP,SP,#+292
   \   00000006   0x0005             MOVS     R5,R0
   \   00000008   0x000E             MOVS     R6,R1
   \   0000000A   0x0017             MOVS     R7,R2
   \   0000000C   0x4698             MOV      R8,R3
   \   0000000E   0x9C52             LDR      R4,[SP, #+328]
   \   00000010   0xF8DD 0x914C      LDR      R9,[SP, #+332]
   1364            struct hci_request rq;
   1365            uint8_t cmd_buffer[258];
   1366            aci_gatt_set_desc_value_cp0 *cp0 = (aci_gatt_set_desc_value_cp0*)(cmd_buffer);
   \   00000014   0xF10D 0x0A1C      ADD      R10,SP,#+28
   1367            tBleStatus status = 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1368            uint8_t index_input = 0;
   \   0000001E   0xF05F 0x0B00      MOVS     R11,#+0
   1369            cp0->Serv_Handle = htob(Serv_Handle, 2);
   \   00000022   0xF8AA 0x5000      STRH     R5,[R10, #+0]
   1370            index_input += 2;
   \   00000026   0xF11B 0x0B02      ADDS     R11,R11,#+2
   1371            cp0->Char_Handle = htob(Char_Handle, 2);
   \   0000002A   0xF8AA 0x6002      STRH     R6,[R10, #+2]
   1372            index_input += 2;
   \   0000002E   0xF11B 0x0B02      ADDS     R11,R11,#+2
   1373            cp0->Char_Desc_Handle = htob(Char_Desc_Handle, 2);
   \   00000032   0xF8AA 0x7004      STRH     R7,[R10, #+4]
   1374            index_input += 2;
   \   00000036   0xF11B 0x0B02      ADDS     R11,R11,#+2
   1375            cp0->Val_Offset = htob(Val_Offset, 2);
   \   0000003A   0xF8AA 0x8006      STRH     R8,[R10, #+6]
   1376            index_input += 2;
   \   0000003E   0xF11B 0x0B02      ADDS     R11,R11,#+2
   1377            cp0->Char_Desc_Value_Length = htob(Char_Desc_Value_Length, 1);
   \   00000042   0xF88A 0x4008      STRB     R4,[R10, #+8]
   1378            index_input += 1;
   \   00000046   0xF11B 0x0B01      ADDS     R11,R11,#+1
   1379            Osal_MemCpy((void *) &cp0->Char_Desc_Value, (const void *) Char_Desc_Value, Char_Desc_Value_Length);
   \   0000004A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004C   0x0022             MOVS     R2,R4
   \   0000004E   0x4649             MOV      R1,R9
   \   00000050   0xF11A 0x0009      ADDS     R0,R10,#+9
   \   00000054   0x.... 0x....      BL       Osal_MemCpy
   1380            index_input += Char_Desc_Value_Length;
   \   00000058   0xEB14 0x0B0B      ADDS     R11,R4,R11
   1381            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000005C   0x2218             MOVS     R2,#+24
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0xA801             ADD      R0,SP,#+4
   \   00000062   0x.... 0x....      BL       Osal_MemSet
   1382            rq.ogf = 0x3f;
   \   00000066   0x203F             MOVS     R0,#+63
   \   00000068   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   1383            rq.ocf = 0x129;
   \   0000006C   0xF240 0x1029      MOVW     R0,#+297
   \   00000070   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1384            rq.cparam = cmd_buffer;
   \   00000074   0xA807             ADD      R0,SP,#+28
   \   00000076   0x9003             STR      R0,[SP, #+12]
   1385            rq.clen = index_input;
   \   00000078   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000007C   0xF8CD 0xB010      STR      R11,[SP, #+16]
   1386            rq.rparam = &status;
   \   00000080   0x4668             MOV      R0,SP
   \   00000082   0x9005             STR      R0,[SP, #+20]
   1387            rq.rlen = 1;
   \   00000084   0x2001             MOVS     R0,#+1
   \   00000086   0x9006             STR      R0,[SP, #+24]
   1388            if (hci_send_req(&rq, FALSE) < 0)
   \   00000088   0x2100             MOVS     R1,#+0
   \   0000008A   0xA801             ADD      R0,SP,#+4
   \   0000008C   0x.... 0x....      BL       hci_send_req
   \   00000090   0x2800             CMP      R0,#+0
   \   00000092   0xD501             BPL.N    ??aci_gatt_set_desc_value_0
   1389              return BLE_STATUS_TIMEOUT;
   \   00000094   0x20FF             MOVS     R0,#+255
   \   00000096   0xE007             B.N      ??aci_gatt_set_desc_value_1
   1390            if (status) {
   \                     ??aci_gatt_set_desc_value_0: (+1)
   \   00000098   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000009C   0x2800             CMP      R0,#+0
   \   0000009E   0xD002             BEQ.N    ??aci_gatt_set_desc_value_2
   1391              return status;
   \   000000A0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000A4   0xE000             B.N      ??aci_gatt_set_desc_value_1
   1392            }
   1393            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_set_desc_value_2: (+1)
   \   000000A6   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_set_desc_value_1: (+1)
   \   000000A8   0xB049             ADD      SP,SP,#+292
   \   000000AA   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1394          }

   \                                 In section .text, align 2, keep-with-next
   1395          tBleStatus aci_gatt_read_handle_value(uint16_t Attr_Handle,
   1396                                                uint16_t Offset,
   1397                                                uint16_t Value_Length_Requested,
   1398                                                uint16_t *Length,
   1399                                                uint16_t *Value_Length,
   1400                                                uint8_t Value[])
   1401          {
   \                     aci_gatt_read_handle_value: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB0E7             SUB      SP,SP,#+412
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x0016             MOVS     R6,R2
   \   0000000C   0x001F             MOVS     R7,R3
   \   0000000E   0xF8DD 0x81C0      LDR      R8,[SP, #+448]
   \   00000012   0xF8DD 0x91C4      LDR      R9,[SP, #+452]
   1402            struct hci_request rq;
   1403            uint8_t cmd_buffer[258];
   1404            aci_gatt_read_handle_value_cp0 *cp0 = (aci_gatt_read_handle_value_cp0*)(cmd_buffer);
   \   00000016   0xF10D 0x0A98      ADD      R10,SP,#+152
   1405            aci_gatt_read_handle_value_rp0 resp;
   1406            Osal_MemSet(&resp, 0, sizeof(resp));
   \   0000001A   0x2280             MOVS     R2,#+128
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0xA806             ADD      R0,SP,#+24
   \   00000020   0x.... 0x....      BL       Osal_MemSet
   1407            uint8_t index_input = 0;
   \   00000024   0xF05F 0x0B00      MOVS     R11,#+0
   1408            cp0->Attr_Handle = htob(Attr_Handle, 2);
   \   00000028   0xF8AA 0x4000      STRH     R4,[R10, #+0]
   1409            index_input += 2;
   \   0000002C   0xF11B 0x0B02      ADDS     R11,R11,#+2
   1410            cp0->Offset = htob(Offset, 2);
   \   00000030   0xF8AA 0x5002      STRH     R5,[R10, #+2]
   1411            index_input += 2;
   \   00000034   0xF11B 0x0B02      ADDS     R11,R11,#+2
   1412            cp0->Value_Length_Requested = htob(Value_Length_Requested, 2);
   \   00000038   0xF8AA 0x6004      STRH     R6,[R10, #+4]
   1413            index_input += 2;
   \   0000003C   0xF11B 0x0B02      ADDS     R11,R11,#+2
   1414            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000040   0x2218             MOVS     R2,#+24
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x4668             MOV      R0,SP
   \   00000046   0x.... 0x....      BL       Osal_MemSet
   1415            rq.ogf = 0x3f;
   \   0000004A   0x203F             MOVS     R0,#+63
   \   0000004C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   1416            rq.ocf = 0x12a;
   \   00000050   0xF44F 0x7095      MOV      R0,#+298
   \   00000054   0xF8AD 0x0002      STRH     R0,[SP, #+2]
   1417            rq.cparam = cmd_buffer;
   \   00000058   0xA826             ADD      R0,SP,#+152
   \   0000005A   0x9002             STR      R0,[SP, #+8]
   1418            rq.clen = index_input;
   \   0000005C   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000060   0xF8CD 0xB00C      STR      R11,[SP, #+12]
   1419            rq.rparam = &resp;
   \   00000064   0xA806             ADD      R0,SP,#+24
   \   00000066   0x9004             STR      R0,[SP, #+16]
   1420            rq.rlen = sizeof(resp);
   \   00000068   0x2080             MOVS     R0,#+128
   \   0000006A   0x9005             STR      R0,[SP, #+20]
   1421            if (hci_send_req(&rq, FALSE) < 0)
   \   0000006C   0x2100             MOVS     R1,#+0
   \   0000006E   0x4668             MOV      R0,SP
   \   00000070   0x.... 0x....      BL       hci_send_req
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD501             BPL.N    ??aci_gatt_read_handle_value_0
   1422              return BLE_STATUS_TIMEOUT;
   \   00000078   0x20FF             MOVS     R0,#+255
   \   0000007A   0xE015             B.N      ??aci_gatt_read_handle_value_1
   1423            if (resp.Status) {
   \                     ??aci_gatt_read_handle_value_0: (+1)
   \   0000007C   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   00000080   0x2800             CMP      R0,#+0
   \   00000082   0xD002             BEQ.N    ??aci_gatt_read_handle_value_2
   1424              return resp.Status;
   \   00000084   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   00000088   0xE00E             B.N      ??aci_gatt_read_handle_value_1
   1425            }
   1426            *Length = btoh(resp.Length, 2);
   \                     ??aci_gatt_read_handle_value_2: (+1)
   \   0000008A   0xF8BD 0x0019      LDRH     R0,[SP, #+25]
   \   0000008E   0x8038             STRH     R0,[R7, #+0]
   1427            *Value_Length = btoh(resp.Value_Length, 2);
   \   00000090   0xF8BD 0x001B      LDRH     R0,[SP, #+27]
   \   00000094   0xF8A8 0x0000      STRH     R0,[R8, #+0]
   1428            Osal_MemCpy((void *) Value, (const void *) resp.Value, *Value_Length);
   \   00000098   0xF8B8 0x2000      LDRH     R2,[R8, #+0]
   \   0000009C   0xF10D 0x011D      ADD      R1,SP,#+29
   \   000000A0   0x4648             MOV      R0,R9
   \   000000A2   0x.... 0x....      BL       Osal_MemCpy
   1429            return BLE_STATUS_SUCCESS;
   \   000000A6   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_read_handle_value_1: (+1)
   \   000000A8   0xB067             ADD      SP,SP,#+412
   \   000000AA   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1430          }

   \                                 In section .text, align 2, keep-with-next
   1431          tBleStatus aci_gatt_update_char_value_ext(uint16_t Conn_Handle_To_Notify,
   1432                                                    uint16_t Service_Handle,
   1433                                                    uint16_t Char_Handle,
   1434                                                    uint8_t Update_Type,
   1435                                                    uint16_t Char_Length,
   1436                                                    uint16_t Value_Offset,
   1437                                                    uint8_t Value_Length,
   1438                                                    uint8_t Value[])
   1439          {
   \                     aci_gatt_update_char_value_ext: (+1)
   \   00000000   0xE92D 0x4FF3      PUSH     {R0,R1,R4-R11,LR}
   \   00000004   0xB0C9             SUB      SP,SP,#+292
   \   00000006   0x0017             MOVS     R7,R2
   \   00000008   0x4698             MOV      R8,R3
   \   0000000A   0x9C54             LDR      R4,[SP, #+336]
   \   0000000C   0x9D55             LDR      R5,[SP, #+340]
   \   0000000E   0x9E56             LDR      R6,[SP, #+344]
   \   00000010   0xF8DD 0x915C      LDR      R9,[SP, #+348]
   1440            struct hci_request rq;
   1441            uint8_t cmd_buffer[258];
   1442            aci_gatt_update_char_value_ext_cp0 *cp0 = (aci_gatt_update_char_value_ext_cp0*)(cmd_buffer);
   \   00000014   0xF10D 0x0A1C      ADD      R10,SP,#+28
   1443            tBleStatus status = 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1444            uint8_t index_input = 0;
   \   0000001E   0xF05F 0x0B00      MOVS     R11,#+0
   1445            cp0->Conn_Handle_To_Notify = htob(Conn_Handle_To_Notify, 2);
   \   00000022   0xF8BD 0x0124      LDRH     R0,[SP, #+292]
   \   00000026   0xF8AA 0x0000      STRH     R0,[R10, #+0]
   1446            index_input += 2;
   \   0000002A   0xF11B 0x0B02      ADDS     R11,R11,#+2
   1447            cp0->Service_Handle = htob(Service_Handle, 2);
   \   0000002E   0xF8BD 0x0128      LDRH     R0,[SP, #+296]
   \   00000032   0xF8AA 0x0002      STRH     R0,[R10, #+2]
   1448            index_input += 2;
   \   00000036   0xF11B 0x0B02      ADDS     R11,R11,#+2
   1449            cp0->Char_Handle = htob(Char_Handle, 2);
   \   0000003A   0xF8AA 0x7004      STRH     R7,[R10, #+4]
   1450            index_input += 2;
   \   0000003E   0xF11B 0x0B02      ADDS     R11,R11,#+2
   1451            cp0->Update_Type = htob(Update_Type, 1);
   \   00000042   0xF88A 0x8006      STRB     R8,[R10, #+6]
   1452            index_input += 1;
   \   00000046   0xF11B 0x0B01      ADDS     R11,R11,#+1
   1453            cp0->Char_Length = htob(Char_Length, 2);
   \   0000004A   0xF8AA 0x4007      STRH     R4,[R10, #+7]
   1454            index_input += 2;
   \   0000004E   0xF11B 0x0B02      ADDS     R11,R11,#+2
   1455            cp0->Value_Offset = htob(Value_Offset, 2);
   \   00000052   0xF8AA 0x5009      STRH     R5,[R10, #+9]
   1456            index_input += 2;
   \   00000056   0xF11B 0x0B02      ADDS     R11,R11,#+2
   1457            cp0->Value_Length = htob(Value_Length, 1);
   \   0000005A   0xF88A 0x600B      STRB     R6,[R10, #+11]
   1458            index_input += 1;
   \   0000005E   0xF11B 0x0B01      ADDS     R11,R11,#+1
   1459            Osal_MemCpy((void *) &cp0->Value, (const void *) Value, Value_Length);
   \   00000062   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000064   0x0032             MOVS     R2,R6
   \   00000066   0x4649             MOV      R1,R9
   \   00000068   0xF11A 0x000C      ADDS     R0,R10,#+12
   \   0000006C   0x.... 0x....      BL       Osal_MemCpy
   1460            index_input += Value_Length;
   \   00000070   0xEB16 0x0B0B      ADDS     R11,R6,R11
   1461            Osal_MemSet(&rq, 0, sizeof(rq));
   \   00000074   0x2218             MOVS     R2,#+24
   \   00000076   0x2100             MOVS     R1,#+0
   \   00000078   0xA801             ADD      R0,SP,#+4
   \   0000007A   0x.... 0x....      BL       Osal_MemSet
   1462            rq.ogf = 0x3f;
   \   0000007E   0x203F             MOVS     R0,#+63
   \   00000080   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   1463            rq.ocf = 0x12c;
   \   00000084   0xF44F 0x7096      MOV      R0,#+300
   \   00000088   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1464            rq.cparam = cmd_buffer;
   \   0000008C   0xA807             ADD      R0,SP,#+28
   \   0000008E   0x9003             STR      R0,[SP, #+12]
   1465            rq.clen = index_input;
   \   00000090   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000094   0xF8CD 0xB010      STR      R11,[SP, #+16]
   1466            rq.rparam = &status;
   \   00000098   0x4668             MOV      R0,SP
   \   0000009A   0x9005             STR      R0,[SP, #+20]
   1467            rq.rlen = 1;
   \   0000009C   0x2001             MOVS     R0,#+1
   \   0000009E   0x9006             STR      R0,[SP, #+24]
   1468            if (hci_send_req(&rq, FALSE) < 0)
   \   000000A0   0x2100             MOVS     R1,#+0
   \   000000A2   0xA801             ADD      R0,SP,#+4
   \   000000A4   0x.... 0x....      BL       hci_send_req
   \   000000A8   0x2800             CMP      R0,#+0
   \   000000AA   0xD501             BPL.N    ??aci_gatt_update_char_value_ext_0
   1469              return BLE_STATUS_TIMEOUT;
   \   000000AC   0x20FF             MOVS     R0,#+255
   \   000000AE   0xE007             B.N      ??aci_gatt_update_char_value_ext_1
   1470            if (status) {
   \                     ??aci_gatt_update_char_value_ext_0: (+1)
   \   000000B0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000B4   0x2800             CMP      R0,#+0
   \   000000B6   0xD002             BEQ.N    ??aci_gatt_update_char_value_ext_2
   1471              return status;
   \   000000B8   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000BC   0xE000             B.N      ??aci_gatt_update_char_value_ext_1
   1472            }
   1473            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_update_char_value_ext_2: (+1)
   \   000000BE   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_update_char_value_ext_1: (+1)
   \   000000C0   0xB04B             ADD      SP,SP,#+300
   \   000000C2   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1474          }

   \                                 In section .text, align 2, keep-with-next
   1475          tBleStatus aci_gatt_deny_read(uint16_t Connection_Handle,
   1476                                        uint8_t Error_Code)
   1477          {
   \                     aci_gatt_deny_read: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB0C9             SUB      SP,SP,#+292
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   1478            struct hci_request rq;
   1479            uint8_t cmd_buffer[258];
   1480            aci_gatt_deny_read_cp0 *cp0 = (aci_gatt_deny_read_cp0*)(cmd_buffer);
   \   00000008   0xAE07             ADD      R6,SP,#+28
   1481            tBleStatus status = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1482            uint8_t index_input = 0;
   \   00000010   0x2700             MOVS     R7,#+0
   1483            cp0->Connection_Handle = htob(Connection_Handle, 2);
   \   00000012   0x8034             STRH     R4,[R6, #+0]
   1484            index_input += 2;
   \   00000014   0x1CBF             ADDS     R7,R7,#+2
   1485            cp0->Error_Code = htob(Error_Code, 1);
   \   00000016   0x70B5             STRB     R5,[R6, #+2]
   1486            index_input += 1;
   \   00000018   0x1C7F             ADDS     R7,R7,#+1
   1487            Osal_MemSet(&rq, 0, sizeof(rq));
   \   0000001A   0x2218             MOVS     R2,#+24
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0xA801             ADD      R0,SP,#+4
   \   00000020   0x.... 0x....      BL       Osal_MemSet
   1488            rq.ogf = 0x3f;
   \   00000024   0x203F             MOVS     R0,#+63
   \   00000026   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   1489            rq.ocf = 0x12d;
   \   0000002A   0xF240 0x102D      MOVW     R0,#+301
   \   0000002E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1490            rq.cparam = cmd_buffer;
   \   00000032   0xA807             ADD      R0,SP,#+28
   \   00000034   0x9003             STR      R0,[SP, #+12]
   1491            rq.clen = index_input;
   \   00000036   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000038   0x9704             STR      R7,[SP, #+16]
   1492            rq.rparam = &status;
   \   0000003A   0x4668             MOV      R0,SP
   \   0000003C   0x9005             STR      R0,[SP, #+20]
   1493            rq.rlen = 1;
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x9006             STR      R0,[SP, #+24]
   1494            if (hci_send_req(&rq, FALSE) < 0)
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0xA801             ADD      R0,SP,#+4
   \   00000046   0x.... 0x....      BL       hci_send_req
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD501             BPL.N    ??aci_gatt_deny_read_0
   1495              return BLE_STATUS_TIMEOUT;
   \   0000004E   0x20FF             MOVS     R0,#+255
   \   00000050   0xE007             B.N      ??aci_gatt_deny_read_1
   1496            if (status) {
   \                     ??aci_gatt_deny_read_0: (+1)
   \   00000052   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD002             BEQ.N    ??aci_gatt_deny_read_2
   1497              return status;
   \   0000005A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000005E   0xE000             B.N      ??aci_gatt_deny_read_1
   1498            }
   1499            return BLE_STATUS_SUCCESS;
   \                     ??aci_gatt_deny_read_2: (+1)
   \   00000060   0x2000             MOVS     R0,#+0
   \                     ??aci_gatt_deny_read_1: (+1)
   \   00000062   0xB049             ADD      SP,SP,#+292
   \   00000064   0xBDF0             POP      {R4-R7,PC}       ;; return
   1500          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     312   aci_att_execute_write_req
       312   -> Osal_MemSet
       312   -> hci_send_req
     328   aci_att_find_by_type_value_req
       328   -> Osal_MemCpy
       328   -> Osal_MemSet
       328   -> hci_send_req
     312   aci_att_find_info_req
       312   -> Osal_MemSet
       312   -> hci_send_req
     320   aci_att_prepare_write_req
       320   -> Osal_MemCpy
       320   -> Osal_MemSet
       320   -> hci_send_req
     320   aci_att_read_by_group_type_req
       320   -> Osal_MemCpy
       320   -> Osal_MemSet
       320   -> hci_send_req
     320   aci_att_read_by_type_req
       320   -> Osal_MemCpy
       320   -> Osal_MemSet
       320   -> hci_send_req
     344   aci_gatt_add_char
       344   -> Osal_MemCpy
       344   -> Osal_MemSet
       344   -> hci_send_req
     344   aci_gatt_add_char_desc
       344   -> Osal_MemCpy
       344   -> Osal_MemSet
       344   -> hci_send_req
     328   aci_gatt_add_service
       328   -> Osal_MemCpy
       328   -> Osal_MemSet
       328   -> hci_send_req
     304   aci_gatt_allow_read
       304   -> Osal_MemSet
       304   -> hci_send_req
     304   aci_gatt_confirm_indication
       304   -> Osal_MemSet
       304   -> hci_send_req
     312   aci_gatt_del_char
       312   -> Osal_MemSet
       312   -> hci_send_req
     312   aci_gatt_del_include_service
       312   -> Osal_MemSet
       312   -> hci_send_req
     304   aci_gatt_del_service
       304   -> Osal_MemSet
       304   -> hci_send_req
     312   aci_gatt_deny_read
       312   -> Osal_MemSet
       312   -> hci_send_req
     312   aci_gatt_disc_all_char_desc
       312   -> Osal_MemSet
       312   -> hci_send_req
     312   aci_gatt_disc_all_char_of_service
       312   -> Osal_MemSet
       312   -> hci_send_req
     304   aci_gatt_disc_all_primary_services
       304   -> Osal_MemSet
       304   -> hci_send_req
     320   aci_gatt_disc_char_by_uuid
       320   -> Osal_MemCpy
       320   -> Osal_MemSet
       320   -> hci_send_req
     312   aci_gatt_disc_primary_service_by_uuid
       312   -> Osal_MemCpy
       312   -> Osal_MemSet
       312   -> hci_send_req
     304   aci_gatt_exchange_config
       304   -> Osal_MemSet
       304   -> hci_send_req
     312   aci_gatt_find_included_services
       312   -> Osal_MemSet
       312   -> hci_send_req
     328   aci_gatt_include_service
       328   -> Osal_MemCpy
       328   -> Osal_MemSet
       328   -> hci_send_req
      32   aci_gatt_init
        32   -> Osal_MemSet
        32   -> hci_send_req
     312   aci_gatt_read_char_desc
       312   -> Osal_MemSet
       312   -> hci_send_req
     312   aci_gatt_read_char_value
       312   -> Osal_MemSet
       312   -> hci_send_req
     448   aci_gatt_read_handle_value
       448   -> Osal_MemCpy
       448   -> Osal_MemSet
       448   -> hci_send_req
     312   aci_gatt_read_long_char_desc
       312   -> Osal_MemSet
       312   -> hci_send_req
     312   aci_gatt_read_long_char_value
       312   -> Osal_MemSet
       312   -> hci_send_req
     312   aci_gatt_read_multiple_char_value
       312   -> Osal_MemCpy
       312   -> Osal_MemSet
       312   -> hci_send_req
     320   aci_gatt_read_using_char_uuid
       320   -> Osal_MemCpy
       320   -> Osal_MemSet
       320   -> hci_send_req
     328   aci_gatt_set_desc_value
       328   -> Osal_MemCpy
       328   -> Osal_MemSet
       328   -> hci_send_req
     304   aci_gatt_set_event_mask
       304   -> Osal_MemSet
       304   -> hci_send_req
     312   aci_gatt_set_security_permission
       312   -> Osal_MemSet
       312   -> hci_send_req
     320   aci_gatt_signed_write_without_resp
       320   -> Osal_MemCpy
       320   -> Osal_MemSet
       320   -> hci_send_req
     320   aci_gatt_update_char_value
       320   -> Osal_MemCpy
       320   -> Osal_MemSet
       320   -> hci_send_req
     336   aci_gatt_update_char_value_ext
       336   -> Osal_MemCpy
       336   -> Osal_MemSet
       336   -> hci_send_req
     320   aci_gatt_write_char_desc
       320   -> Osal_MemCpy
       320   -> Osal_MemSet
       320   -> hci_send_req
     320   aci_gatt_write_char_reliable
       320   -> Osal_MemCpy
       320   -> Osal_MemSet
       320   -> hci_send_req
     320   aci_gatt_write_char_value
       320   -> Osal_MemCpy
       320   -> Osal_MemSet
       320   -> hci_send_req
     320   aci_gatt_write_long_char_desc
       320   -> Osal_MemCpy
       320   -> Osal_MemSet
       320   -> hci_send_req
     320   aci_gatt_write_long_char_value
       320   -> Osal_MemCpy
       320   -> Osal_MemSet
       320   -> hci_send_req
     328   aci_gatt_write_resp
       328   -> Osal_MemCpy
       328   -> Osal_MemSet
       328   -> hci_send_req
     320   aci_gatt_write_without_resp
       320   -> Osal_MemCpy
       320   -> Osal_MemSet
       320   -> hci_send_req


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     106  aci_att_execute_write_req
     178  aci_att_find_by_type_value_req
     128  aci_att_find_info_req
     168  aci_att_prepare_write_req
     168  aci_att_read_by_group_type_req
     168  aci_att_read_by_type_req
     292  aci_gatt_add_char
     368  aci_gatt_add_char_desc
     230  aci_gatt_add_service
      96  aci_gatt_allow_read
      96  aci_gatt_confirm_indication
     102  aci_gatt_del_char
     102  aci_gatt_del_include_service
      96  aci_gatt_del_service
     102  aci_gatt_deny_read
     128  aci_gatt_disc_all_char_desc
     128  aci_gatt_disc_all_char_of_service
     100  aci_gatt_disc_all_primary_services
     168  aci_gatt_disc_char_by_uuid
     138  aci_gatt_disc_primary_service_by_uuid
     100  aci_gatt_exchange_config
     128  aci_gatt_find_included_services
     180  aci_gatt_include_service
      78  aci_gatt_init
     106  aci_gatt_read_char_desc
     106  aci_gatt_read_char_value
     174  aci_gatt_read_handle_value
     128  aci_gatt_read_long_char_desc
     128  aci_gatt_read_long_char_value
     138  aci_gatt_read_multiple_char_value
     168  aci_gatt_read_using_char_uuid
     174  aci_gatt_set_desc_value
      96  aci_gatt_set_event_mask
     124  aci_gatt_set_security_permission
     152  aci_gatt_signed_write_without_resp
     164  aci_gatt_update_char_value
     198  aci_gatt_update_char_value_ext
     156  aci_gatt_write_char_desc
     168  aci_gatt_write_char_reliable
     156  aci_gatt_write_char_value
     168  aci_gatt_write_long_char_desc
     168  aci_gatt_write_long_char_value
     174  aci_gatt_write_resp
     152  aci_gatt_write_without_resp

 
 6 546 bytes in section .text
 
 6 546 bytes of CODE memory

Errors: none
Warnings: none
